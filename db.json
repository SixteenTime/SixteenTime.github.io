{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/2021121101.png","path":"images/2021121101.png","modified":0,"renderable":0},{"_id":"source/images/2021121201.jpg","path":"images/2021121201.jpg","modified":0,"renderable":0},{"_id":"source/images/2021121202.png","path":"images/2021121202.png","modified":0,"renderable":0},{"_id":"source/images/2021121301.png","path":"images/2021121301.png","modified":0,"renderable":0},{"_id":"source/images/2021121302.png","path":"images/2021121302.png","modified":0,"renderable":0},{"_id":"source/images/2021121401.png","path":"images/2021121401.png","modified":0,"renderable":0},{"_id":"source/images/2021121402.png","path":"images/2021121402.png","modified":0,"renderable":0},{"_id":"source/images/2021121403.png","path":"images/2021121403.png","modified":0,"renderable":0},{"_id":"source/images/2021121404.png","path":"images/2021121404.png","modified":0,"renderable":0},{"_id":"source/images/2021121405.png","path":"images/2021121405.png","modified":0,"renderable":0},{"_id":"source/images/2021121601.png","path":"images/2021121601.png","modified":0,"renderable":0},{"_id":"source/images/2021121701.png","path":"images/2021121701.png","modified":0,"renderable":0},{"_id":"source/images/2021121702.png","path":"images/2021121702.png","modified":0,"renderable":0},{"_id":"source/images/2021121801.png","path":"images/2021121801.png","modified":0,"renderable":0},{"_id":"source/images/beauty/01.png","path":"images/beauty/01.png","modified":0,"renderable":0},{"_id":"source/images/beauty/02.jfif","path":"images/beauty/02.jfif","modified":0,"renderable":0},{"_id":"source/images/beauty/03.jfif","path":"images/beauty/03.jfif","modified":0,"renderable":0},{"_id":"source/images/beauty/05.JPG","path":"images/beauty/05.JPG","modified":0,"renderable":0},{"_id":"source/images/beauty/06.JPG","path":"images/beauty/06.JPG","modified":0,"renderable":0},{"_id":"source/images/beauty/07.PNG","path":"images/beauty/07.PNG","modified":0,"renderable":0},{"_id":"source/images/beauty/08.PNG","path":"images/beauty/08.PNG","modified":0,"renderable":0},{"_id":"source/images/beauty/09.jpeg","path":"images/beauty/09.jpeg","modified":0,"renderable":0},{"_id":"source/images/beauty/10.png","path":"images/beauty/10.png","modified":0,"renderable":0},{"_id":"source/images/beauty/11.png","path":"images/beauty/11.png","modified":0,"renderable":0},{"_id":"source/images/beauty/12.png","path":"images/beauty/12.png","modified":0,"renderable":0},{"_id":"source/images/beauty/13.png","path":"images/beauty/13.png","modified":0,"renderable":0},{"_id":"source/images/beauty/14.png","path":"images/beauty/14.png","modified":0,"renderable":0},{"_id":"source/images/beauty/15.png","path":"images/beauty/15.png","modified":0,"renderable":0},{"_id":"source/images/beauty/16.png","path":"images/beauty/16.png","modified":0,"renderable":0},{"_id":"source/images/book/01.jpg","path":"images/book/01.jpg","modified":0,"renderable":0},{"_id":"source/images/react/2021121901.png","path":"images/react/2021121901.png","modified":0,"renderable":0},{"_id":"source/images/react/2021121902.png","path":"images/react/2021121902.png","modified":0,"renderable":0},{"_id":"source/images/react/2021121903.png","path":"images/react/2021121903.png","modified":0,"renderable":0},{"_id":"source/images/theme/cloud.png","path":"images/theme/cloud.png","modified":0,"renderable":0},{"_id":"source/images/theme/loading.gif","path":"images/theme/loading.gif","modified":0,"renderable":0},{"_id":"source/images/theme/loading2.png","path":"images/theme/loading2.png","modified":0,"renderable":0},{"_id":"source/images/theme/post-image.png","path":"images/theme/post-image.png","modified":0,"renderable":0},{"_id":"source/images/theme/welcome-image.jpg","path":"images/theme/welcome-image.jpg","modified":0,"renderable":0},{"_id":"source/images/theme/welcome-image.png","path":"images/theme/welcome-image.png","modified":0,"renderable":0},{"_id":"source/images/theme/welcome-image2.jpg","path":"images/theme/welcome-image2.jpg","modified":0,"renderable":0},{"_id":"source/images/theme/welcome-image3.jpg","path":"images/theme/welcome-image3.jpg","modified":0,"renderable":0},{"_id":"source/images/theme/welcome-image4.jpg","path":"images/theme/welcome-image4.jpg","modified":0,"renderable":0},{"_id":"source/images/theme/welcome-image5.png","path":"images/theme/welcome-image5.png","modified":0,"renderable":0},{"_id":"source/images/theme/welcome-image6.jfif","path":"images/theme/welcome-image6.jfif","modified":0,"renderable":0},{"_id":"source/images/theme/welcome-image7.jfif","path":"images/theme/welcome-image7.jfif","modified":0,"renderable":0},{"_id":"themes/zhaoo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/js/color-mode.js","path":"js/color-mode.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/apple-touch-icon.png","path":"images/icons/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/favicon-128x128.png","path":"images/icons/favicon-128x128.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/favicon-144x144.png","path":"images/icons/favicon-144x144.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/favicon-16x16.png","path":"images/icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/favicon-32x32.png","path":"images/icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/logo_128.png","path":"images/icons/logo_128.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/logo_144.png","path":"images/icons/logo_144.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/logo_16.png","path":"images/icons/logo_16.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/logo_180.png","path":"images/icons/logo_180.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/logo_32.png","path":"images/icons/logo_32.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/logo_500.png","path":"images/icons/logo_500.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/zhaoo-logo.png","path":"images/icons/zhaoo-logo.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/cloud.png","path":"images/theme/cloud.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/loading.gif","path":"images/theme/loading.gif","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/loading2.png","path":"images/theme/loading2.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image.png","path":"images/theme/post-image.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/welcome-image.png","path":"images/theme/welcome-image.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/welcome-image2.jpg","path":"images/theme/welcome-image2.jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/welcome-image3.jpg","path":"images/theme/welcome-image3.jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/welcome-image4.jpg","path":"images/theme/welcome-image4.jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/welcome-image5.png","path":"images/theme/welcome-image5.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/welcome-image6.jfif","path":"images/theme/welcome-image6.jfif","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/welcome-image7.jfif","path":"images/theme/welcome-image7.jfif","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/welcome-image8.png","path":"images/theme/welcome-image8.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/daovoice/daovoice.js","path":"lib/daovoice/daovoice.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/fancybox/fancybox.css","path":"lib/fancybox/fancybox.css","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/fancybox/fancybox.js","path":"lib/fancybox/fancybox.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/gitalk/gitalk.css","path":"lib/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/gitalk/gitalk.js","path":"lib/gitalk/gitalk.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/highlight/a11y-dark.css","path":"lib/highlight/a11y-dark.css","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/highlight/highlight.js","path":"lib/highlight/highlight.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/jquery/jquery.js","path":"lib/jquery/jquery.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/lazyload/lazyload.js","path":"lib/lazyload/lazyload.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/lottie/lottie.js","path":"lib/lottie/lottie.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/pjax/pjax.js","path":"lib/pjax/pjax.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/qrcode/qrcode.js","path":"lib/qrcode/qrcode.js","modified":0,"renderable":1},{"_id":"source/images/react/2021122001.png","path":"images/react/2021122001.png","modified":1,"renderable":0},{"_id":"source/images/react/2021122003.png","path":"images/react/2021122003.png","modified":1,"renderable":0},{"_id":"source/images/react/2021122002.png","path":"images/react/2021122002.png","modified":1,"renderable":0},{"_id":"source/images/react/2021122005.png","path":"images/react/2021122005.png","modified":1,"renderable":0},{"_id":"source/images/react/2021122004.png","path":"images/react/2021122004.png","modified":1,"renderable":0},{"_id":"source/images/react/2021122006.png","path":"images/react/2021122006.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/React学习三.md","hash":"4d23e92c982a4c63abe4e40a3d595a03a0650aeb","modified":1639884076948},{"_id":"source/CNAME","hash":"451bb6994a62aac57cf5f269cc4cd7873cd0ed81","modified":1639440962904},{"_id":"source/_posts/React学习一.md","hash":"8ee7b715c03902954a0be426dabcf0379c4358e5","modified":1639878657361},{"_id":"source/_posts/二零二一年十二月十七日.md","hash":"370536e3271cb90f71a82789f868d37ec0cbcab3","modified":1639833562075},{"_id":"source/_posts/React学习二.md","hash":"83130b8217a20f1510a93fc2c9e88340d8bb15a8","modified":1639878689956},{"_id":"source/_data/galleries.json","hash":"35fe275f99c65bf1fe2fbbdf512116080eb8eb6b","modified":1639356119433},{"_id":"source/_posts/二零二一年十二月十三日.md","hash":"46a84d0b29ba4385208136b65873cd98b5f14688","modified":1639407032541},{"_id":"source/_posts/二零二一年十二月十四日.md","hash":"0b9d33837c31393342394121d4edfa2ef6501ea7","modified":1639643160432},{"_id":"source/_posts/二零二一年十二月十八日.md","hash":"4afa0e346dcb4dd85aaebb5d1362a33d70ec757a","modified":1639884293002},{"_id":"source/_posts/二零二一年十二月十六日.md","hash":"159f0307beeb832231c20f9152544a1a6afeb180","modified":1639737806080},{"_id":"source/_posts/二零二一年十二月十二日.md","hash":"703d96e4f7470330fd8faa18b6a66471ee271a92","modified":1639355394464},{"_id":"source/galleries/index.md","hash":"2af42f5c4d404b22104a41e8875d39d1831b7dac","modified":1639273789465},{"_id":"source/about/index.md","hash":"1751fce61820bd9bb9ce9b449dbed8545252d945","modified":1639355567651},{"_id":"source/_posts/搭建hexo博客时出现的问题.md","hash":"26a82d26ccf278d10a555b59813790a7d184cec1","modified":1639288034291},{"_id":"source/_posts/二零二一年十二月十一日.md","hash":"e7a00e52571ba202ce9ef7a8a4a84c6f28a70717","modified":1639355411483},{"_id":"source/categories/index.md","hash":"108d69d9b70c1b66531b8de5e89d809f9fad26a6","modified":1639274948833},{"_id":"source/galleries/书摘/index.md","hash":"22f86612984ec0bd86f7a04be5b7d2f2a8c6fb04","modified":1639287258273},{"_id":"source/tags/index.md","hash":"377d1b44097a7b98e5e31bb0a65182f9da9e503c","modified":1639274768635},{"_id":"source/galleries/她们/index.md","hash":"8a87ebd038bec449a2d702110bb6254754817827","modified":1639274685735},{"_id":"source/images/beauty/06.JPG","hash":"6670a0675966694f0cd37fcafb81b078548ca009","modified":1606639594000},{"_id":"source/images/react/2021121901.png","hash":"34ffc46a845eddb6ee3172511e1a88bc81fb6bc0","modified":1639877698957},{"_id":"source/images/react/2021121902.png","hash":"2b68e23d92d07b1185b3d93f6dca26325843f24b","modified":1639877711270},{"_id":"source/images/react/2021121903.png","hash":"17c9af7b63c7fcb050ed845b1894a6f7c84bf667","modified":1639878946018},{"_id":"source/images/theme/loading2.png","hash":"2a7ceb0aab67f0c04934dee9643a4ff6d8fb60cc","modified":1639226141725},{"_id":"source/images/theme/loading.gif","hash":"db91090dd60098086993953f88c37a332eea70d7","modified":1637246461000},{"_id":"source/images/beauty/09.jpeg","hash":"9698f34a49ff23c3071d2ad7094054afe5451e74","modified":1639284658379},{"_id":"source/images/theme/welcome-image3.jpg","hash":"f78bc3e3291d7031efc36ada72151f12172adf04","modified":1624513484000},{"_id":"source/images/2021121101.png","hash":"0b5e4870110a2586e7e9cc15d6329029594778ca","modified":1639232304532},{"_id":"source/images/beauty/03.jfif","hash":"b0d97a262d2f616e5a01522a59084930830aeaf0","modified":1639218142342},{"_id":"source/images/beauty/05.JPG","hash":"f88552e8efbaf639ddf9aa66831009ffd96aa1e9","modified":1607071422000},{"_id":"source/images/theme/cloud.png","hash":"fdf44a91026ad999dca2f0a42213aabebd783c98","modified":1637246461000},{"_id":"source/images/theme/welcome-image7.jfif","hash":"b0d97a262d2f616e5a01522a59084930830aeaf0","modified":1639218142342},{"_id":"source/images/beauty/02.jfif","hash":"8b05cc38ecc004df4256186f5ffedbc5ca78858f","modified":1639218095683},{"_id":"source/images/beauty/15.png","hash":"46a2afaee7897957c6ba5bd1dfe5050334581c93","modified":1639355931603},{"_id":"source/images/theme/welcome-image4.jpg","hash":"bc0d3ce8dede763fd9924da20c2ccb97e295025e","modified":1639213274224},{"_id":"source/images/theme/welcome-image6.jfif","hash":"8b05cc38ecc004df4256186f5ffedbc5ca78858f","modified":1639218095683},{"_id":"source/images/theme/welcome-image2.jpg","hash":"9e3fb1c2c7cec5fdadec0b87fd0a6f593ada60a3","modified":1624513186000},{"_id":"source/images/theme/welcome-image.jpg","hash":"ba0968002f3ac6d41bb50ba9ba62309ff8e62dda","modified":1639212660336},{"_id":"source/images/2021121201.jpg","hash":"981dcd61b7f1a408637661b859c1a5869b25ce53","modified":1639210074807},{"_id":"source/images/book/01.jpg","hash":"0714b0d4afa0e67ac861ed02c85a15a1acb9a432","modified":1639287181785},{"_id":"source/images/beauty/12.png","hash":"311b9469d62b76061a999d01f1b3dac87c86a32d","modified":1639355863885},{"_id":"themes/zhaoo/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1637246461000},{"_id":"themes/zhaoo/LICENSE","hash":"74f4b502cb5e62d3c947bc4fd16bed695d8bf65b","modified":1637246461000},{"_id":"themes/zhaoo/README.md","hash":"31f0def1c46e5dac5a77ebd77dca0460de3ed2f8","modified":1637246461000},{"_id":"themes/zhaoo/_config.yml","hash":"111942b97e3dc374c894af365497420bd01ec257","modified":1639284012515},{"_id":"themes/zhaoo/package.json","hash":"e116101e90a6eefdbbf423f7a4d0edd72221cf17","modified":1637246461000},{"_id":"themes/zhaoo/README_EN.md","hash":"daa353598985e4184d6055df229665985001e672","modified":1637246461000},{"_id":"themes/zhaoo/languages/default.yml","hash":"1b2b75ca9ff3bfeddb596239889b584cdfcecc32","modified":1637246461000},{"_id":"themes/zhaoo/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1637246461000},{"_id":"themes/zhaoo/languages/it.yml","hash":"6ae71000ed039f56572143ffe90da17b95d1a66f","modified":1637246461000},{"_id":"themes/zhaoo/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1637246461000},{"_id":"themes/zhaoo/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1637246461000},{"_id":"themes/zhaoo/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1637246461000},{"_id":"themes/zhaoo/languages/zh-CN.yml","hash":"ccbba6315760755926f5abfe1b98c225a6650581","modified":1637246461000},{"_id":"themes/zhaoo/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1637246461000},{"_id":"themes/zhaoo/layout/archive.ejs","hash":"438069ea52e71a9fd8c96ff58007ec6c91e352a7","modified":1637246461000},{"_id":"themes/zhaoo/layout/categories.ejs","hash":"e7ed9fa6a6abd02af212a8bf04fc600d008f4abd","modified":1637246461000},{"_id":"themes/zhaoo/layout/category.ejs","hash":"ca4af3683e3d3daf9282c76b0749c2b1a89399ac","modified":1637246461000},{"_id":"themes/zhaoo/layout/galleries.ejs","hash":"65f1bad4c0410c92087f72e2d9298f30f23e4d18","modified":1637246461000},{"_id":"themes/zhaoo/layout/gallery.ejs","hash":"a379c8607ae2fdd450198e437ba8125ac1435654","modified":1637246461000},{"_id":"themes/zhaoo/layout/layout.ejs","hash":"4b559e7859d72d3e962b18198cbb30ec126c84b5","modified":1637246461000},{"_id":"themes/zhaoo/layout/index.ejs","hash":"0e6282054062e1391be29bb473487a808f13828c","modified":1637246461000},{"_id":"themes/zhaoo/layout/post.ejs","hash":"747038a8b2d33bce35b2f68d3e50bdfa28c4f36c","modified":1637246461000},{"_id":"themes/zhaoo/layout/pure.ejs","hash":"1ffc46cb8d2a976a329bd6e8292ca8114467f833","modified":1637246461000},{"_id":"themes/zhaoo/layout/tag.ejs","hash":"91a8ffd62866427d6e04884fc4fc806b8c261770","modified":1637246461000},{"_id":"themes/zhaoo/layout/tags.ejs","hash":"937f6400f7b47baa4aca025786dcd67151355cc1","modified":1637246461000},{"_id":"themes/zhaoo/scripts/caption.js","hash":"651928cc462943be90036c33262d3d25aa3e7ea0","modified":1637246461000},{"_id":"themes/zhaoo/scripts/entry.js","hash":"c0c69f1c184c7a2e29dbaaa45a93b8948c241932","modified":1637246461000},{"_id":"themes/zhaoo/scripts/carrier.js","hash":"10c3cde9ec17e1ced6ad871e7f5af409cbc51e6e","modified":1637246461000},{"_id":"themes/zhaoo/scripts/lazyload.js","hash":"ccf0c3d84fc2edf085c43e204410cf4d3c6b2baa","modified":1637246461000},{"_id":"themes/zhaoo/scripts/post-image.js","hash":"82f5d9d5d9fe9d7de886d87fe20cea360d0df8d9","modified":1637246461000},{"_id":"themes/zhaoo/scripts/merge-config.js","hash":"35aac2f51a883d4d7bbe2b3b273b47f4db670952","modified":1637246461000},{"_id":"themes/zhaoo/scripts/title.js","hash":"b62b21cd09717564ef883c901deb5451b3000dbd","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/head.ejs","hash":"b81bbde79d21adaef2023e9e1f0807c9ffb5b59b","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/script.ejs","hash":"b3d7c42d6ee99dfeed081cb5f788c58263c1eff0","modified":1637246461000},{"_id":"themes/zhaoo/source/css/style.styl","hash":"91077c8a71c5827bdc5875309e3837e48a290ffd","modified":1637246461000},{"_id":"themes/zhaoo/source/js/color-mode.js","hash":"33cd307624e32035ea4544c9a6a4676ef9f70beb","modified":1637246461000},{"_id":"themes/zhaoo/source/js/script.js","hash":"a36c745bdb1fcb58bcb4774159bba7653a0499ba","modified":1637246461000},{"_id":"themes/zhaoo/source/js/utils.js","hash":"359461693c5a1c8f9fb159c2dfb78051d0b351e1","modified":1637246461000},{"_id":"themes/zhaoo/_example/source/_data/local_images.json","hash":"9a5ba1814709361cd141121e803f8953ef32d7fb","modified":1637246461000},{"_id":"themes/zhaoo/source/_data/galleries.json","hash":"3214779942d7a54967b977f505286a0d454d7100","modified":1639274387960},{"_id":"themes/zhaoo/_example/source/_data/galleries.json","hash":"2b8bd59e5dbda5512b6a7458b2d3936e7ae23c5a","modified":1637246461000},{"_id":"themes/zhaoo/_example/source/_posts/hexo-theme-zhaoo-doc.md","hash":"6855f6440f4cdac0540afbd4900f9ab2175a0d5a","modified":1637246461000},{"_id":"themes/zhaoo/_example/source/_posts/hexo-theme-zhaoo.md","hash":"b52814eaf58dca925001beb2f911bb5e377e69a9","modified":1637246461000},{"_id":"themes/zhaoo/_example/source/categories/index.md","hash":"108d69d9b70c1b66531b8de5e89d809f9fad26a6","modified":1637246461000},{"_id":"themes/zhaoo/_example/source/about/index.md","hash":"e9cf4e1b773da337befbacca42eeffc5f76e2ad5","modified":1637246461000},{"_id":"themes/zhaoo/_example/source/galleries/index.md","hash":"83876d965236601bc871f6619f7d1f6e1357c945","modified":1637246461000},{"_id":"themes/zhaoo/_example/source/tags/index.md","hash":"176a9920c6ed25f1f2d12940b7733da45b0966d4","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/comments/changyan.ejs","hash":"d762068b8c036ae7e83a2df9d36cd43dca46d5a4","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/comments/gitalk.ejs","hash":"8748a63003dc954df1b0a47f3d45ff191e714f3d","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/comments/valine.ejs","hash":"8f6ce8eb608f0c7c9ce482fd1f8aad7efa175f8c","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/components/fab.ejs","hash":"f6c0ed0c4a5b3a435605c7e956da143e66993e00","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/components/footer.ejs","hash":"59dab61fa47add0fa174e49507659eb2e18d4de8","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/components/header.ejs","hash":"62ae2fac8dc5d6cba29ebe777b9d06e6d954a45b","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/components/loading.ejs","hash":"1e1d68be27d3120864daf2d7305ac7a62bca1d84","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/components/menu.ejs","hash":"c4106f65b24355895399ebae328bc8bb8f622d6a","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/components/navbar.ejs","hash":"d6886ca04c922bd32068ae3540a75463bdf42a99","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/components/paginator.ejs","hash":"174723904a7a0b6088c411233266a5d35b8affe7","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/components/scrollbar.ejs","hash":"dabbb31935dd1e67bf735665b35d41db8eee67c6","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/components/search.ejs","hash":"3e2f18d6b785cee85667655f1d27e9858447a3d8","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/index/item.ejs","hash":"af1e72bc4e9216783e924c94b626ed32dad7616c","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/index/post.ejs","hash":"4de44a27558cf1058a5fe2bb65fb2e27f593af76","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/index/preview.ejs","hash":"fc78346e7a00d1584fe8b0dc1b229a481c7a056a","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/plugins/analytics.ejs","hash":"367d6fb80be4ce480c78bf63f2fbd2d28dedd0a3","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/plugins/daovoice.ejs","hash":"f49d99f040979c44b7abad5136786c2535a8db46","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/plugins/leancloud.ejs","hash":"535708a3276ed989f63321e13d889863d1bd6d8f","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/plugins/seo.ejs","hash":"7aa361277db60df8195b651fdfbc95ec5f5a4daa","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/post/article.ejs","hash":"21cb86efd40a44f9c63c496cfaa7c3b973d29254","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/post/comments.ejs","hash":"505e0724ccf8aa467e219e9f1fc86ca62479ec18","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/post/copyright.ejs","hash":"3c16a6499867c7fb773505ea2d877b3bbfdf81b0","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/post/donate.ejs","hash":"e64e1a6e537ea56888baf9be98324baa9c39b49f","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/post/head.ejs","hash":"9ab6fe00a2b1a03cfcbe3125cf91c52908afb528","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/post/nav.ejs","hash":"9a59b60fdba3100d91c9f527bae75ac0e9cb8bd5","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/post/tag.ejs","hash":"6b94a9ccb03624e6ce7cbbc827e45bc4bfca8a4a","modified":1637246461000},{"_id":"themes/zhaoo/layout/_partial/post/toc.ejs","hash":"bbb947334a5275cee6b834b5c216ddc6699d68c7","modified":1637246461000},{"_id":"themes/zhaoo/source/images/icons/apple-touch-icon.png","hash":"c1d16404a57db24e985204e7b2b97fa45d5fea0b","modified":1637246461000},{"_id":"themes/zhaoo/source/images/icons/favicon-128x128.png","hash":"c92b96941e92baf607a75887b3e187c9517ae807","modified":1637246461000},{"_id":"themes/zhaoo/source/images/icons/favicon-144x144.png","hash":"e54f440ff564f1235f9c399e2cd435dd502ceb84","modified":1637246461000},{"_id":"themes/zhaoo/source/images/icons/favicon-16x16.png","hash":"86cc7a07ccf09deff3de7b0ef2f82daa282a8b8e","modified":1637246461000},{"_id":"themes/zhaoo/source/images/icons/favicon-32x32.png","hash":"7b095984bd7d07e10fa9b0df8347a933eba8537c","modified":1637246461000},{"_id":"themes/zhaoo/source/images/icons/logo_128.png","hash":"9cc9959f00728a3ee3a9f5d7112471403b797c58","modified":1639210539151},{"_id":"themes/zhaoo/source/images/icons/logo_32.png","hash":"27d4611d634335f6a45457fd1d65f409cb60374b","modified":1639210560272},{"_id":"themes/zhaoo/source/images/icons/logo_16.png","hash":"d66e50faf20249a908a584e2eafc9b4dc39105b3","modified":1639210576188},{"_id":"themes/zhaoo/source/images/icons/logo_144.png","hash":"77698e3999a963c06a975df3dd5eeb388f10f205","modified":1639210521051},{"_id":"themes/zhaoo/source/images/theme/loading.gif","hash":"db91090dd60098086993953f88c37a332eea70d7","modified":1637246461000},{"_id":"themes/zhaoo/source/images/icons/zhaoo-logo.png","hash":"50f9f5de4207847bba6aecc4c21d21d79f0001fb","modified":1637246461000},{"_id":"themes/zhaoo/source/images/theme/loading2.png","hash":"2a7ceb0aab67f0c04934dee9643a4ff6d8fb60cc","modified":1639226141725},{"_id":"themes/zhaoo/source/css/_components/common.styl","hash":"dc725d10a7a161654e498875d3a507ffe18dba7e","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_components/fab.styl","hash":"184933f6ee13a7a7f40b2592fc35ba0a9c2a5825","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_components/footer.styl","hash":"06a0f3acc8947842889e06986025169063c72eac","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_components/header.styl","hash":"d9286ca8729e35d3b29ca6cb27ec2ccae562c040","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_components/menu.styl","hash":"46f897c3cb3fea7c409d179cdcca7a63dd82bcd4","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_components/navbar.styl","hash":"4e7fbb1c5fd25b280d88a70eec465de8ac0a4ab4","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_components/paginator.styl","hash":"bafe156fce40a01f2fa38bc2bbb38dc92239cabd","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_components/preview.styl","hash":"b5427785cfee20fcc400e55e964dab3312584726","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_components/scrollbar.styl","hash":"aca6a15c54cf34ddbf99075d0c13d458cfc11828","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_components/search.styl","hash":"e9f96afd0947d83deda8cf6bfb938125a203b3d3","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_base/color-mode.styl","hash":"be52bfac7dd56ce6c76039ea1522cc30c9e815a2","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_base/reset.styl","hash":"be64ad3469e427e9b7000e763034fb94984a8eeb","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_base/zui.styl","hash":"84c080d668427a3a64b8c930333c714783730414","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_pages/pages.styl","hash":"c4e4af922ee697c44295ab1072e350d4587b120f","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_variables/variables.styl","hash":"e4fd51e16ba970994ebcc0b6dacdd82d22dbe6d7","modified":1637246461000},{"_id":"themes/zhaoo/source/lib/fancybox/fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1637246461000},{"_id":"themes/zhaoo/source/lib/gitalk/.DS_Store","hash":"d0c74f5f99535ad14eaec93484abb4ff8dbca277","modified":1637246461000},{"_id":"themes/zhaoo/source/lib/gitalk/gitalk.css","hash":"99f6725b386bdb0f52d15b0dd7877eaf1ad4c918","modified":1637246461000},{"_id":"themes/zhaoo/source/lib/highlight/a11y-dark.css","hash":"9f0c935216015dd88251a6c366bdd00abfe65982","modified":1637246461000},{"_id":"themes/zhaoo/source/lib/lazyload/lazyload.js","hash":"338318e930487b2791a7bcf53ad4601630cc41e2","modified":1637246461000},{"_id":"themes/zhaoo/source/lib/highlight/highlight.js","hash":"a52ef27b8a21963326b05ef06f6ee104b8b94e7e","modified":1637246461000},{"_id":"themes/zhaoo/_example/source/galleries/colorful/index.md","hash":"d825ba0a41ff7ef253356a14bac6bfaf02135435","modified":1637246461000},{"_id":"themes/zhaoo/_example/source/galleries/深圳日记/index.md","hash":"ed9640b8192a9a9ce4771a33a8c2671d408fbb80","modified":1637246461000},{"_id":"themes/zhaoo/_example/source/galleries/记事/index.md","hash":"487e5b5267f2a83fd35ce179a57e3d54e8e2b870","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_pages/_archive/archive.styl","hash":"9a680e104a6418997e093303bb93f9097553d049","modified":1637246461000},{"_id":"themes/zhaoo/source/lib/pjax/pjax.js","hash":"0ced78e5c97127948f5bfbfbb80c4fce5c0f671e","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_pages/_category/categories.styl","hash":"66f983e15ebca02d95342d00234981fa6c04825d","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_pages/_gallery/galleries.styl","hash":"4d520006b28d419732314eeefe13201562089a9a","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_pages/_post/toc.styl","hash":"fc0c97ec7d9e98b79493cdd26452f4bb5defab08","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_pages/_gallery/gallery.styl","hash":"4f1975a81247e226d63c50b9500278d969e6257a","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_pages/_index/index.styl","hash":"3a69a450ec352b480a691521f85011659d136487","modified":1637246461000},{"_id":"themes/zhaoo/source/lib/qrcode/qrcode.js","hash":"f424bd339870510d1160d1c5da5d698aedbb452e","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_pages/_post/article.styl","hash":"1a155390dc8f332dd324a7a0b057055d9d63ff33","modified":1637246461000},{"_id":"themes/zhaoo/source/css/_pages/_tag/tags.styl","hash":"0ca5f9f71dab35247cf3b1318b2995a7e9058426","modified":1637246461000},{"_id":"source/images/2021121702.png","hash":"d87b66f0f64365a5202d9ea3f4653b4e7beae094","modified":1639729848387},{"_id":"themes/zhaoo/source/images/icons/logo_180.png","hash":"458f67b1b8b040cb204eb7336a477dae63610f32","modified":1639210500712},{"_id":"themes/zhaoo/source/images/theme/welcome-image3.jpg","hash":"f78bc3e3291d7031efc36ada72151f12172adf04","modified":1624513484000},{"_id":"themes/zhaoo/source/lib/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1637246461000},{"_id":"themes/zhaoo/source/lib/jquery/jquery.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1637246461000},{"_id":"source/images/2021121405.png","hash":"c08945480c6bbeee6127b23edcdbd17cab2c7e1b","modified":1639497922990},{"_id":"source/images/beauty/08.PNG","hash":"f38e3ea6d62e49f68f4d56b3c57e68bc8e19ac2c","modified":1619446890000},{"_id":"source/images/beauty/16.png","hash":"bcbe7d9f8992722856ca076bd2952724750db49a","modified":1639355942214},{"_id":"themes/zhaoo/source/images/theme/cloud.png","hash":"fdf44a91026ad999dca2f0a42213aabebd783c98","modified":1637246461000},{"_id":"themes/zhaoo/source/images/theme/welcome-image7.jfif","hash":"b0d97a262d2f616e5a01522a59084930830aeaf0","modified":1639218142342},{"_id":"themes/zhaoo/source/lib/gitalk/gitalk.js","hash":"266500948447c95aeea95ef6760f192afc96fd5e","modified":1637246461000},{"_id":"source/images/2021121402.png","hash":"5b035ece83096bff938f295e9ed699b781a8ac4e","modified":1639497875950},{"_id":"source/images/2021121302.png","hash":"420900c34782a66d4e5b3894b62bbe79b09f98b2","modified":1639406837481},{"_id":"themes/zhaoo/source/images/theme/welcome-image4.jpg","hash":"bc0d3ce8dede763fd9924da20c2ccb97e295025e","modified":1639213274224},{"_id":"themes/zhaoo/source/images/theme/welcome-image6.jfif","hash":"8b05cc38ecc004df4256186f5ffedbc5ca78858f","modified":1639218095683},{"_id":"themes/zhaoo/screenshots/menu.png","hash":"0f4220734a52953636a5273d64a03c8b01ec6098","modified":1637246461000},{"_id":"themes/zhaoo/source/images/theme/welcome-image2.jpg","hash":"9e3fb1c2c7cec5fdadec0b87fd0a6f593ada60a3","modified":1624513186000},{"_id":"themes/zhaoo/source/lib/lottie/lottie.js","hash":"35a3798d0f059f95c5d790eec56798ac10e07319","modified":1637246461000},{"_id":"themes/zhaoo/source/images/icons/logo_500.png","hash":"4e371a74fc6eb31b8c02fcdc8f6005c2e32c0ee3","modified":1639210477596},{"_id":"source/images/beauty/07.PNG","hash":"56d81ec6b1f2d8a5c8f14f14b3da22edd57abba1","modified":1619446922000},{"_id":"source/images/beauty/13.png","hash":"fc449566995e195f12074f9df1ba0d5942b2caf6","modified":1639355909008},{"_id":"themes/zhaoo/screenshots/galleries.png","hash":"8ba5a26c7932d5ef456cc799bbc00c5f468e54cc","modified":1637246461000},{"_id":"source/images/beauty/14.png","hash":"3e6b3b361ad95ad53e58ab8d03447a67a83cbf55","modified":1639355920666},{"_id":"themes/zhaoo/source/lib/daovoice/daovoice.js","hash":"180375e6fc5a5a71810b5e83109c0ce1533bbc5a","modified":1637246461000},{"_id":"source/images/2021121401.png","hash":"808e3955b595445d717ac91d303b9ef40d3b19b8","modified":1639497862325},{"_id":"source/images/beauty/11.png","hash":"81cdae8288deec6082d7f30a1a15f8b1f75703b0","modified":1639355806548},{"_id":"source/images/2021121404.png","hash":"748232ced31b4f7aca6ef88fc4f763cd0f3b4bd7","modified":1639497908739},{"_id":"themes/zhaoo/screenshots/article.png","hash":"74706d28c479a20f77c1bd4454879cabf8784ca6","modified":1637246461000},{"_id":"source/images/2021121403.png","hash":"6665590523cd811af5de89ec1ee403a344497969","modified":1639497891310},{"_id":"themes/zhaoo/screenshots/index.png","hash":"a95df16106c813b92f14071bac3d38bc53a1bc00","modified":1637246461000},{"_id":"themes/zhaoo/screenshots/preview.png","hash":"2b4271a275b9ff8318d00ab04504a109ec931fe7","modified":1637246461000},{"_id":"source/images/2021121601.png","hash":"fa9275f7b54baaaedaae8740cd182e36eac768e5","modified":1639647703521},{"_id":"source/images/2021121301.png","hash":"cb99b87bc2f7ac6a5d074b74a7a28f9a9fe9f311","modified":1639406660824},{"_id":"source/images/beauty/10.png","hash":"2e9fddc4cdc8bd8986fb555f09dec00fc1999519","modified":1635403213261},{"_id":"source/images/2021121701.png","hash":"aa0936864c7921c3f99ef578cb6efeee336effbb","modified":1639729301938},{"_id":"themes/zhaoo/source/images/theme/welcome-image8.png","hash":"fd918cf2341acc8d5e262bc93acdffac8111e12a","modified":1639283909452},{"_id":"source/images/2021121801.png","hash":"5e6cb3c02f87fff552af010808f623112c88b8b1","modified":1639787111270},{"_id":"source/images/beauty/01.png","hash":"30cf9777ffb1cfaf2089d95935337d432616c25e","modified":1639234875165},{"_id":"source/images/theme/welcome-image.png","hash":"30cf9777ffb1cfaf2089d95935337d432616c25e","modified":1639234875165},{"_id":"themes/zhaoo/source/images/theme/welcome-image.png","hash":"30cf9777ffb1cfaf2089d95935337d432616c25e","modified":1639234875165},{"_id":"source/images/2021121202.png","hash":"3cbcffd7976217b259ae51b6ac5bb593dcf1661c","modified":1639325609876},{"_id":"source/images/theme/welcome-image5.png","hash":"8aca765eb61b322c501447f667a5455015d2edbe","modified":1639217995064},{"_id":"source/images/theme/post-image.png","hash":"4da57f81fa5424b4b4dda2f50e36d6af9da37268","modified":1632790037568},{"_id":"themes/zhaoo/source/images/theme/welcome-image5.png","hash":"8aca765eb61b322c501447f667a5455015d2edbe","modified":1639217995064},{"_id":"themes/zhaoo/source/images/theme/post-image.png","hash":"4da57f81fa5424b4b4dda2f50e36d6af9da37268","modified":1632790037568},{"_id":"public/atom.xml","hash":"1626bf2a55b7d422255767b73dae74ecc3c971c7","modified":1639884434644},{"_id":"public/search.xml","hash":"0f3986070d6c612b6b3afe0af7685399681d5a22","modified":1639884434644},{"_id":"public/about/index.html","hash":"a6fabe054714bc9e5d357cd13fee5afe69e0ba18","modified":1639884434644},{"_id":"public/categories/index.html","hash":"62a8b603d38f98d4b0f2ed21c153d14e50ebbaa3","modified":1639884434644},{"_id":"public/galleries/index.html","hash":"fdc09b5092753592aaec9dd230100c61ce493069","modified":1639884434644},{"_id":"public/tags/index.html","hash":"bb0bc8a40130c7aa2a02eaf534a460af1e9d2a3f","modified":1639884434644},{"_id":"public/galleries/书摘/index.html","hash":"54f50a6ecac3e472f9258ee6ce25bb59a9fd3ec2","modified":1639884434644},{"_id":"public/galleries/她们/index.html","hash":"485f0694f2a5c631fcb7e5980d1f55043851345c","modified":1639884434644},{"_id":"public/2021/12/18/二零二一年十二月十八日/index.html","hash":"060f7ebba22173695bb9d8fdf7ab18856cd9bf2e","modified":1639884434644},{"_id":"public/2021/12/17/二零二一年十二月十七日/index.html","hash":"fde1a29e1b112a9c2f625cf12bb5dfc144bdf757","modified":1639884434644},{"_id":"public/2021/12/14/二零二一年十二月十四日/index.html","hash":"5a0ee342872eb0ab07e44c1968dfdfab5473f24a","modified":1639884434644},{"_id":"public/2021/12/13/二零二一年十二月十三日/index.html","hash":"0165f8b14d08fd8d613a049fe219a00f4697a063","modified":1639884434644},{"_id":"public/2021/12/11/二零二一年十二月十一日/index.html","hash":"21aeb45b4a35fde784c4b88ac306ecf8dcbe9bff","modified":1639884434644},{"_id":"public/2021/12/11/搭建hexo博客时出现的问题/index.html","hash":"f9ebac045c509150edb18fd106ce1de5b320505f","modified":1639884434644},{"_id":"public/archives/index.html","hash":"0a1e0f67e6bf0acc3fdcca96ae87b87b3eefb58d","modified":1639884434644},{"_id":"public/archives/page/2/index.html","hash":"facf1819d15174850442e46b4ace0ade7e0b770f","modified":1639884434644},{"_id":"public/archives/2021/index.html","hash":"fd273da31f3fd81011b714a9ec10fb1442bc3a2c","modified":1639884434644},{"_id":"public/archives/2021/page/2/index.html","hash":"fd273da31f3fd81011b714a9ec10fb1442bc3a2c","modified":1639884434644},{"_id":"public/archives/2021/12/index.html","hash":"2ac9a5fea6fbe886e3a10a0c655915f1475b03c6","modified":1639884434644},{"_id":"public/archives/2021/12/page/2/index.html","hash":"2ac9a5fea6fbe886e3a10a0c655915f1475b03c6","modified":1639884434644},{"_id":"public/categories/博客/index.html","hash":"7aa0a1f77d66bd6aafec04029a2042ea509d0041","modified":1639884434644},{"_id":"public/categories/日记/index.html","hash":"7eb7d05d2ec84c991dc5ec1762ba57b7cbd87ac1","modified":1639884434644},{"_id":"public/page/2/index.html","hash":"9a5e9dedad414f0d3afb436f19d13dd459991165","modified":1639884434644},{"_id":"public/tags/React/index.html","hash":"385df97a49df1aec711d3792ad4b52f029a004f9","modified":1639884434644},{"_id":"public/tags/学习/index.html","hash":"da2056e07b50d2c19a2c6146e8cf3432edeeb0e5","modified":1639884434644},{"_id":"public/2021/12/19/React学习三/index.html","hash":"e019fe0e3e551c0c8e3b0a34c575588fd498d5d9","modified":1639884434644},{"_id":"public/2021/12/19/React学习二/index.html","hash":"fd7250ce75026e6d30d6e2b1b56a75a8201a1c36","modified":1639884434644},{"_id":"public/2021/12/19/React学习一/index.html","hash":"5ef43d4abd580f912e1c3edd9a3a030a76c22d7b","modified":1639884434644},{"_id":"public/2021/12/16/二零二一年十二月十六日/index.html","hash":"77249cf92de52a498625360da6e1f4ac87dd93cc","modified":1639884434644},{"_id":"public/2021/12/12/二零二一年十二月十二日/index.html","hash":"bf14b153992e9a6c3da1b7d05a4f5534e8733c2b","modified":1639884434644},{"_id":"public/index.html","hash":"6709bce917f67eb410defe733c01a970aca87953","modified":1639884434644},{"_id":"public/tags/日记/index.html","hash":"f542e18a6512287e399574836c68e71871725c0d","modified":1639884434644},{"_id":"public/tags/hexo/index.html","hash":"6b4678ca36f0d6077c8efd2d6ed04eba551508cb","modified":1639884434644},{"_id":"public/CNAME","hash":"451bb6994a62aac57cf5f269cc4cd7873cd0ed81","modified":1639884434644},{"_id":"public/images/beauty/06.JPG","hash":"6670a0675966694f0cd37fcafb81b078548ca009","modified":1639884434644},{"_id":"public/images/react/2021121901.png","hash":"34ffc46a845eddb6ee3172511e1a88bc81fb6bc0","modified":1639884434644},{"_id":"public/images/react/2021121902.png","hash":"2b68e23d92d07b1185b3d93f6dca26325843f24b","modified":1639884434644},{"_id":"public/images/react/2021121903.png","hash":"17c9af7b63c7fcb050ed845b1894a6f7c84bf667","modified":1639884434644},{"_id":"public/images/theme/loading.gif","hash":"db91090dd60098086993953f88c37a332eea70d7","modified":1639884434644},{"_id":"public/images/theme/loading2.png","hash":"2a7ceb0aab67f0c04934dee9643a4ff6d8fb60cc","modified":1639884434644},{"_id":"public/images/icons/apple-touch-icon.png","hash":"c1d16404a57db24e985204e7b2b97fa45d5fea0b","modified":1639884434644},{"_id":"public/images/icons/favicon-128x128.png","hash":"c92b96941e92baf607a75887b3e187c9517ae807","modified":1639884434644},{"_id":"public/images/icons/favicon-16x16.png","hash":"86cc7a07ccf09deff3de7b0ef2f82daa282a8b8e","modified":1639884434644},{"_id":"public/images/icons/favicon-144x144.png","hash":"e54f440ff564f1235f9c399e2cd435dd502ceb84","modified":1639884434644},{"_id":"public/images/icons/favicon-32x32.png","hash":"7b095984bd7d07e10fa9b0df8347a933eba8537c","modified":1639884434644},{"_id":"public/images/icons/logo_128.png","hash":"9cc9959f00728a3ee3a9f5d7112471403b797c58","modified":1639884434644},{"_id":"public/images/icons/logo_144.png","hash":"77698e3999a963c06a975df3dd5eeb388f10f205","modified":1639884434644},{"_id":"public/images/icons/logo_16.png","hash":"d66e50faf20249a908a584e2eafc9b4dc39105b3","modified":1639884434644},{"_id":"public/images/icons/logo_32.png","hash":"27d4611d634335f6a45457fd1d65f409cb60374b","modified":1639884434644},{"_id":"public/images/icons/zhaoo-logo.png","hash":"50f9f5de4207847bba6aecc4c21d21d79f0001fb","modified":1639884434644},{"_id":"public/images/beauty/09.jpeg","hash":"9698f34a49ff23c3071d2ad7094054afe5451e74","modified":1639884434644},{"_id":"public/images/theme/welcome-image3.jpg","hash":"f78bc3e3291d7031efc36ada72151f12172adf04","modified":1639884434644},{"_id":"public/images/icons/logo_180.png","hash":"458f67b1b8b040cb204eb7336a477dae63610f32","modified":1639884434644},{"_id":"public/images/2021121101.png","hash":"0b5e4870110a2586e7e9cc15d6329029594778ca","modified":1639884434644},{"_id":"public/images/beauty/03.jfif","hash":"b0d97a262d2f616e5a01522a59084930830aeaf0","modified":1639884434644},{"_id":"public/images/beauty/05.JPG","hash":"f88552e8efbaf639ddf9aa66831009ffd96aa1e9","modified":1639884434644},{"_id":"public/images/theme/cloud.png","hash":"fdf44a91026ad999dca2f0a42213aabebd783c98","modified":1639884434644},{"_id":"public/images/theme/welcome-image7.jfif","hash":"b0d97a262d2f616e5a01522a59084930830aeaf0","modified":1639884434644},{"_id":"public/js/color-mode.js","hash":"33cd307624e32035ea4544c9a6a4676ef9f70beb","modified":1639884434644},{"_id":"public/js/utils.js","hash":"359461693c5a1c8f9fb159c2dfb78051d0b351e1","modified":1639884434644},{"_id":"public/lib/fancybox/fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1639884434644},{"_id":"public/lib/highlight/a11y-dark.css","hash":"9f0c935216015dd88251a6c366bdd00abfe65982","modified":1639884434644},{"_id":"public/lib/lazyload/lazyload.js","hash":"338318e930487b2791a7bcf53ad4601630cc41e2","modified":1639884434644},{"_id":"public/lib/pjax/pjax.js","hash":"0ced78e5c97127948f5bfbfbb80c4fce5c0f671e","modified":1639884434644},{"_id":"public/lib/qrcode/qrcode.js","hash":"f424bd339870510d1160d1c5da5d698aedbb452e","modified":1639884434644},{"_id":"public/css/style.css","hash":"92075fca720ebaed2460a82b2cfac3121f3dfeb8","modified":1639884434644},{"_id":"public/images/beauty/02.jfif","hash":"8b05cc38ecc004df4256186f5ffedbc5ca78858f","modified":1639884434644},{"_id":"public/images/beauty/15.png","hash":"46a2afaee7897957c6ba5bd1dfe5050334581c93","modified":1639884434644},{"_id":"public/images/theme/welcome-image4.jpg","hash":"bc0d3ce8dede763fd9924da20c2ccb97e295025e","modified":1639884434644},{"_id":"public/images/theme/welcome-image6.jfif","hash":"8b05cc38ecc004df4256186f5ffedbc5ca78858f","modified":1639884434644},{"_id":"public/js/script.js","hash":"a36c745bdb1fcb58bcb4774159bba7653a0499ba","modified":1639884434644},{"_id":"public/lib/gitalk/gitalk.css","hash":"99f6725b386bdb0f52d15b0dd7877eaf1ad4c918","modified":1639884434644},{"_id":"public/images/theme/welcome-image.jpg","hash":"ba0968002f3ac6d41bb50ba9ba62309ff8e62dda","modified":1639884434644},{"_id":"public/images/theme/welcome-image2.jpg","hash":"9e3fb1c2c7cec5fdadec0b87fd0a6f593ada60a3","modified":1639884434644},{"_id":"public/images/2021121201.jpg","hash":"981dcd61b7f1a408637661b859c1a5869b25ce53","modified":1639884434644},{"_id":"public/images/book/01.jpg","hash":"0714b0d4afa0e67ac861ed02c85a15a1acb9a432","modified":1639884434644},{"_id":"public/lib/highlight/highlight.js","hash":"a52ef27b8a21963326b05ef06f6ee104b8b94e7e","modified":1639884434644},{"_id":"public/images/beauty/12.png","hash":"311b9469d62b76061a999d01f1b3dac87c86a32d","modified":1639884434644},{"_id":"public/images/icons/logo_500.png","hash":"4e371a74fc6eb31b8c02fcdc8f6005c2e32c0ee3","modified":1639884434644},{"_id":"public/lib/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1639884434644},{"_id":"public/images/2021121702.png","hash":"d87b66f0f64365a5202d9ea3f4653b4e7beae094","modified":1639884434644},{"_id":"public/lib/jquery/jquery.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1639884434644},{"_id":"public/images/2021121405.png","hash":"c08945480c6bbeee6127b23edcdbd17cab2c7e1b","modified":1639884434644},{"_id":"public/images/beauty/08.PNG","hash":"f38e3ea6d62e49f68f4d56b3c57e68bc8e19ac2c","modified":1639884434644},{"_id":"public/images/beauty/16.png","hash":"bcbe7d9f8992722856ca076bd2952724750db49a","modified":1639884434644},{"_id":"public/images/2021121402.png","hash":"5b035ece83096bff938f295e9ed699b781a8ac4e","modified":1639884434644},{"_id":"public/images/2021121302.png","hash":"420900c34782a66d4e5b3894b62bbe79b09f98b2","modified":1639884434644},{"_id":"public/lib/gitalk/gitalk.js","hash":"266500948447c95aeea95ef6760f192afc96fd5e","modified":1639884434644},{"_id":"public/images/beauty/07.PNG","hash":"56d81ec6b1f2d8a5c8f14f14b3da22edd57abba1","modified":1639884434644},{"_id":"public/images/beauty/13.png","hash":"fc449566995e195f12074f9df1ba0d5942b2caf6","modified":1639884434644},{"_id":"public/images/beauty/14.png","hash":"3e6b3b361ad95ad53e58ab8d03447a67a83cbf55","modified":1639884434644},{"_id":"public/images/2021121401.png","hash":"808e3955b595445d717ac91d303b9ef40d3b19b8","modified":1639884434644},{"_id":"public/images/beauty/11.png","hash":"81cdae8288deec6082d7f30a1a15f8b1f75703b0","modified":1639884434644},{"_id":"public/images/2021121404.png","hash":"748232ced31b4f7aca6ef88fc4f763cd0f3b4bd7","modified":1639884434644},{"_id":"public/lib/lottie/lottie.js","hash":"35a3798d0f059f95c5d790eec56798ac10e07319","modified":1639884434644},{"_id":"public/images/2021121403.png","hash":"6665590523cd811af5de89ec1ee403a344497969","modified":1639884434644},{"_id":"public/images/2021121601.png","hash":"fa9275f7b54baaaedaae8740cd182e36eac768e5","modified":1639884434644},{"_id":"public/images/2021121301.png","hash":"cb99b87bc2f7ac6a5d074b74a7a28f9a9fe9f311","modified":1639884434644},{"_id":"public/images/beauty/10.png","hash":"2e9fddc4cdc8bd8986fb555f09dec00fc1999519","modified":1639884434644},{"_id":"public/images/theme/welcome-image8.png","hash":"fd918cf2341acc8d5e262bc93acdffac8111e12a","modified":1639884434644},{"_id":"public/images/2021121701.png","hash":"aa0936864c7921c3f99ef578cb6efeee336effbb","modified":1639884434644},{"_id":"public/images/2021121801.png","hash":"5e6cb3c02f87fff552af010808f623112c88b8b1","modified":1639884434644},{"_id":"public/lib/daovoice/daovoice.js","hash":"180375e6fc5a5a71810b5e83109c0ce1533bbc5a","modified":1639884434644},{"_id":"public/images/beauty/01.png","hash":"30cf9777ffb1cfaf2089d95935337d432616c25e","modified":1639884434644},{"_id":"public/images/theme/welcome-image.png","hash":"30cf9777ffb1cfaf2089d95935337d432616c25e","modified":1639884434644},{"_id":"public/images/2021121202.png","hash":"3cbcffd7976217b259ae51b6ac5bb593dcf1661c","modified":1639884434644},{"_id":"public/images/theme/welcome-image5.png","hash":"8aca765eb61b322c501447f667a5455015d2edbe","modified":1639884434644},{"_id":"public/images/theme/post-image.png","hash":"4da57f81fa5424b4b4dda2f50e36d6af9da37268","modified":1639884434644},{"_id":"source/_posts/React学习四.md","hash":"e9fdc197b019e5e5c417bbf941e9361e3d55f020","modified":1639892992317},{"_id":"source/_posts/计算机网络复习.md","hash":"4341357c1a67a8715bf26f84277785ceec24e044","modified":1639998525939},{"_id":"source/images/react/2021122001.png","hash":"b513570c9481c0b3a0ccdfb5107c69bb492ea720","modified":1639966657312},{"_id":"source/images/react/2021122003.png","hash":"c14de8c7ceb1b0116a14c905bcedc88c061adf57","modified":1639968848527},{"_id":"source/images/react/2021122002.png","hash":"17b937b519e9137dcf28bdfcc12bdfb070970346","modified":1639967133929},{"_id":"source/images/react/2021122004.png","hash":"9ad39cf682fcf4d084c5cfead0775d7ba4a4a8d2","modified":1639969016603},{"_id":"source/images/react/2021122005.png","hash":"673fa65445567403ef48b67f99824620947ec3a2","modified":1639990704351}],"Category":[{"name":"博客","_id":"ckxcouokh0004ngtva6izb1lk"},{"name":"日记","_id":"ckxcouokw000nngtv6xr9fu6z"}],"Data":[{"_id":"galleries","data":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}],"Page":[{"title":"关于我","type":"about","layout":"about","image":"/images/2021121201.jpg","toc":false,"copyright":false,"_content":"\n\n\n###### 关于我\n\n一个吭哧吭哧码代码的内向星球人。\n\n一个中土大陆社恐土著，伪托尔金小说爱好者。\n\n平时的兴趣很少，我会努力扩大自己的兴趣爱好的！\n\n主要还是看书和看电影\n\n------\n\n今年上半年学了两个月的钢琴，希望以后能买一架钢琴（二手的也行），对钢琴的向往来自高中读三毛，三毛的钢琴上摆着一张蒙娜丽莎的复印照，她总是痴迷地盯着她看。这样一副情景让我对钢琴、蒙娜丽莎都产生了迷离的美感和向往，总有一天我这个土著也能够欣赏艺术的！\n\n此时应该献上一张三毛的照片\n\n![](/images/beauty/09.JPEG)\n\n最喜欢的电影是《时时刻刻》，主要是痴迷里面的伍尔夫。最喜欢的书是费兰特的《那不勒斯四部曲》，主要还是痴迷莉拉。最喜欢的播客是《痴人之爱》，喜欢这个名字以及男女主播的声音。对于音乐，我的感受力好薄弱，真羡慕那些享受音乐的人。\n\n###### 关于这个博客\n\n这个博客的标题没有任何意义，我是一个想名字废人，就像我自己的昵称一样。\n\n似乎没什么可说的了，那就这样。","source":"about/index.md","raw":"---\ntitle: 关于我\ntype: \"about\"\nlayout: \"about\"\nimage: /images/2021121201.jpg\ntoc: false\ncopyright: false\n---\n\n\n\n###### 关于我\n\n一个吭哧吭哧码代码的内向星球人。\n\n一个中土大陆社恐土著，伪托尔金小说爱好者。\n\n平时的兴趣很少，我会努力扩大自己的兴趣爱好的！\n\n主要还是看书和看电影\n\n------\n\n今年上半年学了两个月的钢琴，希望以后能买一架钢琴（二手的也行），对钢琴的向往来自高中读三毛，三毛的钢琴上摆着一张蒙娜丽莎的复印照，她总是痴迷地盯着她看。这样一副情景让我对钢琴、蒙娜丽莎都产生了迷离的美感和向往，总有一天我这个土著也能够欣赏艺术的！\n\n此时应该献上一张三毛的照片\n\n![](/images/beauty/09.JPEG)\n\n最喜欢的电影是《时时刻刻》，主要是痴迷里面的伍尔夫。最喜欢的书是费兰特的《那不勒斯四部曲》，主要还是痴迷莉拉。最喜欢的播客是《痴人之爱》，喜欢这个名字以及男女主播的声音。对于音乐，我的感受力好薄弱，真羡慕那些享受音乐的人。\n\n###### 关于这个博客\n\n这个博客的标题没有任何意义，我是一个想名字废人，就像我自己的昵称一样。\n\n似乎没什么可说的了，那就这样。","date":"2021-12-13T00:32:47.651Z","updated":"2021-12-13T00:32:47.651Z","path":"about/index.html","comments":1,"_id":"ckxcouok80000ngtv5o7s6s6k","content":"<h6 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h6><p>一个吭哧吭哧码代码的内向星球人。</p>\n<p>一个中土大陆社恐土著，伪托尔金小说爱好者。</p>\n<p>平时的兴趣很少，我会努力扩大自己的兴趣爱好的！</p>\n<p>主要还是看书和看电影</p>\n<hr>\n<p>今年上半年学了两个月的钢琴，希望以后能买一架钢琴（二手的也行），对钢琴的向往来自高中读三毛，三毛的钢琴上摆着一张蒙娜丽莎的复印照，她总是痴迷地盯着她看。这样一副情景让我对钢琴、蒙娜丽莎都产生了迷离的美感和向往，总有一天我这个土著也能够欣赏艺术的！</p>\n<p>此时应该献上一张三毛的照片</p>\n<p><img src=\"/images/beauty/09.JPEG\"></p>\n<p>最喜欢的电影是《时时刻刻》，主要是痴迷里面的伍尔夫。最喜欢的书是费兰特的《那不勒斯四部曲》，主要还是痴迷莉拉。最喜欢的播客是《痴人之爱》，喜欢这个名字以及男女主播的声音。对于音乐，我的感受力好薄弱，真羡慕那些享受音乐的人。</p>\n<h6 id=\"关于这个博客\"><a href=\"#关于这个博客\" class=\"headerlink\" title=\"关于这个博客\"></a>关于这个博客</h6><p>这个博客的标题没有任何意义，我是一个想名字废人，就像我自己的昵称一样。</p>\n<p>似乎没什么可说的了，那就这样。</p>\n","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":"<h6 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h6><p>一个吭哧吭哧码代码的内向星球人。</p>\n<p>一个中土大陆社恐土著，伪托尔金小说爱好者。</p>\n<p>平时的兴趣很少，我会努力扩大自己的兴趣爱好的！</p>\n<p>主要还是看书和看电影</p>\n<hr>\n<p>今年上半年学了两个月的钢琴，希望以后能买一架钢琴（二手的也行），对钢琴的向往来自高中读三毛，三毛的钢琴上摆着一张蒙娜丽莎的复印照，她总是痴迷地盯着她看。这样一副情景让我对钢琴、蒙娜丽莎都产生了迷离的美感和向往，总有一天我这个土著也能够欣赏艺术的！</p>\n<p>此时应该献上一张三毛的照片</p>\n<p><img src=\"/images/beauty/09.JPEG\"></p>\n<p>最喜欢的电影是《时时刻刻》，主要是痴迷里面的伍尔夫。最喜欢的书是费兰特的《那不勒斯四部曲》，主要还是痴迷莉拉。最喜欢的播客是《痴人之爱》，喜欢这个名字以及男女主播的声音。对于音乐，我的感受力好薄弱，真羡慕那些享受音乐的人。</p>\n<h6 id=\"关于这个博客\"><a href=\"#关于这个博客\" class=\"headerlink\" title=\"关于这个博客\"></a>关于这个博客</h6><p>这个博客的标题没有任何意义，我是一个想名字废人，就像我自己的昵称一样。</p>\n<p>似乎没什么可说的了，那就这样。</p>\n"},{"title":"分类","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: \"categories\"\nlayout: \"categories\"\n---","date":"2021-12-12T02:09:08.833Z","updated":"2021-12-12T02:09:08.833Z","path":"categories/index.html","comments":1,"_id":"ckxcouoke0002ngtvgv089ljd","content":"","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":""},{"title":"相册","layout":"galleries","_content":"","source":"galleries/index.md","raw":"---\ntitle: 相册\nlayout: \"galleries\"\n---","date":"2021-12-12T01:49:49.465Z","updated":"2021-12-12T01:49:49.465Z","path":"galleries/index.html","comments":1,"_id":"ckxcouoki0006ngtvaqun0er5","content":"","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":""},{"title":"标签","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: \"tags\"\nlayout: \"tags\"\n---","date":"2021-12-12T02:06:08.635Z","updated":"2021-12-12T02:06:08.635Z","path":"tags/index.html","comments":1,"_id":"ckxcouokk0008ngtvamnz2rub","content":"","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":""},{"title":"书摘","layout":"gallery","_content":"","source":"galleries/书摘/index.md","raw":"---\ntitle: 书摘\nlayout: \"gallery\"\n---","date":"2021-12-12T05:34:18.273Z","updated":"2021-12-12T05:34:18.273Z","path":"galleries/书摘/index.html","comments":1,"_id":"ckxcouokl000angtv7qo8g8ln","content":"","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":""},{"title":"她们","layout":"gallery","_content":"","source":"galleries/她们/index.md","raw":"---\ntitle: 她们\nlayout: \"gallery\"\n---","date":"2021-12-12T02:04:45.735Z","updated":"2021-12-12T02:04:45.735Z","path":"galleries/她们/index.html","comments":1,"_id":"ckxcouoko000engtv8rdlb2z5","content":"","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":""}],"Post":[{"title":"React的认识与初步尝试","date":"2021-12-19T00:39:01.000Z","_content":"\n### 一、React是什么\n\n一个JavaScipt库，配合JSX（一个JavaScipt语法扩展）能够更好描述UI应该呈现的交互本质形式。\n\n### 二、初步使用React实例\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<!-- 上面两个Js文件是有固定的引用先后顺序 -->\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\tfunction fun(name){\n\t\t\treturn name+' hh';\n\t\t}\n\t\tclass HelloMsg extends React.Component{\n\t\t\trender(){\n\t\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t  <div>hello React</div>\n\t\t\t\t  <h3>{this.props.name}</h3>\n\t\t\t\t  <h2>{2+3}</h2>\n\t\t\t\t  <h1>{fun('abc')}</h1>\n\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tReactDOM.render(<HelloMsg name=\"hhh\"/>,document.getElementById(\"test1\"))\n\n\t\t</script>\n</html>\n```\n\n第一步：导入相关js文件\n\n第二步：在body中定义需要渲染的元素\n\n第三步：在js区域自定义组件，并调用`ReactDOM.render`进行元素渲染。\n\n之后仔细分析js部分代码：\n\n```javascript\nfunction fun(name){\n\t\t\treturn name+' hh';\n\t}\nclass HelloMsg extends React.Component{\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t      <div>hello React</div>\n\t\t\t  <h3>{this.props.name}</h3>\n\t\t\t  <h2>{2+3}</h2>\n\t\t      <h1>{fun('abc')}</h1>\n\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\nReactDOM.render(<HelloMsg name=\"hhh\"/>,document.getElementById(\"test1\"))\n```\n\n在方法`ReactDOM.render(element, document.getElementById('root'));`为将自定义的元素`element`覆盖html中id为root的块元素。因为覆盖Html中的元素只有一个，所以返回的也是一个块元素，里面可以包裹很多小元素，在使用html元素时使用js相关只要使用`{}`就可以。而元素传参运用`this.props`来进行传输。\n\nReact元素不可修改，更新的方法只能是创建一个新的元素传入ReactDOM.render\n\nReact 只更新它需要更新的部分,尽管每一秒我们都会新建一个描述整个 UI 树的元素，React DOM 只会更新实际改变了的内容，也就是例子中的文本节点。\n\n### 三、定义React元素\n\n可以通过以下方法自定义元素。\n\n```javascript\n//自定义元素element\nconst element = (\n\t<div>\n\t\t<h1>h1h1</h1>\n\t\t<h2>h2h2</h2>\n\t</div>\n);\nReactDOM.render(element,document.getElementById(\"test1\"))\n```\n\n### 四、自定义组件\n\nReact可以自定义复杂的组件，有两种自定义组件的方法，分别是函数的方法和类的方法。如下例所示：\n\n```\n// 用函数的方式自定义组件\nfunction HelloMsg(props){\n\treturn <h1>hello~ {props.name} !</h1>\n}\n// ES6的类自定义组件\nclass HiMsg extends React.Component{\n\trender(){\n\t\t\treturn <h2>hi~ {this.props.name}</h2>\n\t}\t\n}\n```\n\n其中，函数方法的元素传参方式和类的元素传参方式有所区别。\n\n所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。\n\n自定义组件还可以组合使用，如下所示：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<!-- 上面两个Js文件是有固定的引用先后顺序 -->\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t// 组合组件\n\t\t\n\t\t// 用函数的方式自定义组件\n\t\t// 自定义组件可以实现交互传参\n\t\tfunction HelloMsg(props){\n\t\t\treturn <h1>hello~ {props.name} !</h1>\n\t\t}\n\t\t// ES6的类自定义组件\n\t\tclass HiMsg extends React.Component{\n\t\t\trender(){\n\t\t\t\treturn <h2>hi~ {this.props.name}</h2>\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t// 组合组件\n\t\tfunction App(){\n\t\t\treturn (\n\t\t\t  <div>\n\t\t\t\t  <HelloMsg name=\"zhangsan\"/>\n\t\t\t\t  <HiMsg name=\"zhangsan\"/>\n\t\t\t\t  <HelloMsg name=\"Mody\"/>\n\t\t\t\t  <HiMsg name=\"Mody\"/>\n\t\t\t\t  <HelloMsg name=\"Recy\"/>\n\t\t\t\t  <HiMsg name=\"Recy\"/>\n\t\t\t  </div>\n\t\t\t)\n\t\t}\n\t\tReactDOM.render(<App/>,document.getElementById(\"test1\"))\n\n\t\t</script>\n</html>\n\n```\n\n","source":"_posts/React学习一.md","raw":"---\ntitle: React的认识与初步尝试\ndate: 2021-12-19 08:39:01\ntags: [React, 学习]\ncategories:\n- 博客\n---\n\n### 一、React是什么\n\n一个JavaScipt库，配合JSX（一个JavaScipt语法扩展）能够更好描述UI应该呈现的交互本质形式。\n\n### 二、初步使用React实例\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<!-- 上面两个Js文件是有固定的引用先后顺序 -->\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\tfunction fun(name){\n\t\t\treturn name+' hh';\n\t\t}\n\t\tclass HelloMsg extends React.Component{\n\t\t\trender(){\n\t\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t  <div>hello React</div>\n\t\t\t\t  <h3>{this.props.name}</h3>\n\t\t\t\t  <h2>{2+3}</h2>\n\t\t\t\t  <h1>{fun('abc')}</h1>\n\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tReactDOM.render(<HelloMsg name=\"hhh\"/>,document.getElementById(\"test1\"))\n\n\t\t</script>\n</html>\n```\n\n第一步：导入相关js文件\n\n第二步：在body中定义需要渲染的元素\n\n第三步：在js区域自定义组件，并调用`ReactDOM.render`进行元素渲染。\n\n之后仔细分析js部分代码：\n\n```javascript\nfunction fun(name){\n\t\t\treturn name+' hh';\n\t}\nclass HelloMsg extends React.Component{\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t      <div>hello React</div>\n\t\t\t  <h3>{this.props.name}</h3>\n\t\t\t  <h2>{2+3}</h2>\n\t\t      <h1>{fun('abc')}</h1>\n\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\nReactDOM.render(<HelloMsg name=\"hhh\"/>,document.getElementById(\"test1\"))\n```\n\n在方法`ReactDOM.render(element, document.getElementById('root'));`为将自定义的元素`element`覆盖html中id为root的块元素。因为覆盖Html中的元素只有一个，所以返回的也是一个块元素，里面可以包裹很多小元素，在使用html元素时使用js相关只要使用`{}`就可以。而元素传参运用`this.props`来进行传输。\n\nReact元素不可修改，更新的方法只能是创建一个新的元素传入ReactDOM.render\n\nReact 只更新它需要更新的部分,尽管每一秒我们都会新建一个描述整个 UI 树的元素，React DOM 只会更新实际改变了的内容，也就是例子中的文本节点。\n\n### 三、定义React元素\n\n可以通过以下方法自定义元素。\n\n```javascript\n//自定义元素element\nconst element = (\n\t<div>\n\t\t<h1>h1h1</h1>\n\t\t<h2>h2h2</h2>\n\t</div>\n);\nReactDOM.render(element,document.getElementById(\"test1\"))\n```\n\n### 四、自定义组件\n\nReact可以自定义复杂的组件，有两种自定义组件的方法，分别是函数的方法和类的方法。如下例所示：\n\n```\n// 用函数的方式自定义组件\nfunction HelloMsg(props){\n\treturn <h1>hello~ {props.name} !</h1>\n}\n// ES6的类自定义组件\nclass HiMsg extends React.Component{\n\trender(){\n\t\t\treturn <h2>hi~ {this.props.name}</h2>\n\t}\t\n}\n```\n\n其中，函数方法的元素传参方式和类的元素传参方式有所区别。\n\n所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。\n\n自定义组件还可以组合使用，如下所示：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<!-- 上面两个Js文件是有固定的引用先后顺序 -->\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t// 组合组件\n\t\t\n\t\t// 用函数的方式自定义组件\n\t\t// 自定义组件可以实现交互传参\n\t\tfunction HelloMsg(props){\n\t\t\treturn <h1>hello~ {props.name} !</h1>\n\t\t}\n\t\t// ES6的类自定义组件\n\t\tclass HiMsg extends React.Component{\n\t\t\trender(){\n\t\t\t\treturn <h2>hi~ {this.props.name}</h2>\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t// 组合组件\n\t\tfunction App(){\n\t\t\treturn (\n\t\t\t  <div>\n\t\t\t\t  <HelloMsg name=\"zhangsan\"/>\n\t\t\t\t  <HiMsg name=\"zhangsan\"/>\n\t\t\t\t  <HelloMsg name=\"Mody\"/>\n\t\t\t\t  <HiMsg name=\"Mody\"/>\n\t\t\t\t  <HelloMsg name=\"Recy\"/>\n\t\t\t\t  <HiMsg name=\"Recy\"/>\n\t\t\t  </div>\n\t\t\t)\n\t\t}\n\t\tReactDOM.render(<App/>,document.getElementById(\"test1\"))\n\n\t\t</script>\n</html>\n\n```\n\n","slug":"React学习一","published":1,"updated":"2021-12-19T01:50:57.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcouokb0001ngtv0zsrcu16","content":"<h3 id=\"一、React是什么\"><a href=\"#一、React是什么\" class=\"headerlink\" title=\"一、React是什么\"></a>一、React是什么</h3><p>一个JavaScipt库，配合JSX（一个JavaScipt语法扩展）能够更好描述UI应该呈现的交互本质形式。</p>\n<h3 id=\"二、初步使用React实例\"><a href=\"#二、初步使用React实例\" class=\"headerlink\" title=\"二、初步使用React实例\"></a>二、初步使用React实例</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-comment\">&lt;!-- 上面两个Js文件是有固定的引用先后顺序 --&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fun</span>(<span class=\"hljs-params\">name</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">return</span> name+<span class=\"hljs-string\">&#x27; hh&#x27;</span>;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloMsg</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span> (</span><br><span class=\"javascript\">\t\t\t\t<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>hello React<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>&#123;this.props.name&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>&#123;2+3&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>&#123;fun(&#x27;abc&#x27;)&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\tReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">HelloMsg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;hhh&quot;</span>/&gt;</span></span>,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;test1&quot;</span>))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>第一步：导入相关js文件</p>\n<p>第二步：在body中定义需要渲染的元素</p>\n<p>第三步：在js区域自定义组件，并调用<code>ReactDOM.render</code>进行元素渲染。</p>\n<p>之后仔细分析js部分代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fun</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> name+<span class=\"hljs-string\">&#x27; hh&#x27;</span>;<br>\t&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloMsg</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>\t\t<span class=\"hljs-keyword\">return</span> (<br>\t\t\t<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">\t\t      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>hello React<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>&#123;this.props.name&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span><br><span class=\"xml\">\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>&#123;2+3&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"xml\">\t\t      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>&#123;fun(&#x27;abc&#x27;)&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"xml\">\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>\t\t\t)<br>\t\t&#125;<br>\t&#125;<br>ReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">HelloMsg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;hhh&quot;</span>/&gt;</span></span>,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;test1&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<p>在方法<code>ReactDOM.render(element, document.getElementById(&#39;root&#39;));</code>为将自定义的元素<code>element</code>覆盖html中id为root的块元素。因为覆盖Html中的元素只有一个，所以返回的也是一个块元素，里面可以包裹很多小元素，在使用html元素时使用js相关只要使用<code>&#123;&#125;</code>就可以。而元素传参运用<code>this.props</code>来进行传输。</p>\n<p>React元素不可修改，更新的方法只能是创建一个新的元素传入ReactDOM.render</p>\n<p>React 只更新它需要更新的部分,尽管每一秒我们都会新建一个描述整个 UI 树的元素，React DOM 只会更新实际改变了的内容，也就是例子中的文本节点。</p>\n<h3 id=\"三、定义React元素\"><a href=\"#三、定义React元素\" class=\"headerlink\" title=\"三、定义React元素\"></a>三、定义React元素</h3><p>可以通过以下方法自定义元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//自定义元素element</span><br><span class=\"hljs-keyword\">const</span> element = (<br>\t<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>h1h1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"xml\">\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>h2h2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"xml\">\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>);<br>ReactDOM.render(element,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;test1&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"四、自定义组件\"><a href=\"#四、自定义组件\" class=\"headerlink\" title=\"四、自定义组件\"></a>四、自定义组件</h3><p>React可以自定义复杂的组件，有两种自定义组件的方法，分别是函数的方法和类的方法。如下例所示：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-comment\">// 用函数的方式自定义组件</span><br>function <span class=\"hljs-type\">HelloMsg</span>(props)&#123;<br>\t<span class=\"hljs-keyword\">return</span> &lt;h1&gt;hello~ &#123;props.name&#125; !&lt;/h1&gt;<br>&#125;<br><span class=\"hljs-comment\">// ES6的类自定义组件</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HiMsg</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;<br>\trender()&#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> &lt;h2&gt;hi~ &#123;<span class=\"hljs-keyword\">this</span>.props.name&#125;&lt;/h2&gt;<br>\t&#125;\t<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其中，函数方法的元素传参方式和类的元素传参方式有所区别。</p>\n<p>所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。</p>\n<p>自定义组件还可以组合使用，如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-comment\">&lt;!-- 上面两个Js文件是有固定的引用先后顺序 --&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">// 组合组件</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">// 用函数的方式自定义组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">// 自定义组件可以实现交互传参</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">HelloMsg</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>hello~ &#123;props.name&#125; !<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">// ES6的类自定义组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HiMsg</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>hi~ &#123;this.props.name&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">// 组合组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">return</span> (</span><br><span class=\"javascript\">\t\t\t  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">HelloMsg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;zhangsan&quot;</span>/&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">HiMsg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;zhangsan&quot;</span>/&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">HelloMsg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Mody&quot;</span>/&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">HiMsg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Mody&quot;</span>/&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">HelloMsg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Recy&quot;</span>/&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">HiMsg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Recy&quot;</span>/&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t\t)</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\tReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span>/&gt;</span></span>,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;test1&quot;</span>))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":"<h3 id=\"一、React是什么\"><a href=\"#一、React是什么\" class=\"headerlink\" title=\"一、React是什么\"></a>一、React是什么</h3><p>一个JavaScipt库，配合JSX（一个JavaScipt语法扩展）能够更好描述UI应该呈现的交互本质形式。</p>\n<h3 id=\"二、初步使用React实例\"><a href=\"#二、初步使用React实例\" class=\"headerlink\" title=\"二、初步使用React实例\"></a>二、初步使用React实例</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-comment\">&lt;!-- 上面两个Js文件是有固定的引用先后顺序 --&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fun</span>(<span class=\"hljs-params\">name</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">return</span> name+<span class=\"hljs-string\">&#x27; hh&#x27;</span>;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloMsg</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span> (</span><br><span class=\"javascript\">\t\t\t\t<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>hello React<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>&#123;this.props.name&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>&#123;2+3&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>&#123;fun(&#x27;abc&#x27;)&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\tReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">HelloMsg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;hhh&quot;</span>/&gt;</span></span>,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;test1&quot;</span>))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>第一步：导入相关js文件</p>\n<p>第二步：在body中定义需要渲染的元素</p>\n<p>第三步：在js区域自定义组件，并调用<code>ReactDOM.render</code>进行元素渲染。</p>\n<p>之后仔细分析js部分代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fun</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> name+<span class=\"hljs-string\">&#x27; hh&#x27;</span>;<br>\t&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloMsg</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>\t\t<span class=\"hljs-keyword\">return</span> (<br>\t\t\t<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">\t\t      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>hello React<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>&#123;this.props.name&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span><br><span class=\"xml\">\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>&#123;2+3&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"xml\">\t\t      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>&#123;fun(&#x27;abc&#x27;)&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"xml\">\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>\t\t\t)<br>\t\t&#125;<br>\t&#125;<br>ReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">HelloMsg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;hhh&quot;</span>/&gt;</span></span>,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;test1&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<p>在方法<code>ReactDOM.render(element, document.getElementById(&#39;root&#39;));</code>为将自定义的元素<code>element</code>覆盖html中id为root的块元素。因为覆盖Html中的元素只有一个，所以返回的也是一个块元素，里面可以包裹很多小元素，在使用html元素时使用js相关只要使用<code>&#123;&#125;</code>就可以。而元素传参运用<code>this.props</code>来进行传输。</p>\n<p>React元素不可修改，更新的方法只能是创建一个新的元素传入ReactDOM.render</p>\n<p>React 只更新它需要更新的部分,尽管每一秒我们都会新建一个描述整个 UI 树的元素，React DOM 只会更新实际改变了的内容，也就是例子中的文本节点。</p>\n<h3 id=\"三、定义React元素\"><a href=\"#三、定义React元素\" class=\"headerlink\" title=\"三、定义React元素\"></a>三、定义React元素</h3><p>可以通过以下方法自定义元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//自定义元素element</span><br><span class=\"hljs-keyword\">const</span> element = (<br>\t<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>h1h1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"xml\">\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>h2h2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"xml\">\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>);<br>ReactDOM.render(element,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;test1&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"四、自定义组件\"><a href=\"#四、自定义组件\" class=\"headerlink\" title=\"四、自定义组件\"></a>四、自定义组件</h3><p>React可以自定义复杂的组件，有两种自定义组件的方法，分别是函数的方法和类的方法。如下例所示：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-comment\">// 用函数的方式自定义组件</span><br>function <span class=\"hljs-type\">HelloMsg</span>(props)&#123;<br>\t<span class=\"hljs-keyword\">return</span> &lt;h1&gt;hello~ &#123;props.name&#125; !&lt;/h1&gt;<br>&#125;<br><span class=\"hljs-comment\">// ES6的类自定义组件</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HiMsg</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;<br>\trender()&#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> &lt;h2&gt;hi~ &#123;<span class=\"hljs-keyword\">this</span>.props.name&#125;&lt;/h2&gt;<br>\t&#125;\t<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其中，函数方法的元素传参方式和类的元素传参方式有所区别。</p>\n<p>所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。</p>\n<p>自定义组件还可以组合使用，如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-comment\">&lt;!-- 上面两个Js文件是有固定的引用先后顺序 --&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">// 组合组件</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">// 用函数的方式自定义组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">// 自定义组件可以实现交互传参</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">HelloMsg</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>hello~ &#123;props.name&#125; !<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">// ES6的类自定义组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HiMsg</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>hi~ &#123;this.props.name&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">// 组合组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">return</span> (</span><br><span class=\"javascript\">\t\t\t  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">HelloMsg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;zhangsan&quot;</span>/&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">HiMsg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;zhangsan&quot;</span>/&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">HelloMsg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Mody&quot;</span>/&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">HiMsg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Mody&quot;</span>/&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">HelloMsg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Recy&quot;</span>/&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">HiMsg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Recy&quot;</span>/&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t\t)</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\tReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span>/&gt;</span></span>,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;test1&quot;</span>))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"React的列表和表单","date":"2021-12-19T01:45:05.000Z","_content":"\n### 一、使用map来进行列表渲染\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//通过map的方式渲染列表\n\t\t\n\t\tfunction List(props){\n\t\t\t//获取列表参数\n\t\t\tconst numbers=props.numbers;\n\t\t\t//利用map进行渲染\n\t\t\tconst listItem=numbers.map((number=>\n\t\t\t<li>{number}</li>));\n\t\t\t\n\t\t\treturn (\n\t\t\t  <ul>{listItem}</ul>\n\t\t\t)\n\t\t}\n\t\t\n\t\tconst numbers=[1,2,3,4,5];\n\t\tReactDOM.render(\n\t\t<List numbers={numbers} />,\n\t\tdocument.getElementById('test1'))\n\n\t\t</script>\n</html>\n\n```\n\n运行以上代码，发现已成功渲染列表，但是在控制台获得警告如下：\n\n![](/images/react/2021121903.png)\n\n提示对于列表的每一个元素都需要key关键词，给每一列添加key:`<li key={number.toString()}>{number}</li>));`，key作为列表中每个元素的唯一标识符，是有优化性能的作用。对于应该在哪里设置元素的key，一个好的经验法则是：在 `map()` 方法中的元素需要设置 key 属性。\n\n以上情况可以也通过以下方法实现\n\n```jsx\nfuntion ListItem(props){\n\t\t\treturn <li>{props.value}</li>\n}\n\t\t\nfunction List2(props){\n\tconst numbers=props.numbers;\n\treturn (\n\t\t <ul>\n\t\t\t{numbers.map((number=>\n\t\t\t<ListItem key={number.toString()} value={number} />\n\t\t\t))}\n\t\t</ul>\n\t)\n}\n```\n\n\n\n### 二、表单\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//表单的运用\n\t\t\n\t\t//通过类自定义的内有方法来更方便迅捷地操作表单\n\t\t\n\t\t//自定义表单组件\n\t\tclass NameForm extends React.Component{\n\t\t\tconstructor(props){\n\t\t\t\tsuper(props);\n\t\t\t\t//定义可更改的变量，即表单输入元素\n\t\t\t\tthis.state={value:''};\n\t\t\t\t//在具体方法中绑定this来实现对state的改变。\n\t\t\t\tthis.handleChange=this.handleChange.bind(this);\n\t\t\t\tthis.handleSubmit=this.handleSubmit.bind(this);\n\t\t\t}\n\t\t\t\n\t\t\thandleChange(event){\n\t\t\t\tthis.setState({value:event.target.value});\n\t\t\t}\n\t\t\thandleSubmit(event){\n\t\t\t\t//提交前显示名字\n\t\t\t\talert('提交的名字：'+this.state.value);\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\trender(){\n\t\t\t\treturn(\n\t\t\t\t  <form onSubmit={this.handleSubmit}>\n\t\t\t\t    <label>\n\t\t\t\t\t  名字:\n\t\t\t\t\t  <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n\t\t\t\t\t </label>\n\t\t\t\t\t  <button type=\"submit\">提交</button>\n\t\t\t\t\t</form>  \n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tReactDOM.render(<NameForm />,document.getElementById('test1'))\n\n\t\t</script>\n</html>\n\n```\n\n以上例子实现了一个自定义表单的应用。\n\n注意：在Html中`<textarea>` 组件直接通过子元素定义其文本，而在React中通过属性value来确定其文本。针对`<select>`组件React 并不会使用 `selected` 属性，而是在根 `select` 标签上使用 `value` 属性。这在受控组件中更便捷，因为您只需要在根标签中更新它。\n\n具体关于textarea 和select在React里的具体操作如下所示：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//表单的运用\n\t\t\n\t\t//通过类自定义的内有方法来更方便迅捷地操作表单\n\t\t\n\t\t//自定义表单组件\n\t\tclass NameForm extends React.Component{\n\t\t\tconstructor(props){\n\t\t\t\tsuper(props);\n\t\t\t\t//定义可更改的变量，即表单输入元素\n\t\t\t\tthis.state={\n\t\t\t\t\tvalue:'',\n\t\t\t\t\ttextValue:'',\n\t\t\t\t\tselected:'aa',\n\t\t\t\t};\n\t\t\t\t//在具体方法中绑定this来实现对state的改变。\n\t\t\t\tthis.handleChange=this.handleChange.bind(this);\n\t\t\t\tthis.handleSubmit=this.handleSubmit.bind(this);\n\t\t\t\tthis.handleChangeSelect=this.handleChangeSelect.bind(this);\n\t\t\t\tthis.handleChangeTextarea=this.handleChangeTextarea.bind(this);\n\t\t\t}\n\t\t\t\n\t\t\thandleChange(event){\n\t\t\t\tthis.setState({value:event.target.value});\n\t\t\t}\n\t\t\thandleSubmit(event){\n\t\t\t\t//提交前显示名字\n\t\t\t\talert('提交的名字：'+this.state.value);\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\thandleChangeTextarea(event){\n\t\t\t\tthis.setState({textValue:event.target.value})\n\t\t\t}\n\t\t\thandleChangeSelect(event){\n\t\t\t\tconsole.log('event',event)\n\t\t\t\tthis.setState({selected:event.target.value});\n\t\t\t}\n\t\t\trender(){\n\t\t\t\treturn(\n\t\t\t\t  <form onSubmit={this.handleSubmit}>\n\t\t\t\t    <label>\n\t\t\t\t\t  名字:\n\t\t\t\t\t  <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n\t\t\t\t\t </label>\n\t\t\t\t\t <label>\n\t\t\t\t\t\t 内容：\n\t\t\t\t\t\t <textarea  value={this.state.textValue} onChange={this.handleChangeTextarea}/>\n\t\t\t\t\t </label>\n\t\t\t\t\t <label>\n\t\t\t\t\t \t选择：\n\t\t\t\t\t \t<select value={this.state.selected} onChange={this.handleChangeSelect} >\n\t\t\t\t\t \t    <option value='aa'>aa</ option>\n\t\t\t\t\t \t\t<option value='bb'>bb</ option>\n\t\t\t\t\t \t\t<option value='cc'>cc</ option>\n\t\t\t\t\t \t</select>\n\t\t\t\t\t </label>\n\t\t\t\t\t  <button type=\"submit\">提交</button>\n\t\t\t\t\t</form>  \n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tReactDOM.render(<NameForm />,document.getElementById('test1'))\n\n\t\t</script>\n</html>\n\n```\n\n以上的形式在一个表单中调用了多个onChange，也可以只调用同一个onChange函数同时监听并改变多个数据，可以给每个元素添加 `name` 属性，并让处理函数根据 `event.target.name` 的值选择要执行的操作。具体代码如下所示：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//表单的运用\n\t\t\n\t\t//通过类自定义的内有方法来更方便迅捷地操作表单\n\t\t\n\t\t//自定义表单组件\n\t\tclass NameForm extends React.Component{\n\t\t\tconstructor(props){\n\t\t\t\tsuper(props);\n\t\t\t\t//定义可更改的变量，即表单输入元素\n\t\t\t\tthis.state={\n\t\t\t\t\tnameValue:'',\n\t\t\t\t\ttextValue:'',\n\t\t\t\t\tselected:'aa',\n\t\t\t\t};\n\t\t\t\t//在具体方法中绑定this来实现对state的改变。\n\t\t\t\tthis.handleChange=this.handleChange.bind(this);\n\t\t\t\tthis.handleSubmit=this.handleSubmit.bind(this);\n\t\t\t}\n\t\t\t\n\t\t\thandleChange(event){\n\t\t\t\tconst value=event.target.value;\n\t\t\t\tconst name=event.target.name;\n\t\t\t\tthis.setState({\n\t\t\t\t\t[name]:value\n\t\t\t\t})\n\t\t\t}\n\t\t\thandleSubmit(event){\n\t\t\t\t//提交前显示名字\n\t\t\t\talert('提交的名字：'+this.state.value);\n\t\t\t\tconsole.log('state',this.state)\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\trender(){\n\t\t\t\treturn(\n\t\t\t\t  <form onSubmit={this.handleSubmit}>\n\t\t\t\t    <label>\n\t\t\t\t\t  名字:\n\t\t\t\t\t  <input name=\"nameValue\" type=\"text\" value={this.state.value} onChange={this.handleChange} />\n\t\t\t\t\t </label>\n\t\t\t\t\t <label>\n\t\t\t\t\t\t 内容：\n\t\t\t\t\t\t <textarea name=\"textValue\"  value={this.state.textValue} onChange={this.handleChange}/>\n\t\t\t\t\t </label>\n\t\t\t\t\t <label>\n\t\t\t\t\t \t选择：\n\t\t\t\t\t \t<select name=\"selected\" value={this.state.selected} onChange={this.handleChange} >\n\t\t\t\t\t \t    <option value='aa'>aa</ option>\n\t\t\t\t\t \t\t<option value='bb'>bb</ option>\n\t\t\t\t\t \t\t<option value='cc'>cc</ option>\n\t\t\t\t\t \t</select>\n\t\t\t\t\t </label>\n\t\t\t\t\t  <button type=\"submit\">提交</button>\n\t\t\t\t\t</form>  \n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tReactDOM.render(<NameForm />,document.getElementById('test1'))\n\n\t\t</script>\n</html>\n\n```\n\n","source":"_posts/React学习三.md","raw":"---\ntitle: React的列表和表单\ndate: 2021-12-19 09:45:05\ntags: [React, 学习]\ncategories:\n- 博客\n---\n\n### 一、使用map来进行列表渲染\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//通过map的方式渲染列表\n\t\t\n\t\tfunction List(props){\n\t\t\t//获取列表参数\n\t\t\tconst numbers=props.numbers;\n\t\t\t//利用map进行渲染\n\t\t\tconst listItem=numbers.map((number=>\n\t\t\t<li>{number}</li>));\n\t\t\t\n\t\t\treturn (\n\t\t\t  <ul>{listItem}</ul>\n\t\t\t)\n\t\t}\n\t\t\n\t\tconst numbers=[1,2,3,4,5];\n\t\tReactDOM.render(\n\t\t<List numbers={numbers} />,\n\t\tdocument.getElementById('test1'))\n\n\t\t</script>\n</html>\n\n```\n\n运行以上代码，发现已成功渲染列表，但是在控制台获得警告如下：\n\n![](/images/react/2021121903.png)\n\n提示对于列表的每一个元素都需要key关键词，给每一列添加key:`<li key={number.toString()}>{number}</li>));`，key作为列表中每个元素的唯一标识符，是有优化性能的作用。对于应该在哪里设置元素的key，一个好的经验法则是：在 `map()` 方法中的元素需要设置 key 属性。\n\n以上情况可以也通过以下方法实现\n\n```jsx\nfuntion ListItem(props){\n\t\t\treturn <li>{props.value}</li>\n}\n\t\t\nfunction List2(props){\n\tconst numbers=props.numbers;\n\treturn (\n\t\t <ul>\n\t\t\t{numbers.map((number=>\n\t\t\t<ListItem key={number.toString()} value={number} />\n\t\t\t))}\n\t\t</ul>\n\t)\n}\n```\n\n\n\n### 二、表单\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//表单的运用\n\t\t\n\t\t//通过类自定义的内有方法来更方便迅捷地操作表单\n\t\t\n\t\t//自定义表单组件\n\t\tclass NameForm extends React.Component{\n\t\t\tconstructor(props){\n\t\t\t\tsuper(props);\n\t\t\t\t//定义可更改的变量，即表单输入元素\n\t\t\t\tthis.state={value:''};\n\t\t\t\t//在具体方法中绑定this来实现对state的改变。\n\t\t\t\tthis.handleChange=this.handleChange.bind(this);\n\t\t\t\tthis.handleSubmit=this.handleSubmit.bind(this);\n\t\t\t}\n\t\t\t\n\t\t\thandleChange(event){\n\t\t\t\tthis.setState({value:event.target.value});\n\t\t\t}\n\t\t\thandleSubmit(event){\n\t\t\t\t//提交前显示名字\n\t\t\t\talert('提交的名字：'+this.state.value);\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\trender(){\n\t\t\t\treturn(\n\t\t\t\t  <form onSubmit={this.handleSubmit}>\n\t\t\t\t    <label>\n\t\t\t\t\t  名字:\n\t\t\t\t\t  <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n\t\t\t\t\t </label>\n\t\t\t\t\t  <button type=\"submit\">提交</button>\n\t\t\t\t\t</form>  \n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tReactDOM.render(<NameForm />,document.getElementById('test1'))\n\n\t\t</script>\n</html>\n\n```\n\n以上例子实现了一个自定义表单的应用。\n\n注意：在Html中`<textarea>` 组件直接通过子元素定义其文本，而在React中通过属性value来确定其文本。针对`<select>`组件React 并不会使用 `selected` 属性，而是在根 `select` 标签上使用 `value` 属性。这在受控组件中更便捷，因为您只需要在根标签中更新它。\n\n具体关于textarea 和select在React里的具体操作如下所示：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//表单的运用\n\t\t\n\t\t//通过类自定义的内有方法来更方便迅捷地操作表单\n\t\t\n\t\t//自定义表单组件\n\t\tclass NameForm extends React.Component{\n\t\t\tconstructor(props){\n\t\t\t\tsuper(props);\n\t\t\t\t//定义可更改的变量，即表单输入元素\n\t\t\t\tthis.state={\n\t\t\t\t\tvalue:'',\n\t\t\t\t\ttextValue:'',\n\t\t\t\t\tselected:'aa',\n\t\t\t\t};\n\t\t\t\t//在具体方法中绑定this来实现对state的改变。\n\t\t\t\tthis.handleChange=this.handleChange.bind(this);\n\t\t\t\tthis.handleSubmit=this.handleSubmit.bind(this);\n\t\t\t\tthis.handleChangeSelect=this.handleChangeSelect.bind(this);\n\t\t\t\tthis.handleChangeTextarea=this.handleChangeTextarea.bind(this);\n\t\t\t}\n\t\t\t\n\t\t\thandleChange(event){\n\t\t\t\tthis.setState({value:event.target.value});\n\t\t\t}\n\t\t\thandleSubmit(event){\n\t\t\t\t//提交前显示名字\n\t\t\t\talert('提交的名字：'+this.state.value);\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\thandleChangeTextarea(event){\n\t\t\t\tthis.setState({textValue:event.target.value})\n\t\t\t}\n\t\t\thandleChangeSelect(event){\n\t\t\t\tconsole.log('event',event)\n\t\t\t\tthis.setState({selected:event.target.value});\n\t\t\t}\n\t\t\trender(){\n\t\t\t\treturn(\n\t\t\t\t  <form onSubmit={this.handleSubmit}>\n\t\t\t\t    <label>\n\t\t\t\t\t  名字:\n\t\t\t\t\t  <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n\t\t\t\t\t </label>\n\t\t\t\t\t <label>\n\t\t\t\t\t\t 内容：\n\t\t\t\t\t\t <textarea  value={this.state.textValue} onChange={this.handleChangeTextarea}/>\n\t\t\t\t\t </label>\n\t\t\t\t\t <label>\n\t\t\t\t\t \t选择：\n\t\t\t\t\t \t<select value={this.state.selected} onChange={this.handleChangeSelect} >\n\t\t\t\t\t \t    <option value='aa'>aa</ option>\n\t\t\t\t\t \t\t<option value='bb'>bb</ option>\n\t\t\t\t\t \t\t<option value='cc'>cc</ option>\n\t\t\t\t\t \t</select>\n\t\t\t\t\t </label>\n\t\t\t\t\t  <button type=\"submit\">提交</button>\n\t\t\t\t\t</form>  \n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tReactDOM.render(<NameForm />,document.getElementById('test1'))\n\n\t\t</script>\n</html>\n\n```\n\n以上的形式在一个表单中调用了多个onChange，也可以只调用同一个onChange函数同时监听并改变多个数据，可以给每个元素添加 `name` 属性，并让处理函数根据 `event.target.name` 的值选择要执行的操作。具体代码如下所示：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//表单的运用\n\t\t\n\t\t//通过类自定义的内有方法来更方便迅捷地操作表单\n\t\t\n\t\t//自定义表单组件\n\t\tclass NameForm extends React.Component{\n\t\t\tconstructor(props){\n\t\t\t\tsuper(props);\n\t\t\t\t//定义可更改的变量，即表单输入元素\n\t\t\t\tthis.state={\n\t\t\t\t\tnameValue:'',\n\t\t\t\t\ttextValue:'',\n\t\t\t\t\tselected:'aa',\n\t\t\t\t};\n\t\t\t\t//在具体方法中绑定this来实现对state的改变。\n\t\t\t\tthis.handleChange=this.handleChange.bind(this);\n\t\t\t\tthis.handleSubmit=this.handleSubmit.bind(this);\n\t\t\t}\n\t\t\t\n\t\t\thandleChange(event){\n\t\t\t\tconst value=event.target.value;\n\t\t\t\tconst name=event.target.name;\n\t\t\t\tthis.setState({\n\t\t\t\t\t[name]:value\n\t\t\t\t})\n\t\t\t}\n\t\t\thandleSubmit(event){\n\t\t\t\t//提交前显示名字\n\t\t\t\talert('提交的名字：'+this.state.value);\n\t\t\t\tconsole.log('state',this.state)\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\trender(){\n\t\t\t\treturn(\n\t\t\t\t  <form onSubmit={this.handleSubmit}>\n\t\t\t\t    <label>\n\t\t\t\t\t  名字:\n\t\t\t\t\t  <input name=\"nameValue\" type=\"text\" value={this.state.value} onChange={this.handleChange} />\n\t\t\t\t\t </label>\n\t\t\t\t\t <label>\n\t\t\t\t\t\t 内容：\n\t\t\t\t\t\t <textarea name=\"textValue\"  value={this.state.textValue} onChange={this.handleChange}/>\n\t\t\t\t\t </label>\n\t\t\t\t\t <label>\n\t\t\t\t\t \t选择：\n\t\t\t\t\t \t<select name=\"selected\" value={this.state.selected} onChange={this.handleChange} >\n\t\t\t\t\t \t    <option value='aa'>aa</ option>\n\t\t\t\t\t \t\t<option value='bb'>bb</ option>\n\t\t\t\t\t \t\t<option value='cc'>cc</ option>\n\t\t\t\t\t \t</select>\n\t\t\t\t\t </label>\n\t\t\t\t\t  <button type=\"submit\">提交</button>\n\t\t\t\t\t</form>  \n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tReactDOM.render(<NameForm />,document.getElementById('test1'))\n\n\t\t</script>\n</html>\n\n```\n\n","slug":"React学习三","published":1,"updated":"2021-12-19T03:21:16.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcouokf0003ngtvax4egf9c","content":"<h3 id=\"一、使用map来进行列表渲染\"><a href=\"#一、使用map来进行列表渲染\" class=\"headerlink\" title=\"一、使用map来进行列表渲染\"></a>一、使用map来进行列表渲染</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//通过map的方式渲染列表</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">List</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//获取列表参数</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">const</span> numbers=props.numbers;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//利用map进行渲染</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">const</span> listItem=numbers.map((<span class=\"hljs-function\"><span class=\"hljs-params\">number</span>=&gt;</span></span><br><span class=\"javascript\">\t\t\t<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;number&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>));</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">return</span> (</span><br><span class=\"javascript\">\t\t\t  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>&#123;listItem&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t\t)</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-keyword\">const</span> numbers=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>];</span><br><span class=\"javascript\">\t\tReactDOM.render(</span><br><span class=\"javascript\">\t\t<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span> <span class=\"hljs-attr\">numbers</span>=<span class=\"hljs-string\">&#123;numbers&#125;</span> /&gt;</span></span>,</span><br><span class=\"javascript\">\t\t<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;test1&#x27;</span>))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>运行以上代码，发现已成功渲染列表，但是在控制台获得警告如下：</p>\n<p><img src=\"/images/react/2021121903.png\"></p>\n<p>提示对于列表的每一个元素都需要key关键词，给每一列添加key:<code>&lt;li key=&#123;number.toString()&#125;&gt;&#123;number&#125;&lt;/li&gt;));</code>，key作为列表中每个元素的唯一标识符，是有优化性能的作用。对于应该在哪里设置元素的key，一个好的经验法则是：在 <code>map()</code> 方法中的元素需要设置 key 属性。</p>\n<p>以上情况可以也通过以下方法实现</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">funtion <span class=\"hljs-function\"><span class=\"hljs-title\">ListItem</span>(<span class=\"hljs-params\">props</span>)</span>&#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;props.value&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br>&#125;<br>\t\t<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">List2</span>(<span class=\"hljs-params\">props</span>)</span>&#123;<br>\t<span class=\"hljs-keyword\">const</span> numbers=props.numbers;<br>\t<span class=\"hljs-keyword\">return</span> (<br>\t\t <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"xml\">\t\t\t&#123;numbers.map((number=&gt;</span><br><span class=\"xml\">\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ListItem</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&#123;number.toString()&#125;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&#123;number&#125;</span> /&gt;</span></span><br><span class=\"xml\">\t\t\t))&#125;</span><br><span class=\"xml\">\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br>\t)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"二、表单\"><a href=\"#二、表单\" class=\"headerlink\" title=\"二、表单\"></a>二、表单</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//表单的运用</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//通过类自定义的内有方法来更方便迅捷地操作表单</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//自定义表单组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NameForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">super</span>(props);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//定义可更改的变量，即表单输入元素</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.state=&#123;<span class=\"hljs-attr\">value</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>&#125;;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//在具体方法中绑定this来实现对state的改变。</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChange=<span class=\"hljs-built_in\">this</span>.handleChange.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleSubmit=<span class=\"hljs-built_in\">this</span>.handleSubmit.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChange</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;<span class=\"hljs-attr\">value</span>:event.target.value&#125;);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleSubmit</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//提交前显示名字</span></span><br><span class=\"javascript\">\t\t\t\talert(<span class=\"hljs-string\">&#x27;提交的名字：&#x27;</span>+<span class=\"hljs-built_in\">this</span>.state.value);</span><br><span class=\"javascript\">\t\t\t\tevent.preventDefault();</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span>(</span><br><span class=\"javascript\">\t\t\t\t  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t  名字:</span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&#123;this.state.value&#125;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>  </span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\tReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NameForm</span> /&gt;</span></span>,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;test1&#x27;</span>))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>以上例子实现了一个自定义表单的应用。</p>\n<p>注意：在Html中<code>&lt;textarea&gt;</code> 组件直接通过子元素定义其文本，而在React中通过属性value来确定其文本。针对<code>&lt;select&gt;</code>组件React 并不会使用 <code>selected</code> 属性，而是在根 <code>select</code> 标签上使用 <code>value</code> 属性。这在受控组件中更便捷，因为您只需要在根标签中更新它。</p>\n<p>具体关于textarea 和select在React里的具体操作如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//表单的运用</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//通过类自定义的内有方法来更方便迅捷地操作表单</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//自定义表单组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NameForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">super</span>(props);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//定义可更改的变量，即表单输入元素</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.state=&#123;</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">value</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">textValue</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">selected</span>:<span class=\"hljs-string\">&#x27;aa&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t&#125;;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//在具体方法中绑定this来实现对state的改变。</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChange=<span class=\"hljs-built_in\">this</span>.handleChange.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleSubmit=<span class=\"hljs-built_in\">this</span>.handleSubmit.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChangeSelect=<span class=\"hljs-built_in\">this</span>.handleChangeSelect.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChangeTextarea=<span class=\"hljs-built_in\">this</span>.handleChangeTextarea.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChange</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;<span class=\"hljs-attr\">value</span>:event.target.value&#125;);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleSubmit</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//提交前显示名字</span></span><br><span class=\"javascript\">\t\t\t\talert(<span class=\"hljs-string\">&#x27;提交的名字：&#x27;</span>+<span class=\"hljs-built_in\">this</span>.state.value);</span><br><span class=\"javascript\">\t\t\t\tevent.preventDefault();</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChangeTextarea</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;<span class=\"hljs-attr\">textValue</span>:event.target.value&#125;)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChangeSelect</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;event&#x27;</span>,event)</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;<span class=\"hljs-attr\">selected</span>:event.target.value&#125;);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span>(</span><br><span class=\"javascript\">\t\t\t\t  &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class=\"javascript\">\t\t\t\t    &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t  名字:</span><br><span class=\"javascript\">\t\t\t\t\t  &lt;input type=&quot;text&quot; value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t\t 内容：</span><br><span class=\"javascript\">\t\t\t\t\t\t &lt;textarea  value=&#123;this.state.textValue&#125; onChange=&#123;this.handleChangeTextarea&#125;/&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t选择：</span><br><span class=\"javascript\">\t\t\t\t\t \t&lt;select value=&#123;this.state.selected&#125; onChange=&#123;this.handleChangeSelect&#125; &gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t    &lt;option value=&#x27;aa&#x27;&gt;aa&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t\t&lt;option value=&#x27;bb&#x27;&gt;bb&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t\t&lt;option value=&#x27;cc&#x27;&gt;cc&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t&lt;/select&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t  &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class=\"javascript\">\t\t\t\t\t&lt;/form&gt;  </span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\tReactDOM.render(&lt;NameForm /&gt;,document.getElementById(&#x27;test1&#x27;))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>以上的形式在一个表单中调用了多个onChange，也可以只调用同一个onChange函数同时监听并改变多个数据，可以给每个元素添加 <code>name</code> 属性，并让处理函数根据 <code>event.target.name</code> 的值选择要执行的操作。具体代码如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//表单的运用</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//通过类自定义的内有方法来更方便迅捷地操作表单</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//自定义表单组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NameForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">super</span>(props);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//定义可更改的变量，即表单输入元素</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.state=&#123;</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">nameValue</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">textValue</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">selected</span>:<span class=\"hljs-string\">&#x27;aa&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t&#125;;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//在具体方法中绑定this来实现对state的改变。</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChange=<span class=\"hljs-built_in\">this</span>.handleChange.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleSubmit=<span class=\"hljs-built_in\">this</span>.handleSubmit.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChange</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">const</span> value=event.target.value;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">const</span> name=event.target.name;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;</span><br><span class=\"javascript\">\t\t\t\t\t[name]:value</span><br><span class=\"javascript\">\t\t\t\t&#125;)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleSubmit</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//提交前显示名字</span></span><br><span class=\"javascript\">\t\t\t\talert(<span class=\"hljs-string\">&#x27;提交的名字：&#x27;</span>+<span class=\"hljs-built_in\">this</span>.state.value);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;state&#x27;</span>,<span class=\"hljs-built_in\">this</span>.state)</span><br><span class=\"javascript\">\t\t\t\tevent.preventDefault();</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span>(</span><br><span class=\"javascript\">\t\t\t\t  &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class=\"javascript\">\t\t\t\t    &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t  名字:</span><br><span class=\"javascript\">\t\t\t\t\t  &lt;input name=&quot;nameValue&quot; type=&quot;text&quot; value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t\t 内容：</span><br><span class=\"javascript\">\t\t\t\t\t\t &lt;textarea name=&quot;textValue&quot;  value=&#123;this.state.textValue&#125; onChange=&#123;this.handleChange&#125;/&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t选择：</span><br><span class=\"javascript\">\t\t\t\t\t \t&lt;select name=&quot;selected&quot; value=&#123;this.state.selected&#125; onChange=&#123;this.handleChange&#125; &gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t    &lt;option value=&#x27;aa&#x27;&gt;aa&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t\t&lt;option value=&#x27;bb&#x27;&gt;bb&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t\t&lt;option value=&#x27;cc&#x27;&gt;cc&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t&lt;/select&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t  &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class=\"javascript\">\t\t\t\t\t&lt;/form&gt;  </span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\tReactDOM.render(&lt;NameForm /&gt;,document.getElementById(&#x27;test1&#x27;))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":"<h3 id=\"一、使用map来进行列表渲染\"><a href=\"#一、使用map来进行列表渲染\" class=\"headerlink\" title=\"一、使用map来进行列表渲染\"></a>一、使用map来进行列表渲染</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//通过map的方式渲染列表</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">List</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//获取列表参数</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">const</span> numbers=props.numbers;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//利用map进行渲染</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">const</span> listItem=numbers.map((<span class=\"hljs-function\"><span class=\"hljs-params\">number</span>=&gt;</span></span><br><span class=\"javascript\">\t\t\t<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;number&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>));</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">return</span> (</span><br><span class=\"javascript\">\t\t\t  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>&#123;listItem&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t\t)</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-keyword\">const</span> numbers=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>];</span><br><span class=\"javascript\">\t\tReactDOM.render(</span><br><span class=\"javascript\">\t\t<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span> <span class=\"hljs-attr\">numbers</span>=<span class=\"hljs-string\">&#123;numbers&#125;</span> /&gt;</span></span>,</span><br><span class=\"javascript\">\t\t<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;test1&#x27;</span>))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>运行以上代码，发现已成功渲染列表，但是在控制台获得警告如下：</p>\n<p><img src=\"/images/react/2021121903.png\"></p>\n<p>提示对于列表的每一个元素都需要key关键词，给每一列添加key:<code>&lt;li key=&#123;number.toString()&#125;&gt;&#123;number&#125;&lt;/li&gt;));</code>，key作为列表中每个元素的唯一标识符，是有优化性能的作用。对于应该在哪里设置元素的key，一个好的经验法则是：在 <code>map()</code> 方法中的元素需要设置 key 属性。</p>\n<p>以上情况可以也通过以下方法实现</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">funtion <span class=\"hljs-function\"><span class=\"hljs-title\">ListItem</span>(<span class=\"hljs-params\">props</span>)</span>&#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;props.value&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br>&#125;<br>\t\t<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">List2</span>(<span class=\"hljs-params\">props</span>)</span>&#123;<br>\t<span class=\"hljs-keyword\">const</span> numbers=props.numbers;<br>\t<span class=\"hljs-keyword\">return</span> (<br>\t\t <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"xml\">\t\t\t&#123;numbers.map((number=&gt;</span><br><span class=\"xml\">\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ListItem</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&#123;number.toString()&#125;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&#123;number&#125;</span> /&gt;</span></span><br><span class=\"xml\">\t\t\t))&#125;</span><br><span class=\"xml\">\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br>\t)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"二、表单\"><a href=\"#二、表单\" class=\"headerlink\" title=\"二、表单\"></a>二、表单</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//表单的运用</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//通过类自定义的内有方法来更方便迅捷地操作表单</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//自定义表单组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NameForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">super</span>(props);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//定义可更改的变量，即表单输入元素</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.state=&#123;<span class=\"hljs-attr\">value</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>&#125;;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//在具体方法中绑定this来实现对state的改变。</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChange=<span class=\"hljs-built_in\">this</span>.handleChange.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleSubmit=<span class=\"hljs-built_in\">this</span>.handleSubmit.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChange</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;<span class=\"hljs-attr\">value</span>:event.target.value&#125;);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleSubmit</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//提交前显示名字</span></span><br><span class=\"javascript\">\t\t\t\talert(<span class=\"hljs-string\">&#x27;提交的名字：&#x27;</span>+<span class=\"hljs-built_in\">this</span>.state.value);</span><br><span class=\"javascript\">\t\t\t\tevent.preventDefault();</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span>(</span><br><span class=\"javascript\">\t\t\t\t  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t  名字:</span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&#123;this.state.value&#125;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>  </span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\tReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NameForm</span> /&gt;</span></span>,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;test1&#x27;</span>))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>以上例子实现了一个自定义表单的应用。</p>\n<p>注意：在Html中<code>&lt;textarea&gt;</code> 组件直接通过子元素定义其文本，而在React中通过属性value来确定其文本。针对<code>&lt;select&gt;</code>组件React 并不会使用 <code>selected</code> 属性，而是在根 <code>select</code> 标签上使用 <code>value</code> 属性。这在受控组件中更便捷，因为您只需要在根标签中更新它。</p>\n<p>具体关于textarea 和select在React里的具体操作如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//表单的运用</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//通过类自定义的内有方法来更方便迅捷地操作表单</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//自定义表单组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NameForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">super</span>(props);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//定义可更改的变量，即表单输入元素</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.state=&#123;</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">value</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">textValue</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">selected</span>:<span class=\"hljs-string\">&#x27;aa&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t&#125;;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//在具体方法中绑定this来实现对state的改变。</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChange=<span class=\"hljs-built_in\">this</span>.handleChange.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleSubmit=<span class=\"hljs-built_in\">this</span>.handleSubmit.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChangeSelect=<span class=\"hljs-built_in\">this</span>.handleChangeSelect.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChangeTextarea=<span class=\"hljs-built_in\">this</span>.handleChangeTextarea.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChange</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;<span class=\"hljs-attr\">value</span>:event.target.value&#125;);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleSubmit</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//提交前显示名字</span></span><br><span class=\"javascript\">\t\t\t\talert(<span class=\"hljs-string\">&#x27;提交的名字：&#x27;</span>+<span class=\"hljs-built_in\">this</span>.state.value);</span><br><span class=\"javascript\">\t\t\t\tevent.preventDefault();</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChangeTextarea</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;<span class=\"hljs-attr\">textValue</span>:event.target.value&#125;)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChangeSelect</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;event&#x27;</span>,event)</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;<span class=\"hljs-attr\">selected</span>:event.target.value&#125;);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span>(</span><br><span class=\"javascript\">\t\t\t\t  &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class=\"javascript\">\t\t\t\t    &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t  名字:</span><br><span class=\"javascript\">\t\t\t\t\t  &lt;input type=&quot;text&quot; value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t\t 内容：</span><br><span class=\"javascript\">\t\t\t\t\t\t &lt;textarea  value=&#123;this.state.textValue&#125; onChange=&#123;this.handleChangeTextarea&#125;/&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t选择：</span><br><span class=\"javascript\">\t\t\t\t\t \t&lt;select value=&#123;this.state.selected&#125; onChange=&#123;this.handleChangeSelect&#125; &gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t    &lt;option value=&#x27;aa&#x27;&gt;aa&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t\t&lt;option value=&#x27;bb&#x27;&gt;bb&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t\t&lt;option value=&#x27;cc&#x27;&gt;cc&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t&lt;/select&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t  &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class=\"javascript\">\t\t\t\t\t&lt;/form&gt;  </span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\tReactDOM.render(&lt;NameForm /&gt;,document.getElementById(&#x27;test1&#x27;))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>以上的形式在一个表单中调用了多个onChange，也可以只调用同一个onChange函数同时监听并改变多个数据，可以给每个元素添加 <code>name</code> 属性，并让处理函数根据 <code>event.target.name</code> 的值选择要执行的操作。具体代码如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//表单的运用</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//通过类自定义的内有方法来更方便迅捷地操作表单</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//自定义表单组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NameForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">super</span>(props);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//定义可更改的变量，即表单输入元素</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.state=&#123;</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">nameValue</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">textValue</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">selected</span>:<span class=\"hljs-string\">&#x27;aa&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t&#125;;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//在具体方法中绑定this来实现对state的改变。</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChange=<span class=\"hljs-built_in\">this</span>.handleChange.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleSubmit=<span class=\"hljs-built_in\">this</span>.handleSubmit.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChange</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">const</span> value=event.target.value;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">const</span> name=event.target.name;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;</span><br><span class=\"javascript\">\t\t\t\t\t[name]:value</span><br><span class=\"javascript\">\t\t\t\t&#125;)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleSubmit</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//提交前显示名字</span></span><br><span class=\"javascript\">\t\t\t\talert(<span class=\"hljs-string\">&#x27;提交的名字：&#x27;</span>+<span class=\"hljs-built_in\">this</span>.state.value);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;state&#x27;</span>,<span class=\"hljs-built_in\">this</span>.state)</span><br><span class=\"javascript\">\t\t\t\tevent.preventDefault();</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span>(</span><br><span class=\"javascript\">\t\t\t\t  &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class=\"javascript\">\t\t\t\t    &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t  名字:</span><br><span class=\"javascript\">\t\t\t\t\t  &lt;input name=&quot;nameValue&quot; type=&quot;text&quot; value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t\t 内容：</span><br><span class=\"javascript\">\t\t\t\t\t\t &lt;textarea name=&quot;textValue&quot;  value=&#123;this.state.textValue&#125; onChange=&#123;this.handleChange&#125;/&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t选择：</span><br><span class=\"javascript\">\t\t\t\t\t \t&lt;select name=&quot;selected&quot; value=&#123;this.state.selected&#125; onChange=&#123;this.handleChange&#125; &gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t    &lt;option value=&#x27;aa&#x27;&gt;aa&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t\t&lt;option value=&#x27;bb&#x27;&gt;bb&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t\t&lt;option value=&#x27;cc&#x27;&gt;cc&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t&lt;/select&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t  &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class=\"javascript\">\t\t\t\t\t&lt;/form&gt;  </span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\tReactDOM.render(&lt;NameForm /&gt;,document.getElementById(&#x27;test1&#x27;))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"React的数据更新和监听事件","date":"2021-12-19T01:19:01.000Z","_content":"\n### 一、使用state实现更新React组件数据\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<!-- 上面两个Js文件是有固定的引用先后顺序 -->\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t// 使用state实现更新React组件数据\n\t\t\n\t\t// 利用class定义自定义组件\n\t\tclass Clock extends React.Component{\n\t\t\t//调用父类构造器\n\t\t\tconstructor(props) {\n\t\t\t    super(props);\n\t\t\t    //定义state内的数据\n\t\t\t\tthis.state={data:new Date()};\n\t\t\t}\n\t\t\t\n\t\t\t//生命周期函数：挂载完成时，每一秒调用tick函数，即每一秒改变stata内data的数据。\n\t\t\tcomponentDidMount(){\n\t\t\t\tthis.timeID=setInterval(\n\t\t\t\t()=>this.tick(),1000\n\t\t\t\t)\n\t\t\t}\n\t\t\t//生命周期函数：即将卸载时\n\t\t\tcomponentWillUnmount(){\n\t\t\t\tclearInterval(this.timeID);\n\t\t\t}\n\t\t\t\n\t\t    tick(){\n\t\t\t\tthis.setState({\n\t\t\t\t\tdata:new Date()\n\t\t\t\t});\n\t\t\t}\n\t\t\trender(){\n\t\t\t\treturn (\n\t\t\t\t    <div>\n\t\t\t\t        <div>hello!!</div>\n\t\t\t\t\t    <h5>It is {this.state.data.toLocaleTimeString()} .</h5>\n\t\t\t\t    </div>\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tReactDOM.render(<Clock />,document.getElementById(\"test1\"))\n\t</script>\n</html>\n\n```\n\n以上为一个时钟渲染实例，通过state和生命周期的使用来实时完成时钟的运行。\n\n构造函数是唯一可以给 `this.state` 赋值的地方，使用 `setState()`修改state里的数据\n\n出于性能考虑，React 可能会把多个 `setState()` 调用合并成一个调用，因为 `this.props` 和 `this.state` 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。\n\n### 二、监听事件\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<!-- 上面两个Js文件是有固定的引用先后顺序 -->\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//监听事件\n\t\t//实时切换一个按钮的状态\n\t\t\n\t\t//定义一个按钮组件\n\t\tclass Button1 extends React.Component{\n\t\t    //因为设计到React.Component里的一些特性，所以需要构造器继承父类构造器\n\t\t\tconstructor(props) {\n\t\t\t    super(props);\n\t\t\t\t//state里的数据可以更新修改，相当于Vue里的data\n\t\t\t\tthis.state={\n\t\t\t\t\tisToggleOn:true,\n\t\t\t\t\tdata1:'haha',\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//为了在该类的方法中调用this.setState来改变state里的数据来实现实时监听，所以，要在构造器里提前将需要的方法绑定this\n\t\t\t\tthis.handleClick=this.handleClick.bind(this)\n\t\t\t}\n\t\t\t\n\t\t\t//该方法来实现实时切换\n\t\t\t//若前面没有绑定this，则该方法里的this指向underfined\n\t\t\t//prevState是state原先的状态\n\t\t\t//这里的=>({...})等价于=>{return ({...})}\n\t\t\thandleClick(){\n\t\t\t\tthis.setState(prevState=>({\n\t\t\t\t\tisToggleOn:!prevState.isToggleOn\n\t\t\t\t}))\n\t\t\t}\n\t\t\t\n\t\t\t// 下面的方法显示打印出prevState的数据\n\t\t\t// handleClick(){\n\t\t\t// \tthis.setState(prevState=>{\n\t\t\t// \t\tconsole.log('prevState',prevState)\n\t\t\t// \t\treturn ({\n\t\t\t// \t\t\tisToggleOn:!prevState.isToggleOn\n\t\t\t// \t\t})\n\t\t\t// \t})\n\t\t\t// }\n\t\t\t\n\t\t\trender(){\n\t\t\t\treturn (\n\t\t\t\t    <button onClick={this.handleClick}>\n\t\t\t\t\t    {this.state.isToggleOn?'ON':'OFF'}\n\t\t\t\t\t</button>\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\t\n\t\tReactDOM.render(<Button1 />,document.getElementById(\"test1\"))\n\n\t\t</script>\n</html>\n\n```\n\n以上例子实现了实时监控切换一个按钮状态。\n\n在 React 中另一个不同点是你不能通过返回 `false` 的方式阻止默认行为。你必须显式的使用 `preventDefault`。\n\n### 三、条件渲染\n\n可以通过以下方法自定义元素。\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<!-- 上面两个Js文件是有固定的引用先后顺序 -->\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//条件渲染\n\t\t\n\t\t//用函数定义的方式实现子组件的定义\n\t\tfunction SonDiv(props){\n\t\t\t//若isShow=false,则返回null，即该组件不会渲染，会被隐藏\n\t\t\tif(!props.isShow){\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn (\n\t\t\t    <div>Son is Show</div>\n\t\t\t)\n\t\t}\n\t\t\n\t\t//用类的方式实现父组件的定义\n\t\tclass FatherDiv extends React.Component{\n\t\t\tconstructor(props) {\n\t\t\t    super(props)\n\t\t\t\tthis.state={isShow:true}\n\t\t\t\tthis.handleToggleChilk=this.handleToggleChilk.bind(this)\n\t\t\t\t\n\t\t\t}\n\t\t\thandleToggleChilk(){\n\t\t\t\tthis.setState(prevState=>({\n\t\t\t\t\tisShow:!prevState.isShow\n\t\t\t\t}))\n\t\t\t}\n\t\t\t\n\t\t\trender(){\n\t\t\t\treturn (\n\t\t\t\t    <div>\n\t\t\t\t\t\t<SonDiv isShow={this.state.isShow} />\n\t\t\t\t\t\t<button onClick={this.handleToggleChilk}>\n\t\t\t\t\t\t\t{this.state.isShow?'hide':'show'}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\t\n\t\tReactDOM.render(<FatherDiv />,document.getElementById(\"test1\"))\n\n\t\t</script>\n</html>\n\n```\n\n以上案例实现了一个监控+条件渲染的案例，初始状态为：\n\n![](/images/react/2021121901.png)\n\n点击按钮'hide'，则会隐藏子组件并且按钮内容改为'show'，点击'show'则会回到初始状态即显示子组件。","source":"_posts/React学习二.md","raw":"---\ntitle: React的数据更新和监听事件\ndate: 2021-12-19 09:19:01\ntags: [React, 学习]\ncategories:\n- 博客\n---\n\n### 一、使用state实现更新React组件数据\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<!-- 上面两个Js文件是有固定的引用先后顺序 -->\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t// 使用state实现更新React组件数据\n\t\t\n\t\t// 利用class定义自定义组件\n\t\tclass Clock extends React.Component{\n\t\t\t//调用父类构造器\n\t\t\tconstructor(props) {\n\t\t\t    super(props);\n\t\t\t    //定义state内的数据\n\t\t\t\tthis.state={data:new Date()};\n\t\t\t}\n\t\t\t\n\t\t\t//生命周期函数：挂载完成时，每一秒调用tick函数，即每一秒改变stata内data的数据。\n\t\t\tcomponentDidMount(){\n\t\t\t\tthis.timeID=setInterval(\n\t\t\t\t()=>this.tick(),1000\n\t\t\t\t)\n\t\t\t}\n\t\t\t//生命周期函数：即将卸载时\n\t\t\tcomponentWillUnmount(){\n\t\t\t\tclearInterval(this.timeID);\n\t\t\t}\n\t\t\t\n\t\t    tick(){\n\t\t\t\tthis.setState({\n\t\t\t\t\tdata:new Date()\n\t\t\t\t});\n\t\t\t}\n\t\t\trender(){\n\t\t\t\treturn (\n\t\t\t\t    <div>\n\t\t\t\t        <div>hello!!</div>\n\t\t\t\t\t    <h5>It is {this.state.data.toLocaleTimeString()} .</h5>\n\t\t\t\t    </div>\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tReactDOM.render(<Clock />,document.getElementById(\"test1\"))\n\t</script>\n</html>\n\n```\n\n以上为一个时钟渲染实例，通过state和生命周期的使用来实时完成时钟的运行。\n\n构造函数是唯一可以给 `this.state` 赋值的地方，使用 `setState()`修改state里的数据\n\n出于性能考虑，React 可能会把多个 `setState()` 调用合并成一个调用，因为 `this.props` 和 `this.state` 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。\n\n### 二、监听事件\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<!-- 上面两个Js文件是有固定的引用先后顺序 -->\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//监听事件\n\t\t//实时切换一个按钮的状态\n\t\t\n\t\t//定义一个按钮组件\n\t\tclass Button1 extends React.Component{\n\t\t    //因为设计到React.Component里的一些特性，所以需要构造器继承父类构造器\n\t\t\tconstructor(props) {\n\t\t\t    super(props);\n\t\t\t\t//state里的数据可以更新修改，相当于Vue里的data\n\t\t\t\tthis.state={\n\t\t\t\t\tisToggleOn:true,\n\t\t\t\t\tdata1:'haha',\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//为了在该类的方法中调用this.setState来改变state里的数据来实现实时监听，所以，要在构造器里提前将需要的方法绑定this\n\t\t\t\tthis.handleClick=this.handleClick.bind(this)\n\t\t\t}\n\t\t\t\n\t\t\t//该方法来实现实时切换\n\t\t\t//若前面没有绑定this，则该方法里的this指向underfined\n\t\t\t//prevState是state原先的状态\n\t\t\t//这里的=>({...})等价于=>{return ({...})}\n\t\t\thandleClick(){\n\t\t\t\tthis.setState(prevState=>({\n\t\t\t\t\tisToggleOn:!prevState.isToggleOn\n\t\t\t\t}))\n\t\t\t}\n\t\t\t\n\t\t\t// 下面的方法显示打印出prevState的数据\n\t\t\t// handleClick(){\n\t\t\t// \tthis.setState(prevState=>{\n\t\t\t// \t\tconsole.log('prevState',prevState)\n\t\t\t// \t\treturn ({\n\t\t\t// \t\t\tisToggleOn:!prevState.isToggleOn\n\t\t\t// \t\t})\n\t\t\t// \t})\n\t\t\t// }\n\t\t\t\n\t\t\trender(){\n\t\t\t\treturn (\n\t\t\t\t    <button onClick={this.handleClick}>\n\t\t\t\t\t    {this.state.isToggleOn?'ON':'OFF'}\n\t\t\t\t\t</button>\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\t\n\t\tReactDOM.render(<Button1 />,document.getElementById(\"test1\"))\n\n\t\t</script>\n</html>\n\n```\n\n以上例子实现了实时监控切换一个按钮状态。\n\n在 React 中另一个不同点是你不能通过返回 `false` 的方式阻止默认行为。你必须显式的使用 `preventDefault`。\n\n### 三、条件渲染\n\n可以通过以下方法自定义元素。\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<!-- 上面两个Js文件是有固定的引用先后顺序 -->\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//条件渲染\n\t\t\n\t\t//用函数定义的方式实现子组件的定义\n\t\tfunction SonDiv(props){\n\t\t\t//若isShow=false,则返回null，即该组件不会渲染，会被隐藏\n\t\t\tif(!props.isShow){\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn (\n\t\t\t    <div>Son is Show</div>\n\t\t\t)\n\t\t}\n\t\t\n\t\t//用类的方式实现父组件的定义\n\t\tclass FatherDiv extends React.Component{\n\t\t\tconstructor(props) {\n\t\t\t    super(props)\n\t\t\t\tthis.state={isShow:true}\n\t\t\t\tthis.handleToggleChilk=this.handleToggleChilk.bind(this)\n\t\t\t\t\n\t\t\t}\n\t\t\thandleToggleChilk(){\n\t\t\t\tthis.setState(prevState=>({\n\t\t\t\t\tisShow:!prevState.isShow\n\t\t\t\t}))\n\t\t\t}\n\t\t\t\n\t\t\trender(){\n\t\t\t\treturn (\n\t\t\t\t    <div>\n\t\t\t\t\t\t<SonDiv isShow={this.state.isShow} />\n\t\t\t\t\t\t<button onClick={this.handleToggleChilk}>\n\t\t\t\t\t\t\t{this.state.isShow?'hide':'show'}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\t\n\t\tReactDOM.render(<FatherDiv />,document.getElementById(\"test1\"))\n\n\t\t</script>\n</html>\n\n```\n\n以上案例实现了一个监控+条件渲染的案例，初始状态为：\n\n![](/images/react/2021121901.png)\n\n点击按钮'hide'，则会隐藏子组件并且按钮内容改为'show'，点击'show'则会回到初始状态即显示子组件。","slug":"React学习二","published":1,"updated":"2021-12-19T01:51:29.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcouokj0007ngtv6t6m7gib","content":"<h3 id=\"一、使用state实现更新React组件数据\"><a href=\"#一、使用state实现更新React组件数据\" class=\"headerlink\" title=\"一、使用state实现更新React组件数据\"></a>一、使用state实现更新React组件数据</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-comment\">&lt;!-- 上面两个Js文件是有固定的引用先后顺序 --&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">// 使用state实现更新React组件数据</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">// 利用class定义自定义组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Clock</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//调用父类构造器</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> &#123;</span><br><span class=\"javascript\">\t\t\t    <span class=\"hljs-built_in\">super</span>(props);</span><br><span class=\"javascript\">\t\t\t    <span class=\"hljs-comment\">//定义state内的数据</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.state=&#123;<span class=\"hljs-attr\">data</span>:<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()&#125;;</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//生命周期函数：挂载完成时，每一秒调用tick函数，即每一秒改变stata内data的数据。</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">componentDidMount</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.timeID=<span class=\"hljs-built_in\">setInterval</span>(</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-built_in\">this</span>.tick(),<span class=\"hljs-number\">1000</span></span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//生命周期函数：即将卸载时</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">componentWillUnmount</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">clearInterval</span>(<span class=\"hljs-built_in\">this</span>.timeID);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t    <span class=\"hljs-function\"><span class=\"hljs-title\">tick</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">data</span>:<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()</span><br><span class=\"javascript\">\t\t\t\t&#125;);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span> (</span><br><span class=\"javascript\">\t\t\t\t    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>hello!!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h5</span>&gt;</span>It is &#123;this.state.data.toLocaleTimeString()&#125; .<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h5</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\tReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Clock</span> /&gt;</span></span>,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;test1&quot;</span>))</span><br><span class=\"javascript\">\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>以上为一个时钟渲染实例，通过state和生命周期的使用来实时完成时钟的运行。</p>\n<p>构造函数是唯一可以给 <code>this.state</code> 赋值的地方，使用 <code>setState()</code>修改state里的数据</p>\n<p>出于性能考虑，React 可能会把多个 <code>setState()</code> 调用合并成一个调用，因为 <code>this.props</code> 和 <code>this.state</code> 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。</p>\n<h3 id=\"二、监听事件\"><a href=\"#二、监听事件\" class=\"headerlink\" title=\"二、监听事件\"></a>二、监听事件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-comment\">&lt;!-- 上面两个Js文件是有固定的引用先后顺序 --&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//监听事件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//实时切换一个按钮的状态</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//定义一个按钮组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Button1</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t    <span class=\"hljs-comment\">//因为设计到React.Component里的一些特性，所以需要构造器继承父类构造器</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> &#123;</span><br><span class=\"javascript\">\t\t\t    <span class=\"hljs-built_in\">super</span>(props);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//state里的数据可以更新修改，相当于Vue里的data</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.state=&#123;</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">isToggleOn</span>:<span class=\"hljs-literal\">true</span>,</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">data1</span>:<span class=\"hljs-string\">&#x27;haha&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t\t</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//为了在该类的方法中调用this.setState来改变state里的数据来实现实时监听，所以，要在构造器里提前将需要的方法绑定this</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleClick=<span class=\"hljs-built_in\">this</span>.handleClick.bind(<span class=\"hljs-built_in\">this</span>)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//该方法来实现实时切换</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//若前面没有绑定this，则该方法里的this指向underfined</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//prevState是state原先的状态</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//这里的=&gt;(&#123;...&#125;)等价于=&gt;&#123;return (&#123;...&#125;)&#125;</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleClick</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(<span class=\"hljs-function\"><span class=\"hljs-params\">prevState</span>=&gt;</span>(&#123;</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">isToggleOn</span>:!prevState.isToggleOn</span><br><span class=\"javascript\">\t\t\t\t&#125;))</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">// 下面的方法显示打印出prevState的数据</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">// handleClick()&#123;</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">// \tthis.setState(prevState=&gt;&#123;</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">// \t\tconsole.log(&#x27;prevState&#x27;,prevState)</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">// \t\treturn (&#123;</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">// \t\t\tisToggleOn:!prevState.isToggleOn</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">// \t\t&#125;)</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">// \t&#125;)</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">// &#125;</span></span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span> (</span><br><span class=\"javascript\">\t\t\t\t    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t    &#123;this.state.isToggleOn?&#x27;ON&#x27;:&#x27;OFF&#x27;&#125;</span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\tReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button1</span> /&gt;</span></span>,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;test1&quot;</span>))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>以上例子实现了实时监控切换一个按钮状态。</p>\n<p>在 React 中另一个不同点是你不能通过返回 <code>false</code> 的方式阻止默认行为。你必须显式的使用 <code>preventDefault</code>。</p>\n<h3 id=\"三、条件渲染\"><a href=\"#三、条件渲染\" class=\"headerlink\" title=\"三、条件渲染\"></a>三、条件渲染</h3><p>可以通过以下方法自定义元素。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-comment\">&lt;!-- 上面两个Js文件是有固定的引用先后顺序 --&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//条件渲染</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//用函数定义的方式实现子组件的定义</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">SonDiv</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//若isShow=false,则返回null，即该组件不会渲染，会被隐藏</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">if</span>(!props.isShow)&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">return</span> (</span><br><span class=\"javascript\">\t\t\t    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Son is Show<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t\t)</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//用类的方式实现父组件的定义</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FatherDiv</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> &#123;</span><br><span class=\"javascript\">\t\t\t    <span class=\"hljs-built_in\">super</span>(props)</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.state=&#123;<span class=\"hljs-attr\">isShow</span>:<span class=\"hljs-literal\">true</span>&#125;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleToggleChilk=<span class=\"hljs-built_in\">this</span>.handleToggleChilk.bind(<span class=\"hljs-built_in\">this</span>)</span><br><span class=\"javascript\">\t\t\t\t</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleToggleChilk</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(<span class=\"hljs-function\"><span class=\"hljs-params\">prevState</span>=&gt;</span>(&#123;</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">isShow</span>:!prevState.isShow</span><br><span class=\"javascript\">\t\t\t\t&#125;))</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span> (</span><br><span class=\"javascript\">\t\t\t\t    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SonDiv</span> <span class=\"hljs-attr\">isShow</span>=<span class=\"hljs-string\">&#123;this.state.isShow&#125;</span> /&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.handleToggleChilk&#125;</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t\t\t&#123;this.state.isShow?&#x27;hide&#x27;:&#x27;show&#x27;&#125;</span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\tReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FatherDiv</span> /&gt;</span></span>,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;test1&quot;</span>))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>以上案例实现了一个监控+条件渲染的案例，初始状态为：</p>\n<p><img src=\"/images/react/2021121901.png\"></p>\n<p>点击按钮’hide’，则会隐藏子组件并且按钮内容改为’show’，点击’show’则会回到初始状态即显示子组件。</p>\n","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":"<h3 id=\"一、使用state实现更新React组件数据\"><a href=\"#一、使用state实现更新React组件数据\" class=\"headerlink\" title=\"一、使用state实现更新React组件数据\"></a>一、使用state实现更新React组件数据</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-comment\">&lt;!-- 上面两个Js文件是有固定的引用先后顺序 --&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">// 使用state实现更新React组件数据</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">// 利用class定义自定义组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Clock</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//调用父类构造器</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> &#123;</span><br><span class=\"javascript\">\t\t\t    <span class=\"hljs-built_in\">super</span>(props);</span><br><span class=\"javascript\">\t\t\t    <span class=\"hljs-comment\">//定义state内的数据</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.state=&#123;<span class=\"hljs-attr\">data</span>:<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()&#125;;</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//生命周期函数：挂载完成时，每一秒调用tick函数，即每一秒改变stata内data的数据。</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">componentDidMount</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.timeID=<span class=\"hljs-built_in\">setInterval</span>(</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-built_in\">this</span>.tick(),<span class=\"hljs-number\">1000</span></span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//生命周期函数：即将卸载时</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">componentWillUnmount</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">clearInterval</span>(<span class=\"hljs-built_in\">this</span>.timeID);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t    <span class=\"hljs-function\"><span class=\"hljs-title\">tick</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">data</span>:<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()</span><br><span class=\"javascript\">\t\t\t\t&#125;);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span> (</span><br><span class=\"javascript\">\t\t\t\t    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>hello!!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h5</span>&gt;</span>It is &#123;this.state.data.toLocaleTimeString()&#125; .<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h5</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\tReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Clock</span> /&gt;</span></span>,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;test1&quot;</span>))</span><br><span class=\"javascript\">\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>以上为一个时钟渲染实例，通过state和生命周期的使用来实时完成时钟的运行。</p>\n<p>构造函数是唯一可以给 <code>this.state</code> 赋值的地方，使用 <code>setState()</code>修改state里的数据</p>\n<p>出于性能考虑，React 可能会把多个 <code>setState()</code> 调用合并成一个调用，因为 <code>this.props</code> 和 <code>this.state</code> 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。</p>\n<h3 id=\"二、监听事件\"><a href=\"#二、监听事件\" class=\"headerlink\" title=\"二、监听事件\"></a>二、监听事件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-comment\">&lt;!-- 上面两个Js文件是有固定的引用先后顺序 --&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//监听事件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//实时切换一个按钮的状态</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//定义一个按钮组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Button1</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t    <span class=\"hljs-comment\">//因为设计到React.Component里的一些特性，所以需要构造器继承父类构造器</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> &#123;</span><br><span class=\"javascript\">\t\t\t    <span class=\"hljs-built_in\">super</span>(props);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//state里的数据可以更新修改，相当于Vue里的data</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.state=&#123;</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">isToggleOn</span>:<span class=\"hljs-literal\">true</span>,</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">data1</span>:<span class=\"hljs-string\">&#x27;haha&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t\t</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//为了在该类的方法中调用this.setState来改变state里的数据来实现实时监听，所以，要在构造器里提前将需要的方法绑定this</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleClick=<span class=\"hljs-built_in\">this</span>.handleClick.bind(<span class=\"hljs-built_in\">this</span>)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//该方法来实现实时切换</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//若前面没有绑定this，则该方法里的this指向underfined</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//prevState是state原先的状态</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//这里的=&gt;(&#123;...&#125;)等价于=&gt;&#123;return (&#123;...&#125;)&#125;</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleClick</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(<span class=\"hljs-function\"><span class=\"hljs-params\">prevState</span>=&gt;</span>(&#123;</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">isToggleOn</span>:!prevState.isToggleOn</span><br><span class=\"javascript\">\t\t\t\t&#125;))</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">// 下面的方法显示打印出prevState的数据</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">// handleClick()&#123;</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">// \tthis.setState(prevState=&gt;&#123;</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">// \t\tconsole.log(&#x27;prevState&#x27;,prevState)</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">// \t\treturn (&#123;</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">// \t\t\tisToggleOn:!prevState.isToggleOn</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">// \t\t&#125;)</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">// \t&#125;)</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">// &#125;</span></span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span> (</span><br><span class=\"javascript\">\t\t\t\t    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t    &#123;this.state.isToggleOn?&#x27;ON&#x27;:&#x27;OFF&#x27;&#125;</span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\tReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button1</span> /&gt;</span></span>,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;test1&quot;</span>))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>以上例子实现了实时监控切换一个按钮状态。</p>\n<p>在 React 中另一个不同点是你不能通过返回 <code>false</code> 的方式阻止默认行为。你必须显式的使用 <code>preventDefault</code>。</p>\n<h3 id=\"三、条件渲染\"><a href=\"#三、条件渲染\" class=\"headerlink\" title=\"三、条件渲染\"></a>三、条件渲染</h3><p>可以通过以下方法自定义元素。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-comment\">&lt;!-- 上面两个Js文件是有固定的引用先后顺序 --&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//条件渲染</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//用函数定义的方式实现子组件的定义</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">SonDiv</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//若isShow=false,则返回null，即该组件不会渲染，会被隐藏</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">if</span>(!props.isShow)&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">return</span> (</span><br><span class=\"javascript\">\t\t\t    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Son is Show<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t\t)</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//用类的方式实现父组件的定义</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FatherDiv</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> &#123;</span><br><span class=\"javascript\">\t\t\t    <span class=\"hljs-built_in\">super</span>(props)</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.state=&#123;<span class=\"hljs-attr\">isShow</span>:<span class=\"hljs-literal\">true</span>&#125;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleToggleChilk=<span class=\"hljs-built_in\">this</span>.handleToggleChilk.bind(<span class=\"hljs-built_in\">this</span>)</span><br><span class=\"javascript\">\t\t\t\t</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleToggleChilk</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(<span class=\"hljs-function\"><span class=\"hljs-params\">prevState</span>=&gt;</span>(&#123;</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">isShow</span>:!prevState.isShow</span><br><span class=\"javascript\">\t\t\t\t&#125;))</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span> (</span><br><span class=\"javascript\">\t\t\t\t    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SonDiv</span> <span class=\"hljs-attr\">isShow</span>=<span class=\"hljs-string\">&#123;this.state.isShow&#125;</span> /&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.handleToggleChilk&#125;</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t\t\t&#123;this.state.isShow?&#x27;hide&#x27;:&#x27;show&#x27;&#125;</span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\tReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FatherDiv</span> /&gt;</span></span>,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;test1&quot;</span>))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>以上案例实现了一个监控+条件渲染的案例，初始状态为：</p>\n<p><img src=\"/images/react/2021121901.png\"></p>\n<p>点击按钮’hide’，则会隐藏子组件并且按钮内容改为’show’，点击’show’则会回到初始状态即显示子组件。</p>\n"},{"title":"二零二一年十二月十一日","date":"2021-12-11T14:02:12.000Z","toc":false,"image":"/images/2021121101.png","_content":"\n------\n\n*第一次搭建博客，第一次在博客上写日记。好兴奋啊。此时正听着“歪波音室”。*\n\n------\n\n今天早上又是八点才醒，去图书馆时纠结了一下还是带了一本笔记本，其实主要是纠结带哪本笔记本，想带一本“真正的日记本”，可是以前的每一本“日记本”最后都变成了我的草稿本，现在拾起来自己都嫌弃了。最后只能拿买莎士比亚全集送的一本纯白笔记本，本子里有很多莎士比亚话剧的插画，实在不适合当日记本，这一本最初企图当作摘抄本来用，可是我也没这么勤劳。果然，我依旧没有那么勤劳，它被我带出图书馆的样子和带进来时没有区别，没有增加一个字。\n\n新鲜事物确实有着很大的诱惑力和影响力，我一整天基本都在“沉迷”于搭建这个博客，顺便开了Forest来记录我的学习，说是学习...也有点过意不去，因为这强烈的兴奋感不亚于我玩游戏时的乐趣。当然，最兴奋的还是选背景照片的时候，我看着妮可在《时时刻刻》中的剧照——实在，实在是太美了，我爱她，我爱伍尔夫。\n\n可是搭建这个博客依旧存在很多问题，明天继续探索。希望我能一直在这里写日记吧。今天在写这片日记的时候，我的状态是很好的，好期待明天，好期待以后。\n\n","source":"_posts/二零二一年十二月十一日.md","raw":"---\ntitle: 二零二一年十二月十一日\ndate: 2021-12-11 22:02:12\ntags: 日记\ntoc: false\nimage: /images/2021121101.png\ncategories:\n- 日记\n---\n\n------\n\n*第一次搭建博客，第一次在博客上写日记。好兴奋啊。此时正听着“歪波音室”。*\n\n------\n\n今天早上又是八点才醒，去图书馆时纠结了一下还是带了一本笔记本，其实主要是纠结带哪本笔记本，想带一本“真正的日记本”，可是以前的每一本“日记本”最后都变成了我的草稿本，现在拾起来自己都嫌弃了。最后只能拿买莎士比亚全集送的一本纯白笔记本，本子里有很多莎士比亚话剧的插画，实在不适合当日记本，这一本最初企图当作摘抄本来用，可是我也没这么勤劳。果然，我依旧没有那么勤劳，它被我带出图书馆的样子和带进来时没有区别，没有增加一个字。\n\n新鲜事物确实有着很大的诱惑力和影响力，我一整天基本都在“沉迷”于搭建这个博客，顺便开了Forest来记录我的学习，说是学习...也有点过意不去，因为这强烈的兴奋感不亚于我玩游戏时的乐趣。当然，最兴奋的还是选背景照片的时候，我看着妮可在《时时刻刻》中的剧照——实在，实在是太美了，我爱她，我爱伍尔夫。\n\n可是搭建这个博客依旧存在很多问题，明天继续探索。希望我能一直在这里写日记吧。今天在写这片日记的时候，我的状态是很好的，好期待明天，好期待以后。\n\n","slug":"二零二一年十二月十一日","published":1,"updated":"2021-12-13T00:30:11.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcouokl0009ngtvh7hp8hpj","content":"<hr>\n<p><em>第一次搭建博客，第一次在博客上写日记。好兴奋啊。此时正听着“歪波音室”。</em></p>\n<hr>\n<p>今天早上又是八点才醒，去图书馆时纠结了一下还是带了一本笔记本，其实主要是纠结带哪本笔记本，想带一本“真正的日记本”，可是以前的每一本“日记本”最后都变成了我的草稿本，现在拾起来自己都嫌弃了。最后只能拿买莎士比亚全集送的一本纯白笔记本，本子里有很多莎士比亚话剧的插画，实在不适合当日记本，这一本最初企图当作摘抄本来用，可是我也没这么勤劳。果然，我依旧没有那么勤劳，它被我带出图书馆的样子和带进来时没有区别，没有增加一个字。</p>\n<p>新鲜事物确实有着很大的诱惑力和影响力，我一整天基本都在“沉迷”于搭建这个博客，顺便开了Forest来记录我的学习，说是学习…也有点过意不去，因为这强烈的兴奋感不亚于我玩游戏时的乐趣。当然，最兴奋的还是选背景照片的时候，我看着妮可在《时时刻刻》中的剧照——实在，实在是太美了，我爱她，我爱伍尔夫。</p>\n<p>可是搭建这个博客依旧存在很多问题，明天继续探索。希望我能一直在这里写日记吧。今天在写这片日记的时候，我的状态是很好的，好期待明天，好期待以后。</p>\n","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":"<hr>\n<p><em>第一次搭建博客，第一次在博客上写日记。好兴奋啊。此时正听着“歪波音室”。</em></p>\n<hr>\n<p>今天早上又是八点才醒，去图书馆时纠结了一下还是带了一本笔记本，其实主要是纠结带哪本笔记本，想带一本“真正的日记本”，可是以前的每一本“日记本”最后都变成了我的草稿本，现在拾起来自己都嫌弃了。最后只能拿买莎士比亚全集送的一本纯白笔记本，本子里有很多莎士比亚话剧的插画，实在不适合当日记本，这一本最初企图当作摘抄本来用，可是我也没这么勤劳。果然，我依旧没有那么勤劳，它被我带出图书馆的样子和带进来时没有区别，没有增加一个字。</p>\n<p>新鲜事物确实有着很大的诱惑力和影响力，我一整天基本都在“沉迷”于搭建这个博客，顺便开了Forest来记录我的学习，说是学习…也有点过意不去，因为这强烈的兴奋感不亚于我玩游戏时的乐趣。当然，最兴奋的还是选背景照片的时候，我看着妮可在《时时刻刻》中的剧照——实在，实在是太美了，我爱她，我爱伍尔夫。</p>\n<p>可是搭建这个博客依旧存在很多问题，明天继续探索。希望我能一直在这里写日记吧。今天在写这片日记的时候，我的状态是很好的，好期待明天，好期待以后。</p>\n"},{"title":"二零二一年十二月十七日","date":"2021-12-17T10:43:03.000Z","toc":false,"image":"/images/2021121701.png","_content":"\n\n\n------\n\n*重看《寄生虫》。*\n\n------\n\n喜欢小右的眼睛，好美。\n\n![](/images/2021121701.png)\n\n![](/images/2021121702.png)\n\n![](/images/2021121801.png)\n\n看完后百感交集，想到这次的新冠，那句共存的口号，以及《素食者》这本书。也许以后可以谈谈。","source":"_posts/二零二一年十二月十七日.md","raw":"---\ntitle: 二零二一年十二月十七日\ndate: 2021-12-17 18:43:03\ntags: 日记\ntoc: false\nimage: /images/2021121701.png\ncategories:\n- 日记\n---\n\n\n\n------\n\n*重看《寄生虫》。*\n\n------\n\n喜欢小右的眼睛，好美。\n\n![](/images/2021121701.png)\n\n![](/images/2021121702.png)\n\n![](/images/2021121801.png)\n\n看完后百感交集，想到这次的新冠，那句共存的口号，以及《素食者》这本书。也许以后可以谈谈。","slug":"二零二一年十二月十七日","published":1,"updated":"2021-12-18T13:19:22.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcouokm000bngtvgx710uc6","content":"<hr>\n<p><em>重看《寄生虫》。</em></p>\n<hr>\n<p>喜欢小右的眼睛，好美。</p>\n<p><img src=\"/images/2021121701.png\"></p>\n<p><img src=\"/images/2021121702.png\"></p>\n<p><img src=\"/images/2021121801.png\"></p>\n<p>看完后百感交集，想到这次的新冠，那句共存的口号，以及《素食者》这本书。也许以后可以谈谈。</p>\n","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":"<hr>\n<p><em>重看《寄生虫》。</em></p>\n<hr>\n<p>喜欢小右的眼睛，好美。</p>\n<p><img src=\"/images/2021121701.png\"></p>\n<p><img src=\"/images/2021121702.png\"></p>\n<p><img src=\"/images/2021121801.png\"></p>\n<p>看完后百感交集，想到这次的新冠，那句共存的口号，以及《素食者》这本书。也许以后可以谈谈。</p>\n"},{"title":"二零二一年十二月十三日","date":"2021-12-13T14:21:35.000Z","toc":false,"image":"/images/2021121301.png","_content":"\n\n\n------\n\n*今天凌晨的时候失眠了，因为想到了一些美好的让人亢奋的事情，越想越深入，越来越兴奋，一整晚几乎都没怎么睡着。所以现在很困，纠结了好一会还是决定写日记。*\n\n------\n\n帮助别人是很快乐的事情，被别人帮助也是很快乐的事情。今天被陌生人帮助的时候我心里在想以后也要这样经常帮助别人。\n\n今天被一个穿着白衣服的姐姐像白衣天使一样和我一起握着同一个把手把我的五十斤重的行李箱抬下了三排台阶。她是我完全没有意料到的幸运，我为城市生活中还能遇到这样的好意而感到幸福，被别人帮助时的快乐真的不一样，有一种被在意被关心被爱护的感觉，被陌生人关心在现代社会中变得多么的奢侈。前几天我遇见了那个我帮过她一起搬箱子的同学，我只能假装不认识低头走过，我好怂。嗯说的乱七八糟语无伦次毫无逻辑的，因为我真的很困。\n\n那今天就这样，晚安，明天会是美好的一天，因为明天是“新生活”的开始，新生活从打扫卫生和整理房间开始，我要从我的家出发延展出新生活。\n\n（封面为：挤公交）\n","source":"_posts/二零二一年十二月十三日.md","raw":"---\ntitle: 二零二一年十二月十三日\ndate: 2021-12-13 22:21:35\ntags: 日记\ntoc: false\nimage: /images/2021121301.png\ncategories:\n- 日记\n---\n\n\n\n------\n\n*今天凌晨的时候失眠了，因为想到了一些美好的让人亢奋的事情，越想越深入，越来越兴奋，一整晚几乎都没怎么睡着。所以现在很困，纠结了好一会还是决定写日记。*\n\n------\n\n帮助别人是很快乐的事情，被别人帮助也是很快乐的事情。今天被陌生人帮助的时候我心里在想以后也要这样经常帮助别人。\n\n今天被一个穿着白衣服的姐姐像白衣天使一样和我一起握着同一个把手把我的五十斤重的行李箱抬下了三排台阶。她是我完全没有意料到的幸运，我为城市生活中还能遇到这样的好意而感到幸福，被别人帮助时的快乐真的不一样，有一种被在意被关心被爱护的感觉，被陌生人关心在现代社会中变得多么的奢侈。前几天我遇见了那个我帮过她一起搬箱子的同学，我只能假装不认识低头走过，我好怂。嗯说的乱七八糟语无伦次毫无逻辑的，因为我真的很困。\n\n那今天就这样，晚安，明天会是美好的一天，因为明天是“新生活”的开始，新生活从打扫卫生和整理房间开始，我要从我的家出发延展出新生活。\n\n（封面为：挤公交）\n","slug":"二零二一年十二月十三日","published":1,"updated":"2021-12-13T14:50:32.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcouokp000fngtv8j4jdryf","content":"<hr>\n<p><em>今天凌晨的时候失眠了，因为想到了一些美好的让人亢奋的事情，越想越深入，越来越兴奋，一整晚几乎都没怎么睡着。所以现在很困，纠结了好一会还是决定写日记。</em></p>\n<hr>\n<p>帮助别人是很快乐的事情，被别人帮助也是很快乐的事情。今天被陌生人帮助的时候我心里在想以后也要这样经常帮助别人。</p>\n<p>今天被一个穿着白衣服的姐姐像白衣天使一样和我一起握着同一个把手把我的五十斤重的行李箱抬下了三排台阶。她是我完全没有意料到的幸运，我为城市生活中还能遇到这样的好意而感到幸福，被别人帮助时的快乐真的不一样，有一种被在意被关心被爱护的感觉，被陌生人关心在现代社会中变得多么的奢侈。前几天我遇见了那个我帮过她一起搬箱子的同学，我只能假装不认识低头走过，我好怂。嗯说的乱七八糟语无伦次毫无逻辑的，因为我真的很困。</p>\n<p>那今天就这样，晚安，明天会是美好的一天，因为明天是“新生活”的开始，新生活从打扫卫生和整理房间开始，我要从我的家出发延展出新生活。</p>\n<p>（封面为：挤公交）</p>\n","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":"<hr>\n<p><em>今天凌晨的时候失眠了，因为想到了一些美好的让人亢奋的事情，越想越深入，越来越兴奋，一整晚几乎都没怎么睡着。所以现在很困，纠结了好一会还是决定写日记。</em></p>\n<hr>\n<p>帮助别人是很快乐的事情，被别人帮助也是很快乐的事情。今天被陌生人帮助的时候我心里在想以后也要这样经常帮助别人。</p>\n<p>今天被一个穿着白衣服的姐姐像白衣天使一样和我一起握着同一个把手把我的五十斤重的行李箱抬下了三排台阶。她是我完全没有意料到的幸运，我为城市生活中还能遇到这样的好意而感到幸福，被别人帮助时的快乐真的不一样，有一种被在意被关心被爱护的感觉，被陌生人关心在现代社会中变得多么的奢侈。前几天我遇见了那个我帮过她一起搬箱子的同学，我只能假装不认识低头走过，我好怂。嗯说的乱七八糟语无伦次毫无逻辑的，因为我真的很困。</p>\n<p>那今天就这样，晚安，明天会是美好的一天，因为明天是“新生活”的开始，新生活从打扫卫生和整理房间开始，我要从我的家出发延展出新生活。</p>\n<p>（封面为：挤公交）</p>\n"},{"title":"二零二一年十二月十一日","date":"2021-12-12T15:34:10.000Z","toc":false,"image":"/images/2021121202.png","_content":"\n------\n\n*今天的天气一下子就冷了很多，疫情、冬天、寒冷的阴雨天，有一种说不出来的大自然的震慑力，一种更加轻飘飘的软绵绵的，却也是实实在在的震慑力。*\n\n------\n\n今天搭建好了这个博客，和我昨天构想的不太一样，毕竟用的是别人的theme，已经固定好的框架和hexo有限的功能，对于低技术低经济的我来说，也应该满足了。今天的白天很焦急，焦急很多东西，焦急购买的域名审核怎么还没有通过，焦急糟糕的疫情，焦急开题报告的答辩。下午吃了很多东西，一种没有克制的饮食欲望，吃了零食后吃晚饭吃了晚饭后喝奶茶，其间又是因为太咸了太甜了太干了而大口大口的喝水，腹部一直是饱满的状态，持续到撑涨后感受到非常难受的状态，一种生理和心理上的双重不适感。这就是我经常会陷入的状态，弗洛伊德心理学上的“口腔期”。人总是会沉迷入什么东西，对于我来说，让嘴巴保持充实的状态也是一种沉迷，能做的只有逃避，而不是克服。\n\n今天晚上的语音聊天室里多了一个朋友，新朋友感觉是一个很温柔的女孩，给人的感觉很舒服。这个语音聊天活动是我最重视的活动，仔细想来甚至是我一部分的精神寄托，它支撑着我的很多东西，现实中的社恐加孤独让我很难找到这种交流的替代品，这也是互联网带给我的东西。和大家分享自己，和大家交流我们都感兴趣的东西，去了解别人，去关心别人，和别人建立连接，去影响对方，让别人来影响自己，这些都是很重要的东西。我很珍惜这个活动，当然更加珍惜的是和我一起参与活动的人。\n\n刚刚电脑死机了重启，；两段文字没有保存下来，真糟糕，糟糕的电脑，难道不知道当时的心境是没办法重现的吗？所以现在变得有点想写又有点不想写了，重复会被看作是很无聊和没有意义的事情。\n\n想了一下还是不重复那两段吧，就让它飘散吧，飘散在遗失的电子数据里，飘散在我的记忆仓库里，飘散在偶尔一个梦中的再现中。\n\n我希望我能饱满精神的过好每天，我又有点担心，我有点迷信，害怕说出这样的话就会事与愿违，这种flag，反向flag的背后，这种迷信的背后，是个人意志在命运面前的脆弱和渺小性，是对于天地中更加玄妙的神秘物质或者说自然本身的恐惧感，所以啊，我真怂，我最羡慕最向往的就是那些“不怂”的人，就是那些不怕命运的人，那些有着真正“勇气”的人，真正的勇气，就是不害怕命运，不害怕死亡，无论ta的个人意志本质上是愚蠢的迂腐的还是前卫的正面的，都是让我向往的。\n\n晚安。\n\n（封面是今天早上拍的落叶）","source":"_posts/二零二一年十二月十二日.md","raw":"---\ntitle: 二零二一年十二月十一日\ndate: 2021-12-12 23:34:10\ntags: 日记\ntoc: false\nimage: /images/2021121202.png\ncategories:\n- 日记\n---\n\n------\n\n*今天的天气一下子就冷了很多，疫情、冬天、寒冷的阴雨天，有一种说不出来的大自然的震慑力，一种更加轻飘飘的软绵绵的，却也是实实在在的震慑力。*\n\n------\n\n今天搭建好了这个博客，和我昨天构想的不太一样，毕竟用的是别人的theme，已经固定好的框架和hexo有限的功能，对于低技术低经济的我来说，也应该满足了。今天的白天很焦急，焦急很多东西，焦急购买的域名审核怎么还没有通过，焦急糟糕的疫情，焦急开题报告的答辩。下午吃了很多东西，一种没有克制的饮食欲望，吃了零食后吃晚饭吃了晚饭后喝奶茶，其间又是因为太咸了太甜了太干了而大口大口的喝水，腹部一直是饱满的状态，持续到撑涨后感受到非常难受的状态，一种生理和心理上的双重不适感。这就是我经常会陷入的状态，弗洛伊德心理学上的“口腔期”。人总是会沉迷入什么东西，对于我来说，让嘴巴保持充实的状态也是一种沉迷，能做的只有逃避，而不是克服。\n\n今天晚上的语音聊天室里多了一个朋友，新朋友感觉是一个很温柔的女孩，给人的感觉很舒服。这个语音聊天活动是我最重视的活动，仔细想来甚至是我一部分的精神寄托，它支撑着我的很多东西，现实中的社恐加孤独让我很难找到这种交流的替代品，这也是互联网带给我的东西。和大家分享自己，和大家交流我们都感兴趣的东西，去了解别人，去关心别人，和别人建立连接，去影响对方，让别人来影响自己，这些都是很重要的东西。我很珍惜这个活动，当然更加珍惜的是和我一起参与活动的人。\n\n刚刚电脑死机了重启，；两段文字没有保存下来，真糟糕，糟糕的电脑，难道不知道当时的心境是没办法重现的吗？所以现在变得有点想写又有点不想写了，重复会被看作是很无聊和没有意义的事情。\n\n想了一下还是不重复那两段吧，就让它飘散吧，飘散在遗失的电子数据里，飘散在我的记忆仓库里，飘散在偶尔一个梦中的再现中。\n\n我希望我能饱满精神的过好每天，我又有点担心，我有点迷信，害怕说出这样的话就会事与愿违，这种flag，反向flag的背后，这种迷信的背后，是个人意志在命运面前的脆弱和渺小性，是对于天地中更加玄妙的神秘物质或者说自然本身的恐惧感，所以啊，我真怂，我最羡慕最向往的就是那些“不怂”的人，就是那些不怕命运的人，那些有着真正“勇气”的人，真正的勇气，就是不害怕命运，不害怕死亡，无论ta的个人意志本质上是愚蠢的迂腐的还是前卫的正面的，都是让我向往的。\n\n晚安。\n\n（封面是今天早上拍的落叶）","slug":"二零二一年十二月十二日","published":1,"updated":"2021-12-13T00:29:54.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcouokr000gngtvbkwua0be","content":"<hr>\n<p><em>今天的天气一下子就冷了很多，疫情、冬天、寒冷的阴雨天，有一种说不出来的大自然的震慑力，一种更加轻飘飘的软绵绵的，却也是实实在在的震慑力。</em></p>\n<hr>\n<p>今天搭建好了这个博客，和我昨天构想的不太一样，毕竟用的是别人的theme，已经固定好的框架和hexo有限的功能，对于低技术低经济的我来说，也应该满足了。今天的白天很焦急，焦急很多东西，焦急购买的域名审核怎么还没有通过，焦急糟糕的疫情，焦急开题报告的答辩。下午吃了很多东西，一种没有克制的饮食欲望，吃了零食后吃晚饭吃了晚饭后喝奶茶，其间又是因为太咸了太甜了太干了而大口大口的喝水，腹部一直是饱满的状态，持续到撑涨后感受到非常难受的状态，一种生理和心理上的双重不适感。这就是我经常会陷入的状态，弗洛伊德心理学上的“口腔期”。人总是会沉迷入什么东西，对于我来说，让嘴巴保持充实的状态也是一种沉迷，能做的只有逃避，而不是克服。</p>\n<p>今天晚上的语音聊天室里多了一个朋友，新朋友感觉是一个很温柔的女孩，给人的感觉很舒服。这个语音聊天活动是我最重视的活动，仔细想来甚至是我一部分的精神寄托，它支撑着我的很多东西，现实中的社恐加孤独让我很难找到这种交流的替代品，这也是互联网带给我的东西。和大家分享自己，和大家交流我们都感兴趣的东西，去了解别人，去关心别人，和别人建立连接，去影响对方，让别人来影响自己，这些都是很重要的东西。我很珍惜这个活动，当然更加珍惜的是和我一起参与活动的人。</p>\n<p>刚刚电脑死机了重启，；两段文字没有保存下来，真糟糕，糟糕的电脑，难道不知道当时的心境是没办法重现的吗？所以现在变得有点想写又有点不想写了，重复会被看作是很无聊和没有意义的事情。</p>\n<p>想了一下还是不重复那两段吧，就让它飘散吧，飘散在遗失的电子数据里，飘散在我的记忆仓库里，飘散在偶尔一个梦中的再现中。</p>\n<p>我希望我能饱满精神的过好每天，我又有点担心，我有点迷信，害怕说出这样的话就会事与愿违，这种flag，反向flag的背后，这种迷信的背后，是个人意志在命运面前的脆弱和渺小性，是对于天地中更加玄妙的神秘物质或者说自然本身的恐惧感，所以啊，我真怂，我最羡慕最向往的就是那些“不怂”的人，就是那些不怕命运的人，那些有着真正“勇气”的人，真正的勇气，就是不害怕命运，不害怕死亡，无论ta的个人意志本质上是愚蠢的迂腐的还是前卫的正面的，都是让我向往的。</p>\n<p>晚安。</p>\n<p>（封面是今天早上拍的落叶）</p>\n","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":"<hr>\n<p><em>今天的天气一下子就冷了很多，疫情、冬天、寒冷的阴雨天，有一种说不出来的大自然的震慑力，一种更加轻飘飘的软绵绵的，却也是实实在在的震慑力。</em></p>\n<hr>\n<p>今天搭建好了这个博客，和我昨天构想的不太一样，毕竟用的是别人的theme，已经固定好的框架和hexo有限的功能，对于低技术低经济的我来说，也应该满足了。今天的白天很焦急，焦急很多东西，焦急购买的域名审核怎么还没有通过，焦急糟糕的疫情，焦急开题报告的答辩。下午吃了很多东西，一种没有克制的饮食欲望，吃了零食后吃晚饭吃了晚饭后喝奶茶，其间又是因为太咸了太甜了太干了而大口大口的喝水，腹部一直是饱满的状态，持续到撑涨后感受到非常难受的状态，一种生理和心理上的双重不适感。这就是我经常会陷入的状态，弗洛伊德心理学上的“口腔期”。人总是会沉迷入什么东西，对于我来说，让嘴巴保持充实的状态也是一种沉迷，能做的只有逃避，而不是克服。</p>\n<p>今天晚上的语音聊天室里多了一个朋友，新朋友感觉是一个很温柔的女孩，给人的感觉很舒服。这个语音聊天活动是我最重视的活动，仔细想来甚至是我一部分的精神寄托，它支撑着我的很多东西，现实中的社恐加孤独让我很难找到这种交流的替代品，这也是互联网带给我的东西。和大家分享自己，和大家交流我们都感兴趣的东西，去了解别人，去关心别人，和别人建立连接，去影响对方，让别人来影响自己，这些都是很重要的东西。我很珍惜这个活动，当然更加珍惜的是和我一起参与活动的人。</p>\n<p>刚刚电脑死机了重启，；两段文字没有保存下来，真糟糕，糟糕的电脑，难道不知道当时的心境是没办法重现的吗？所以现在变得有点想写又有点不想写了，重复会被看作是很无聊和没有意义的事情。</p>\n<p>想了一下还是不重复那两段吧，就让它飘散吧，飘散在遗失的电子数据里，飘散在我的记忆仓库里，飘散在偶尔一个梦中的再现中。</p>\n<p>我希望我能饱满精神的过好每天，我又有点担心，我有点迷信，害怕说出这样的话就会事与愿违，这种flag，反向flag的背后，这种迷信的背后，是个人意志在命运面前的脆弱和渺小性，是对于天地中更加玄妙的神秘物质或者说自然本身的恐惧感，所以啊，我真怂，我最羡慕最向往的就是那些“不怂”的人，就是那些不怕命运的人，那些有着真正“勇气”的人，真正的勇气，就是不害怕命运，不害怕死亡，无论ta的个人意志本质上是愚蠢的迂腐的还是前卫的正面的，都是让我向往的。</p>\n<p>晚安。</p>\n<p>（封面是今天早上拍的落叶）</p>\n"},{"title":"二零二一年十二月十八日","date":"2021-12-18T12:11:15.000Z","toc":false,"image":"/images/2021121802.png","_content":"\n\n\n------\n\n*包书。*\n\n------\n\n包杂志的时候抖出了一堆黑乎乎的玉兰花干片，怪丑的，还蛮多的。不知道我以前抱着什么心情收集的，想要留住玉兰花的美好吗？\n\n","source":"_posts/二零二一年十二月十八日.md","raw":"---\ntitle: 二零二一年十二月十八日\ndate: 2021-12-18 20:11:15\ntags: 日记\ntoc: false\nimage: /images/2021121802.png\ncategories:\n- 日记\n---\n\n\n\n------\n\n*包书。*\n\n------\n\n包杂志的时候抖出了一堆黑乎乎的玉兰花干片，怪丑的，还蛮多的。不知道我以前抱着什么心情收集的，想要留住玉兰花的美好吗？\n\n","slug":"二零二一年十二月十八日","published":1,"updated":"2021-12-19T03:24:53.002Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcouoku000kngtv3knr4wv6","content":"<hr>\n<p><em>包书。</em></p>\n<hr>\n<p>包杂志的时候抖出了一堆黑乎乎的玉兰花干片，怪丑的，还蛮多的。不知道我以前抱着什么心情收集的，想要留住玉兰花的美好吗？</p>\n","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":"<hr>\n<p><em>包书。</em></p>\n<hr>\n<p>包杂志的时候抖出了一堆黑乎乎的玉兰花干片，怪丑的，还蛮多的。不知道我以前抱着什么心情收集的，想要留住玉兰花的美好吗？</p>\n"},{"title":"二零二一年十二月十六日","date":"2021-12-16T08:26:15.000Z","toc":false,"image":"/images/2021121601.png","_content":"\n\n\n------\n\n*”开展新生活是一件很困难的事情“，然后我发现，这句话我说早了。*\n\n------\n\n因为前天算自律的，昨天一整天什么都没做，今天也是，今天不仅什么也没做，还几乎什么也没吃。\n\n真的好饿，还好马上就要到晚饭时间了。\n\n村子里的快递寄存点就在我家对面。从我家门口走到寄存点，大概十米不到吧，因为村子里的马路就没有十米宽，可是，这对我来说比去学校取快递还要艰难。因为我家右对角线十米是村子里最大的小卖部，那里的电视机永远外放到最大音量永远有一群人围在那里就算不聊天也要一起默默看电视；我家对面左对角线十米是村子里的菜摊，莫名其妙的即使不是饭点的时间那里也很容易围着一群人，而我家旁边是村子的大礼堂还好现在不是夏天，要不然天天有人在这里跳广场舞。\n\n村子是熟人社会，虽然我和他们不太熟，但是他们和我很熟，那群人无聊的很，只要出现一个稍微面生一点的面孔，他们都会一直盯着看直到认出来为止：”哦！这是XX家女儿啊！这么大了啊！“然后从这句话开始问候你的各种消息。所以一般即使是出去取个快递我都要从楼上拉着窗帘的逢上往偷窥两眼看看下面有没有人，有哪些人，如果人很多，或者是有一个亲戚在那，大概是不回出门的了，这大概也是我今天饿了一天的原因吧。\n\n刚刚还是去取快递了，找快递的时候听到那些人聊天，其中七个奶奶一直盯着我看，我猜她快要认出我来了，模糊的童年印象重她抱过我……我和她对视一眼，装作不在意的转身找东西。\n\n小卖部的老板娘说：”今年去了四个，我家这一个，XXX家一个……“\n\n突然反应过来，她们好像说的是死亡。然后我才发现我家对面那个永远在晒太阳的老奶奶好久没有露面了，今年年初的时候还看见过她。\n\n正对着家门口的是一个小屋子，里面住着一个老奶奶，隔壁就是她儿子的大房子，可是她似乎不愿意搬进去住。她是小卖部的常客，总是在那看电视——毕竟就是她儿子的小卖部嘛，说不定还是从她这里接手的。小时候很不喜欢她，感觉她的眼神阴鸷，每次我去买东西她总是盯着我看，可又一句话也不说。\n\n后来上学了，但总是忘带家门钥匙，忘习惯了有一天就干脆不带了——因为，毕竟是熟人社会，所有人都认识我，所以我可以光明正大地爬自家的窗户，而她就是那个每周五下午看着我爬窗户的人。\n\n有几次看见我爬的困难会非常贴心地把身下那把竹椅递给我说：“踩着这个爬上去！”我当然是拒接的，毕竟踩了人家的凳子还要清理道谢怪麻烦的。\n\n逐渐有一天她变得似乎再也离不开那张竹椅了，她总是沉默地坐在自家的门口，什么话也不说，就算说了什么话也没人听得懂，有时候也会坐我家门口，当太阳找到我家这边的时候。\n\n仔细看看，村子里的那些人都变老了，衰老是一件很沉重的事情，尤其是当你逐渐长大时才意识到它离你越来越近，离你的家人越来越近。\n\n当然拆快递可以是一件很愉快的事。买了400张透明包装袋，只要12元，因为前天清理时看到受潮+沾灰的书而买，然而我发现包装书也是一件很痛苦的事情。以前我看到有人包装这些书是很不屑的，书从书店到自己的手里不就是拆包装的过程，而现在又要包回去，这样仿佛书又不属于自己了。而且我总是怀疑包装好的书到底会不会再次拆包装再次阅读。\n\n![](/images/2021121601.png)\n\n一本一本的包装又是一件很繁琐的事情，除了回忆起有关这本书的回忆之外。包装白居易全集，想当初我是抱着多少热爱和向往买这一套书的，那时非常迷恋白居易，还特意改了一个平台的昵称叫“白乐天的门童”，大概是因为一首《长恨歌》，我背了很久很久的长恨歌，而现在只能记住前面四句，所有人都能记住的前四句。而这一套书也大概永远也不会读了，其实当初把它买来时我也没怎么读过。\n\n所以，每包一本书都是百感交集的，耻辱、自责又无能为力的感觉，每包一本书就更加地沉重，好像是我把它们一本本推进了不见阳光的地下，再也不会相见。这就是 封存 吧。","source":"_posts/二零二一年十二月十六日.md","raw":"---\ntitle: 二零二一年十二月十六日\ndate: 2021-12-16 16:26:15\ntags: 日记\ntoc: false\nimage: /images/2021121601.png\ncategories:\n- 日记\n---\n\n\n\n------\n\n*”开展新生活是一件很困难的事情“，然后我发现，这句话我说早了。*\n\n------\n\n因为前天算自律的，昨天一整天什么都没做，今天也是，今天不仅什么也没做，还几乎什么也没吃。\n\n真的好饿，还好马上就要到晚饭时间了。\n\n村子里的快递寄存点就在我家对面。从我家门口走到寄存点，大概十米不到吧，因为村子里的马路就没有十米宽，可是，这对我来说比去学校取快递还要艰难。因为我家右对角线十米是村子里最大的小卖部，那里的电视机永远外放到最大音量永远有一群人围在那里就算不聊天也要一起默默看电视；我家对面左对角线十米是村子里的菜摊，莫名其妙的即使不是饭点的时间那里也很容易围着一群人，而我家旁边是村子的大礼堂还好现在不是夏天，要不然天天有人在这里跳广场舞。\n\n村子是熟人社会，虽然我和他们不太熟，但是他们和我很熟，那群人无聊的很，只要出现一个稍微面生一点的面孔，他们都会一直盯着看直到认出来为止：”哦！这是XX家女儿啊！这么大了啊！“然后从这句话开始问候你的各种消息。所以一般即使是出去取个快递我都要从楼上拉着窗帘的逢上往偷窥两眼看看下面有没有人，有哪些人，如果人很多，或者是有一个亲戚在那，大概是不回出门的了，这大概也是我今天饿了一天的原因吧。\n\n刚刚还是去取快递了，找快递的时候听到那些人聊天，其中七个奶奶一直盯着我看，我猜她快要认出我来了，模糊的童年印象重她抱过我……我和她对视一眼，装作不在意的转身找东西。\n\n小卖部的老板娘说：”今年去了四个，我家这一个，XXX家一个……“\n\n突然反应过来，她们好像说的是死亡。然后我才发现我家对面那个永远在晒太阳的老奶奶好久没有露面了，今年年初的时候还看见过她。\n\n正对着家门口的是一个小屋子，里面住着一个老奶奶，隔壁就是她儿子的大房子，可是她似乎不愿意搬进去住。她是小卖部的常客，总是在那看电视——毕竟就是她儿子的小卖部嘛，说不定还是从她这里接手的。小时候很不喜欢她，感觉她的眼神阴鸷，每次我去买东西她总是盯着我看，可又一句话也不说。\n\n后来上学了，但总是忘带家门钥匙，忘习惯了有一天就干脆不带了——因为，毕竟是熟人社会，所有人都认识我，所以我可以光明正大地爬自家的窗户，而她就是那个每周五下午看着我爬窗户的人。\n\n有几次看见我爬的困难会非常贴心地把身下那把竹椅递给我说：“踩着这个爬上去！”我当然是拒接的，毕竟踩了人家的凳子还要清理道谢怪麻烦的。\n\n逐渐有一天她变得似乎再也离不开那张竹椅了，她总是沉默地坐在自家的门口，什么话也不说，就算说了什么话也没人听得懂，有时候也会坐我家门口，当太阳找到我家这边的时候。\n\n仔细看看，村子里的那些人都变老了，衰老是一件很沉重的事情，尤其是当你逐渐长大时才意识到它离你越来越近，离你的家人越来越近。\n\n当然拆快递可以是一件很愉快的事。买了400张透明包装袋，只要12元，因为前天清理时看到受潮+沾灰的书而买，然而我发现包装书也是一件很痛苦的事情。以前我看到有人包装这些书是很不屑的，书从书店到自己的手里不就是拆包装的过程，而现在又要包回去，这样仿佛书又不属于自己了。而且我总是怀疑包装好的书到底会不会再次拆包装再次阅读。\n\n![](/images/2021121601.png)\n\n一本一本的包装又是一件很繁琐的事情，除了回忆起有关这本书的回忆之外。包装白居易全集，想当初我是抱着多少热爱和向往买这一套书的，那时非常迷恋白居易，还特意改了一个平台的昵称叫“白乐天的门童”，大概是因为一首《长恨歌》，我背了很久很久的长恨歌，而现在只能记住前面四句，所有人都能记住的前四句。而这一套书也大概永远也不会读了，其实当初把它买来时我也没怎么读过。\n\n所以，每包一本书都是百感交集的，耻辱、自责又无能为力的感觉，每包一本书就更加地沉重，好像是我把它们一本本推进了不见阳光的地下，再也不会相见。这就是 封存 吧。","slug":"二零二一年十二月十六日","published":1,"updated":"2021-12-17T10:43:26.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcouokv000mngtv1qrq1igx","content":"<hr>\n<p><em>”开展新生活是一件很困难的事情“，然后我发现，这句话我说早了。</em></p>\n<hr>\n<p>因为前天算自律的，昨天一整天什么都没做，今天也是，今天不仅什么也没做，还几乎什么也没吃。</p>\n<p>真的好饿，还好马上就要到晚饭时间了。</p>\n<p>村子里的快递寄存点就在我家对面。从我家门口走到寄存点，大概十米不到吧，因为村子里的马路就没有十米宽，可是，这对我来说比去学校取快递还要艰难。因为我家右对角线十米是村子里最大的小卖部，那里的电视机永远外放到最大音量永远有一群人围在那里就算不聊天也要一起默默看电视；我家对面左对角线十米是村子里的菜摊，莫名其妙的即使不是饭点的时间那里也很容易围着一群人，而我家旁边是村子的大礼堂还好现在不是夏天，要不然天天有人在这里跳广场舞。</p>\n<p>村子是熟人社会，虽然我和他们不太熟，但是他们和我很熟，那群人无聊的很，只要出现一个稍微面生一点的面孔，他们都会一直盯着看直到认出来为止：”哦！这是XX家女儿啊！这么大了啊！“然后从这句话开始问候你的各种消息。所以一般即使是出去取个快递我都要从楼上拉着窗帘的逢上往偷窥两眼看看下面有没有人，有哪些人，如果人很多，或者是有一个亲戚在那，大概是不回出门的了，这大概也是我今天饿了一天的原因吧。</p>\n<p>刚刚还是去取快递了，找快递的时候听到那些人聊天，其中七个奶奶一直盯着我看，我猜她快要认出我来了，模糊的童年印象重她抱过我……我和她对视一眼，装作不在意的转身找东西。</p>\n<p>小卖部的老板娘说：”今年去了四个，我家这一个，XXX家一个……“</p>\n<p>突然反应过来，她们好像说的是死亡。然后我才发现我家对面那个永远在晒太阳的老奶奶好久没有露面了，今年年初的时候还看见过她。</p>\n<p>正对着家门口的是一个小屋子，里面住着一个老奶奶，隔壁就是她儿子的大房子，可是她似乎不愿意搬进去住。她是小卖部的常客，总是在那看电视——毕竟就是她儿子的小卖部嘛，说不定还是从她这里接手的。小时候很不喜欢她，感觉她的眼神阴鸷，每次我去买东西她总是盯着我看，可又一句话也不说。</p>\n<p>后来上学了，但总是忘带家门钥匙，忘习惯了有一天就干脆不带了——因为，毕竟是熟人社会，所有人都认识我，所以我可以光明正大地爬自家的窗户，而她就是那个每周五下午看着我爬窗户的人。</p>\n<p>有几次看见我爬的困难会非常贴心地把身下那把竹椅递给我说：“踩着这个爬上去！”我当然是拒接的，毕竟踩了人家的凳子还要清理道谢怪麻烦的。</p>\n<p>逐渐有一天她变得似乎再也离不开那张竹椅了，她总是沉默地坐在自家的门口，什么话也不说，就算说了什么话也没人听得懂，有时候也会坐我家门口，当太阳找到我家这边的时候。</p>\n<p>仔细看看，村子里的那些人都变老了，衰老是一件很沉重的事情，尤其是当你逐渐长大时才意识到它离你越来越近，离你的家人越来越近。</p>\n<p>当然拆快递可以是一件很愉快的事。买了400张透明包装袋，只要12元，因为前天清理时看到受潮+沾灰的书而买，然而我发现包装书也是一件很痛苦的事情。以前我看到有人包装这些书是很不屑的，书从书店到自己的手里不就是拆包装的过程，而现在又要包回去，这样仿佛书又不属于自己了。而且我总是怀疑包装好的书到底会不会再次拆包装再次阅读。</p>\n<p><img src=\"/images/2021121601.png\"></p>\n<p>一本一本的包装又是一件很繁琐的事情，除了回忆起有关这本书的回忆之外。包装白居易全集，想当初我是抱着多少热爱和向往买这一套书的，那时非常迷恋白居易，还特意改了一个平台的昵称叫“白乐天的门童”，大概是因为一首《长恨歌》，我背了很久很久的长恨歌，而现在只能记住前面四句，所有人都能记住的前四句。而这一套书也大概永远也不会读了，其实当初把它买来时我也没怎么读过。</p>\n<p>所以，每包一本书都是百感交集的，耻辱、自责又无能为力的感觉，每包一本书就更加地沉重，好像是我把它们一本本推进了不见阳光的地下，再也不会相见。这就是 封存 吧。</p>\n","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":"<hr>\n<p><em>”开展新生活是一件很困难的事情“，然后我发现，这句话我说早了。</em></p>\n<hr>\n<p>因为前天算自律的，昨天一整天什么都没做，今天也是，今天不仅什么也没做，还几乎什么也没吃。</p>\n<p>真的好饿，还好马上就要到晚饭时间了。</p>\n<p>村子里的快递寄存点就在我家对面。从我家门口走到寄存点，大概十米不到吧，因为村子里的马路就没有十米宽，可是，这对我来说比去学校取快递还要艰难。因为我家右对角线十米是村子里最大的小卖部，那里的电视机永远外放到最大音量永远有一群人围在那里就算不聊天也要一起默默看电视；我家对面左对角线十米是村子里的菜摊，莫名其妙的即使不是饭点的时间那里也很容易围着一群人，而我家旁边是村子的大礼堂还好现在不是夏天，要不然天天有人在这里跳广场舞。</p>\n<p>村子是熟人社会，虽然我和他们不太熟，但是他们和我很熟，那群人无聊的很，只要出现一个稍微面生一点的面孔，他们都会一直盯着看直到认出来为止：”哦！这是XX家女儿啊！这么大了啊！“然后从这句话开始问候你的各种消息。所以一般即使是出去取个快递我都要从楼上拉着窗帘的逢上往偷窥两眼看看下面有没有人，有哪些人，如果人很多，或者是有一个亲戚在那，大概是不回出门的了，这大概也是我今天饿了一天的原因吧。</p>\n<p>刚刚还是去取快递了，找快递的时候听到那些人聊天，其中七个奶奶一直盯着我看，我猜她快要认出我来了，模糊的童年印象重她抱过我……我和她对视一眼，装作不在意的转身找东西。</p>\n<p>小卖部的老板娘说：”今年去了四个，我家这一个，XXX家一个……“</p>\n<p>突然反应过来，她们好像说的是死亡。然后我才发现我家对面那个永远在晒太阳的老奶奶好久没有露面了，今年年初的时候还看见过她。</p>\n<p>正对着家门口的是一个小屋子，里面住着一个老奶奶，隔壁就是她儿子的大房子，可是她似乎不愿意搬进去住。她是小卖部的常客，总是在那看电视——毕竟就是她儿子的小卖部嘛，说不定还是从她这里接手的。小时候很不喜欢她，感觉她的眼神阴鸷，每次我去买东西她总是盯着我看，可又一句话也不说。</p>\n<p>后来上学了，但总是忘带家门钥匙，忘习惯了有一天就干脆不带了——因为，毕竟是熟人社会，所有人都认识我，所以我可以光明正大地爬自家的窗户，而她就是那个每周五下午看着我爬窗户的人。</p>\n<p>有几次看见我爬的困难会非常贴心地把身下那把竹椅递给我说：“踩着这个爬上去！”我当然是拒接的，毕竟踩了人家的凳子还要清理道谢怪麻烦的。</p>\n<p>逐渐有一天她变得似乎再也离不开那张竹椅了，她总是沉默地坐在自家的门口，什么话也不说，就算说了什么话也没人听得懂，有时候也会坐我家门口，当太阳找到我家这边的时候。</p>\n<p>仔细看看，村子里的那些人都变老了，衰老是一件很沉重的事情，尤其是当你逐渐长大时才意识到它离你越来越近，离你的家人越来越近。</p>\n<p>当然拆快递可以是一件很愉快的事。买了400张透明包装袋，只要12元，因为前天清理时看到受潮+沾灰的书而买，然而我发现包装书也是一件很痛苦的事情。以前我看到有人包装这些书是很不屑的，书从书店到自己的手里不就是拆包装的过程，而现在又要包回去，这样仿佛书又不属于自己了。而且我总是怀疑包装好的书到底会不会再次拆包装再次阅读。</p>\n<p><img src=\"/images/2021121601.png\"></p>\n<p>一本一本的包装又是一件很繁琐的事情，除了回忆起有关这本书的回忆之外。包装白居易全集，想当初我是抱着多少热爱和向往买这一套书的，那时非常迷恋白居易，还特意改了一个平台的昵称叫“白乐天的门童”，大概是因为一首《长恨歌》，我背了很久很久的长恨歌，而现在只能记住前面四句，所有人都能记住的前四句。而这一套书也大概永远也不会读了，其实当初把它买来时我也没怎么读过。</p>\n<p>所以，每包一本书都是百感交集的，耻辱、自责又无能为力的感觉，每包一本书就更加地沉重，好像是我把它们一本本推进了不见阳光的地下，再也不会相见。这就是 封存 吧。</p>\n"},{"title":"二零二一年十二月十四日","date":"2021-12-14T15:41:35.000Z","toc":false,"image":"/images/2021121405.png","_content":"\n\n\n------\n\n*开展“新生活”是一件很困难的事情。*\n\n------\n\n![](/images/2021121401.png)\n\n整理书架，先拿出从学校带回的书。\n\n![](/images/2021121402.png)\n\n发现了一个小发绳，是妹妹的发绳。\n\n![](/images/2021121403.png)\n\n书上全都是灰尘，翻开最厚的那本，书页全都泛黄了。毛姆的《人性的枷锁》，高三的课间和午间休息时拿出来读，现在想想真佩服那时的自己，上了大学反而没有耐性读这么厚的书了。\n\n![](/images/2021121404.png)\n\n书架坏了。垃圾书架，便宜没好货。\n\n![](/images/2021121405.png)\n\n晚上用新买来的幕布看电影，看《新桥恋人》，好喜欢好喜欢这部电影，想为Alex新建一个相册。\n\n\n\n","source":"_posts/二零二一年十二月十四日.md","raw":"---\ntitle: 二零二一年十二月十四日\ndate: 2021-12-14 23:41:35\ntags: 日记\ntoc: false\nimage: /images/2021121405.png\ncategories:\n- 日记\n---\n\n\n\n------\n\n*开展“新生活”是一件很困难的事情。*\n\n------\n\n![](/images/2021121401.png)\n\n整理书架，先拿出从学校带回的书。\n\n![](/images/2021121402.png)\n\n发现了一个小发绳，是妹妹的发绳。\n\n![](/images/2021121403.png)\n\n书上全都是灰尘，翻开最厚的那本，书页全都泛黄了。毛姆的《人性的枷锁》，高三的课间和午间休息时拿出来读，现在想想真佩服那时的自己，上了大学反而没有耐性读这么厚的书了。\n\n![](/images/2021121404.png)\n\n书架坏了。垃圾书架，便宜没好货。\n\n![](/images/2021121405.png)\n\n晚上用新买来的幕布看电影，看《新桥恋人》，好喜欢好喜欢这部电影，想为Alex新建一个相册。\n\n\n\n","slug":"二零二一年十二月十四日","published":1,"updated":"2021-12-16T08:26:00.432Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcouol6001lngtveknt68sf","content":"<hr>\n<p><em>开展“新生活”是一件很困难的事情。</em></p>\n<hr>\n<p><img src=\"/images/2021121401.png\"></p>\n<p>整理书架，先拿出从学校带回的书。</p>\n<p><img src=\"/images/2021121402.png\"></p>\n<p>发现了一个小发绳，是妹妹的发绳。</p>\n<p><img src=\"/images/2021121403.png\"></p>\n<p>书上全都是灰尘，翻开最厚的那本，书页全都泛黄了。毛姆的《人性的枷锁》，高三的课间和午间休息时拿出来读，现在想想真佩服那时的自己，上了大学反而没有耐性读这么厚的书了。</p>\n<p><img src=\"/images/2021121404.png\"></p>\n<p>书架坏了。垃圾书架，便宜没好货。</p>\n<p><img src=\"/images/2021121405.png\"></p>\n<p>晚上用新买来的幕布看电影，看《新桥恋人》，好喜欢好喜欢这部电影，想为Alex新建一个相册。</p>\n","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":"<hr>\n<p><em>开展“新生活”是一件很困难的事情。</em></p>\n<hr>\n<p><img src=\"/images/2021121401.png\"></p>\n<p>整理书架，先拿出从学校带回的书。</p>\n<p><img src=\"/images/2021121402.png\"></p>\n<p>发现了一个小发绳，是妹妹的发绳。</p>\n<p><img src=\"/images/2021121403.png\"></p>\n<p>书上全都是灰尘，翻开最厚的那本，书页全都泛黄了。毛姆的《人性的枷锁》，高三的课间和午间休息时拿出来读，现在想想真佩服那时的自己，上了大学反而没有耐性读这么厚的书了。</p>\n<p><img src=\"/images/2021121404.png\"></p>\n<p>书架坏了。垃圾书架，便宜没好货。</p>\n<p><img src=\"/images/2021121405.png\"></p>\n<p>晚上用新买来的幕布看电影，看《新桥恋人》，好喜欢好喜欢这部电影，想为Alex新建一个相册。</p>\n"},{"title":"使用hexo搭建博客时遇到的问题","date":"2021-12-11T05:40:40.000Z","_content":"\n主要是deploy部署问题的坑\n\n### 1.需要输入Github账号和密码，输入之后依旧部署失败\n\n问题描述：在输入命令 `hexo d` 来部署时提示需要输入Github的账号和密码进行验证，输入后提示登陆验证失败。\n\n解决方法：网上查询后得知是2021年8月13日之后github不支持输入账号密码登陆而要求输入token登陆，在参考了这篇博客资料后成功解决了该问题，直接在需要输入密码的地方输入token。\n\nhttps://blog.csdn.net/yjw123456/article/details/119696726#commentBox\n\n### 2.解决上面的问题，但是出现openSSL问题\n\n问题描述：错误信息：`OpenSSL SSL_read: Connection was reset, errno 10054`\n\n解决方法：删掉项目根目录下的 `.deploy_git` 文件，重新执行命令 `hexo d` ,参考以下这篇博客：\n\nhttps://www.cnblogs.com/tenderwx/p/5783432.html\n\n","source":"_posts/搭建hexo博客时出现的问题.md","raw":"---\ntitle: 使用hexo搭建博客时遇到的问题\ndate: 2021-12-11 13:40:40\ntags: [hexo, 学习]\ncategories:\n- 博客\n---\n\n主要是deploy部署问题的坑\n\n### 1.需要输入Github账号和密码，输入之后依旧部署失败\n\n问题描述：在输入命令 `hexo d` 来部署时提示需要输入Github的账号和密码进行验证，输入后提示登陆验证失败。\n\n解决方法：网上查询后得知是2021年8月13日之后github不支持输入账号密码登陆而要求输入token登陆，在参考了这篇博客资料后成功解决了该问题，直接在需要输入密码的地方输入token。\n\nhttps://blog.csdn.net/yjw123456/article/details/119696726#commentBox\n\n### 2.解决上面的问题，但是出现openSSL问题\n\n问题描述：错误信息：`OpenSSL SSL_read: Connection was reset, errno 10054`\n\n解决方法：删掉项目根目录下的 `.deploy_git` 文件，重新执行命令 `hexo d` ,参考以下这篇博客：\n\nhttps://www.cnblogs.com/tenderwx/p/5783432.html\n\n","slug":"搭建hexo博客时出现的问题","published":1,"updated":"2021-12-12T05:47:14.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcouol6001mngtve7300321","content":"<p>主要是deploy部署问题的坑</p>\n<h3 id=\"1-需要输入Github账号和密码，输入之后依旧部署失败\"><a href=\"#1-需要输入Github账号和密码，输入之后依旧部署失败\" class=\"headerlink\" title=\"1.需要输入Github账号和密码，输入之后依旧部署失败\"></a>1.需要输入Github账号和密码，输入之后依旧部署失败</h3><p>问题描述：在输入命令 <code>hexo d</code> 来部署时提示需要输入Github的账号和密码进行验证，输入后提示登陆验证失败。</p>\n<p>解决方法：网上查询后得知是2021年8月13日之后github不支持输入账号密码登陆而要求输入token登陆，在参考了这篇博客资料后成功解决了该问题，直接在需要输入密码的地方输入token。</p>\n<p><a href=\"https://blog.csdn.net/yjw123456/article/details/119696726#commentBox\">https://blog.csdn.net/yjw123456/article/details/119696726#commentBox</a></p>\n<h3 id=\"2-解决上面的问题，但是出现openSSL问题\"><a href=\"#2-解决上面的问题，但是出现openSSL问题\" class=\"headerlink\" title=\"2.解决上面的问题，但是出现openSSL问题\"></a>2.解决上面的问题，但是出现openSSL问题</h3><p>问题描述：错误信息：<code>OpenSSL SSL_read: Connection was reset, errno 10054</code></p>\n<p>解决方法：删掉项目根目录下的 <code>.deploy_git</code> 文件，重新执行命令 <code>hexo d</code> ,参考以下这篇博客：</p>\n<p><a href=\"https://www.cnblogs.com/tenderwx/p/5783432.html\">https://www.cnblogs.com/tenderwx/p/5783432.html</a></p>\n","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":"<p>主要是deploy部署问题的坑</p>\n<h3 id=\"1-需要输入Github账号和密码，输入之后依旧部署失败\"><a href=\"#1-需要输入Github账号和密码，输入之后依旧部署失败\" class=\"headerlink\" title=\"1.需要输入Github账号和密码，输入之后依旧部署失败\"></a>1.需要输入Github账号和密码，输入之后依旧部署失败</h3><p>问题描述：在输入命令 <code>hexo d</code> 来部署时提示需要输入Github的账号和密码进行验证，输入后提示登陆验证失败。</p>\n<p>解决方法：网上查询后得知是2021年8月13日之后github不支持输入账号密码登陆而要求输入token登陆，在参考了这篇博客资料后成功解决了该问题，直接在需要输入密码的地方输入token。</p>\n<p><a href=\"https://blog.csdn.net/yjw123456/article/details/119696726#commentBox\">https://blog.csdn.net/yjw123456/article/details/119696726#commentBox</a></p>\n<h3 id=\"2-解决上面的问题，但是出现openSSL问题\"><a href=\"#2-解决上面的问题，但是出现openSSL问题\" class=\"headerlink\" title=\"2.解决上面的问题，但是出现openSSL问题\"></a>2.解决上面的问题，但是出现openSSL问题</h3><p>问题描述：错误信息：<code>OpenSSL SSL_read: Connection was reset, errno 10054</code></p>\n<p>解决方法：删掉项目根目录下的 <code>.deploy_git</code> 文件，重新执行命令 <code>hexo d</code> ,参考以下这篇博客：</p>\n<p><a href=\"https://www.cnblogs.com/tenderwx/p/5783432.html\">https://www.cnblogs.com/tenderwx/p/5783432.html</a></p>\n"},{"title":"React的状态提升&组合VS继承","date":"2021-12-19T05:49:01.000Z","_content":"\n### 一、状态提升\n\n通常，多个组件需要反应同一个数据变化时，建议使用状态提升，即共享状态提升到最近的父组件中\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//通过map的方式渲染列表\n\t\t\n\t\tfunction List(props){\n\t\t\t//获取列表参数\n\t\t\tconst numbers=props.numbers;\n\t\t\t//利用map进行渲染\n\t\t\tconst listItem=numbers.map((number=>\n\t\t\t<li>{number}</li>));\n\t\t\t\n\t\t\treturn (\n\t\t\t  <ul>{listItem}</ul>\n\t\t\t)\n\t\t}\n\t\t\n\t\tconst numbers=[1,2,3,4,5];\n\t\tReactDOM.render(\n\t\t<List numbers={numbers} />,\n\t\tdocument.getElementById('test1'))\n\n\t\t</script>\n</html>\n\n```\n\n运行以上代码，发现已成功渲染列表，但是在控制台获得警告如下：\n\n![](/images/react/2021121903.png)\n\n提示对于列表的每一个元素都需要key关键词，给每一列添加key:`<li key={number.toString()}>{number}</li>));`，key作为列表中每个元素的唯一标识符，是有优化性能的作用。对于应该在哪里设置元素的key，一个好的经验法则是：在 `map()` 方法中的元素需要设置 key 属性。\n\n以上情况可以也通过以下方法实现\n\n```jsx\nfuntion ListItem(props){\n\t\t\treturn <li>{props.value}</li>\n}\n\t\t\nfunction List2(props){\n\tconst numbers=props.numbers;\n\treturn (\n\t\t <ul>\n\t\t\t{numbers.map((number=>\n\t\t\t<ListItem key={number.toString()} value={number} />\n\t\t\t))}\n\t\t</ul>\n\t)\n}\n```\n\n\n\n### 二、表单\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//表单的运用\n\t\t\n\t\t//通过类自定义的内有方法来更方便迅捷地操作表单\n\t\t\n\t\t//自定义表单组件\n\t\tclass NameForm extends React.Component{\n\t\t\tconstructor(props){\n\t\t\t\tsuper(props);\n\t\t\t\t//定义可更改的变量，即表单输入元素\n\t\t\t\tthis.state={value:''};\n\t\t\t\t//在具体方法中绑定this来实现对state的改变。\n\t\t\t\tthis.handleChange=this.handleChange.bind(this);\n\t\t\t\tthis.handleSubmit=this.handleSubmit.bind(this);\n\t\t\t}\n\t\t\t\n\t\t\thandleChange(event){\n\t\t\t\tthis.setState({value:event.target.value});\n\t\t\t}\n\t\t\thandleSubmit(event){\n\t\t\t\t//提交前显示名字\n\t\t\t\talert('提交的名字：'+this.state.value);\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\trender(){\n\t\t\t\treturn(\n\t\t\t\t  <form onSubmit={this.handleSubmit}>\n\t\t\t\t    <label>\n\t\t\t\t\t  名字:\n\t\t\t\t\t  <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n\t\t\t\t\t </label>\n\t\t\t\t\t  <button type=\"submit\">提交</button>\n\t\t\t\t\t</form>  \n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tReactDOM.render(<NameForm />,document.getElementById('test1'))\n\n\t\t</script>\n</html>\n\n```\n\n以上例子实现了一个自定义表单的应用。\n\n注意：在Html中`<textarea>` 组件直接通过子元素定义其文本，而在React中通过属性value来确定其文本。针对`<select>`组件React 并不会使用 `selected` 属性，而是在根 `select` 标签上使用 `value` 属性。这在受控组件中更便捷，因为您只需要在根标签中更新它。\n\n具体关于textarea 和select在React里的具体操作如下所示：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//表单的运用\n\t\t\n\t\t//通过类自定义的内有方法来更方便迅捷地操作表单\n\t\t\n\t\t//自定义表单组件\n\t\tclass NameForm extends React.Component{\n\t\t\tconstructor(props){\n\t\t\t\tsuper(props);\n\t\t\t\t//定义可更改的变量，即表单输入元素\n\t\t\t\tthis.state={\n\t\t\t\t\tvalue:'',\n\t\t\t\t\ttextValue:'',\n\t\t\t\t\tselected:'aa',\n\t\t\t\t};\n\t\t\t\t//在具体方法中绑定this来实现对state的改变。\n\t\t\t\tthis.handleChange=this.handleChange.bind(this);\n\t\t\t\tthis.handleSubmit=this.handleSubmit.bind(this);\n\t\t\t\tthis.handleChangeSelect=this.handleChangeSelect.bind(this);\n\t\t\t\tthis.handleChangeTextarea=this.handleChangeTextarea.bind(this);\n\t\t\t}\n\t\t\t\n\t\t\thandleChange(event){\n\t\t\t\tthis.setState({value:event.target.value});\n\t\t\t}\n\t\t\thandleSubmit(event){\n\t\t\t\t//提交前显示名字\n\t\t\t\talert('提交的名字：'+this.state.value);\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\thandleChangeTextarea(event){\n\t\t\t\tthis.setState({textValue:event.target.value})\n\t\t\t}\n\t\t\thandleChangeSelect(event){\n\t\t\t\tconsole.log('event',event)\n\t\t\t\tthis.setState({selected:event.target.value});\n\t\t\t}\n\t\t\trender(){\n\t\t\t\treturn(\n\t\t\t\t  <form onSubmit={this.handleSubmit}>\n\t\t\t\t    <label>\n\t\t\t\t\t  名字:\n\t\t\t\t\t  <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n\t\t\t\t\t </label>\n\t\t\t\t\t <label>\n\t\t\t\t\t\t 内容：\n\t\t\t\t\t\t <textarea  value={this.state.textValue} onChange={this.handleChangeTextarea}/>\n\t\t\t\t\t </label>\n\t\t\t\t\t <label>\n\t\t\t\t\t \t选择：\n\t\t\t\t\t \t<select value={this.state.selected} onChange={this.handleChangeSelect} >\n\t\t\t\t\t \t    <option value='aa'>aa</ option>\n\t\t\t\t\t \t\t<option value='bb'>bb</ option>\n\t\t\t\t\t \t\t<option value='cc'>cc</ option>\n\t\t\t\t\t \t</select>\n\t\t\t\t\t </label>\n\t\t\t\t\t  <button type=\"submit\">提交</button>\n\t\t\t\t\t</form>  \n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tReactDOM.render(<NameForm />,document.getElementById('test1'))\n\n\t\t</script>\n</html>\n\n```\n\n以上的形式在一个表单中调用了多个onChange，也可以只调用同一个onChange函数同时监听并改变多个数据，可以给每个元素添加 `name` 属性，并让处理函数根据 `event.target.name` 的值选择要执行的操作。具体代码如下所示：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//表单的运用\n\t\t\n\t\t//通过类自定义的内有方法来更方便迅捷地操作表单\n\t\t\n\t\t//自定义表单组件\n\t\tclass NameForm extends React.Component{\n\t\t\tconstructor(props){\n\t\t\t\tsuper(props);\n\t\t\t\t//定义可更改的变量，即表单输入元素\n\t\t\t\tthis.state={\n\t\t\t\t\tnameValue:'',\n\t\t\t\t\ttextValue:'',\n\t\t\t\t\tselected:'aa',\n\t\t\t\t};\n\t\t\t\t//在具体方法中绑定this来实现对state的改变。\n\t\t\t\tthis.handleChange=this.handleChange.bind(this);\n\t\t\t\tthis.handleSubmit=this.handleSubmit.bind(this);\n\t\t\t}\n\t\t\t\n\t\t\thandleChange(event){\n\t\t\t\tconst value=event.target.value;\n\t\t\t\tconst name=event.target.name;\n\t\t\t\tthis.setState({\n\t\t\t\t\t[name]:value\n\t\t\t\t})\n\t\t\t}\n\t\t\thandleSubmit(event){\n\t\t\t\t//提交前显示名字\n\t\t\t\talert('提交的名字：'+this.state.value);\n\t\t\t\tconsole.log('state',this.state)\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\trender(){\n\t\t\t\treturn(\n\t\t\t\t  <form onSubmit={this.handleSubmit}>\n\t\t\t\t    <label>\n\t\t\t\t\t  名字:\n\t\t\t\t\t  <input name=\"nameValue\" type=\"text\" value={this.state.value} onChange={this.handleChange} />\n\t\t\t\t\t </label>\n\t\t\t\t\t <label>\n\t\t\t\t\t\t 内容：\n\t\t\t\t\t\t <textarea name=\"textValue\"  value={this.state.textValue} onChange={this.handleChange}/>\n\t\t\t\t\t </label>\n\t\t\t\t\t <label>\n\t\t\t\t\t \t选择：\n\t\t\t\t\t \t<select name=\"selected\" value={this.state.selected} onChange={this.handleChange} >\n\t\t\t\t\t \t    <option value='aa'>aa</ option>\n\t\t\t\t\t \t\t<option value='bb'>bb</ option>\n\t\t\t\t\t \t\t<option value='cc'>cc</ option>\n\t\t\t\t\t \t</select>\n\t\t\t\t\t </label>\n\t\t\t\t\t  <button type=\"submit\">提交</button>\n\t\t\t\t\t</form>  \n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tReactDOM.render(<NameForm />,document.getElementById('test1'))\n\n\t\t</script>\n</html>\n\n```\n\n","source":"_posts/React学习四.md","raw":"---\ntitle: React的状态提升&组合VS继承\ndate: 2021-12-19 13:49:01\ntags: [React, 学习]\ncategories:\n- 博客\n---\n\n### 一、状态提升\n\n通常，多个组件需要反应同一个数据变化时，建议使用状态提升，即共享状态提升到最近的父组件中\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//通过map的方式渲染列表\n\t\t\n\t\tfunction List(props){\n\t\t\t//获取列表参数\n\t\t\tconst numbers=props.numbers;\n\t\t\t//利用map进行渲染\n\t\t\tconst listItem=numbers.map((number=>\n\t\t\t<li>{number}</li>));\n\t\t\t\n\t\t\treturn (\n\t\t\t  <ul>{listItem}</ul>\n\t\t\t)\n\t\t}\n\t\t\n\t\tconst numbers=[1,2,3,4,5];\n\t\tReactDOM.render(\n\t\t<List numbers={numbers} />,\n\t\tdocument.getElementById('test1'))\n\n\t\t</script>\n</html>\n\n```\n\n运行以上代码，发现已成功渲染列表，但是在控制台获得警告如下：\n\n![](/images/react/2021121903.png)\n\n提示对于列表的每一个元素都需要key关键词，给每一列添加key:`<li key={number.toString()}>{number}</li>));`，key作为列表中每个元素的唯一标识符，是有优化性能的作用。对于应该在哪里设置元素的key，一个好的经验法则是：在 `map()` 方法中的元素需要设置 key 属性。\n\n以上情况可以也通过以下方法实现\n\n```jsx\nfuntion ListItem(props){\n\t\t\treturn <li>{props.value}</li>\n}\n\t\t\nfunction List2(props){\n\tconst numbers=props.numbers;\n\treturn (\n\t\t <ul>\n\t\t\t{numbers.map((number=>\n\t\t\t<ListItem key={number.toString()} value={number} />\n\t\t\t))}\n\t\t</ul>\n\t)\n}\n```\n\n\n\n### 二、表单\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//表单的运用\n\t\t\n\t\t//通过类自定义的内有方法来更方便迅捷地操作表单\n\t\t\n\t\t//自定义表单组件\n\t\tclass NameForm extends React.Component{\n\t\t\tconstructor(props){\n\t\t\t\tsuper(props);\n\t\t\t\t//定义可更改的变量，即表单输入元素\n\t\t\t\tthis.state={value:''};\n\t\t\t\t//在具体方法中绑定this来实现对state的改变。\n\t\t\t\tthis.handleChange=this.handleChange.bind(this);\n\t\t\t\tthis.handleSubmit=this.handleSubmit.bind(this);\n\t\t\t}\n\t\t\t\n\t\t\thandleChange(event){\n\t\t\t\tthis.setState({value:event.target.value});\n\t\t\t}\n\t\t\thandleSubmit(event){\n\t\t\t\t//提交前显示名字\n\t\t\t\talert('提交的名字：'+this.state.value);\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\trender(){\n\t\t\t\treturn(\n\t\t\t\t  <form onSubmit={this.handleSubmit}>\n\t\t\t\t    <label>\n\t\t\t\t\t  名字:\n\t\t\t\t\t  <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n\t\t\t\t\t </label>\n\t\t\t\t\t  <button type=\"submit\">提交</button>\n\t\t\t\t\t</form>  \n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tReactDOM.render(<NameForm />,document.getElementById('test1'))\n\n\t\t</script>\n</html>\n\n```\n\n以上例子实现了一个自定义表单的应用。\n\n注意：在Html中`<textarea>` 组件直接通过子元素定义其文本，而在React中通过属性value来确定其文本。针对`<select>`组件React 并不会使用 `selected` 属性，而是在根 `select` 标签上使用 `value` 属性。这在受控组件中更便捷，因为您只需要在根标签中更新它。\n\n具体关于textarea 和select在React里的具体操作如下所示：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//表单的运用\n\t\t\n\t\t//通过类自定义的内有方法来更方便迅捷地操作表单\n\t\t\n\t\t//自定义表单组件\n\t\tclass NameForm extends React.Component{\n\t\t\tconstructor(props){\n\t\t\t\tsuper(props);\n\t\t\t\t//定义可更改的变量，即表单输入元素\n\t\t\t\tthis.state={\n\t\t\t\t\tvalue:'',\n\t\t\t\t\ttextValue:'',\n\t\t\t\t\tselected:'aa',\n\t\t\t\t};\n\t\t\t\t//在具体方法中绑定this来实现对state的改变。\n\t\t\t\tthis.handleChange=this.handleChange.bind(this);\n\t\t\t\tthis.handleSubmit=this.handleSubmit.bind(this);\n\t\t\t\tthis.handleChangeSelect=this.handleChangeSelect.bind(this);\n\t\t\t\tthis.handleChangeTextarea=this.handleChangeTextarea.bind(this);\n\t\t\t}\n\t\t\t\n\t\t\thandleChange(event){\n\t\t\t\tthis.setState({value:event.target.value});\n\t\t\t}\n\t\t\thandleSubmit(event){\n\t\t\t\t//提交前显示名字\n\t\t\t\talert('提交的名字：'+this.state.value);\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\thandleChangeTextarea(event){\n\t\t\t\tthis.setState({textValue:event.target.value})\n\t\t\t}\n\t\t\thandleChangeSelect(event){\n\t\t\t\tconsole.log('event',event)\n\t\t\t\tthis.setState({selected:event.target.value});\n\t\t\t}\n\t\t\trender(){\n\t\t\t\treturn(\n\t\t\t\t  <form onSubmit={this.handleSubmit}>\n\t\t\t\t    <label>\n\t\t\t\t\t  名字:\n\t\t\t\t\t  <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n\t\t\t\t\t </label>\n\t\t\t\t\t <label>\n\t\t\t\t\t\t 内容：\n\t\t\t\t\t\t <textarea  value={this.state.textValue} onChange={this.handleChangeTextarea}/>\n\t\t\t\t\t </label>\n\t\t\t\t\t <label>\n\t\t\t\t\t \t选择：\n\t\t\t\t\t \t<select value={this.state.selected} onChange={this.handleChangeSelect} >\n\t\t\t\t\t \t    <option value='aa'>aa</ option>\n\t\t\t\t\t \t\t<option value='bb'>bb</ option>\n\t\t\t\t\t \t\t<option value='cc'>cc</ option>\n\t\t\t\t\t \t</select>\n\t\t\t\t\t </label>\n\t\t\t\t\t  <button type=\"submit\">提交</button>\n\t\t\t\t\t</form>  \n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tReactDOM.render(<NameForm />,document.getElementById('test1'))\n\n\t\t</script>\n</html>\n\n```\n\n以上的形式在一个表单中调用了多个onChange，也可以只调用同一个onChange函数同时监听并改变多个数据，可以给每个元素添加 `name` 属性，并让处理函数根据 `event.target.name` 的值选择要执行的操作。具体代码如下所示：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"../js/react.development.js\" crossorigin></script>\n\t\t<script src=\"../js/react-dom.development.js\" crossorigin></script>\n\t\t<script src=\"../js/babel.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"test1\"></div>\n\t\t\n\t</body>\n\t<script type=\"text/babel\">\n\t\t//表单的运用\n\t\t\n\t\t//通过类自定义的内有方法来更方便迅捷地操作表单\n\t\t\n\t\t//自定义表单组件\n\t\tclass NameForm extends React.Component{\n\t\t\tconstructor(props){\n\t\t\t\tsuper(props);\n\t\t\t\t//定义可更改的变量，即表单输入元素\n\t\t\t\tthis.state={\n\t\t\t\t\tnameValue:'',\n\t\t\t\t\ttextValue:'',\n\t\t\t\t\tselected:'aa',\n\t\t\t\t};\n\t\t\t\t//在具体方法中绑定this来实现对state的改变。\n\t\t\t\tthis.handleChange=this.handleChange.bind(this);\n\t\t\t\tthis.handleSubmit=this.handleSubmit.bind(this);\n\t\t\t}\n\t\t\t\n\t\t\thandleChange(event){\n\t\t\t\tconst value=event.target.value;\n\t\t\t\tconst name=event.target.name;\n\t\t\t\tthis.setState({\n\t\t\t\t\t[name]:value\n\t\t\t\t})\n\t\t\t}\n\t\t\thandleSubmit(event){\n\t\t\t\t//提交前显示名字\n\t\t\t\talert('提交的名字：'+this.state.value);\n\t\t\t\tconsole.log('state',this.state)\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\trender(){\n\t\t\t\treturn(\n\t\t\t\t  <form onSubmit={this.handleSubmit}>\n\t\t\t\t    <label>\n\t\t\t\t\t  名字:\n\t\t\t\t\t  <input name=\"nameValue\" type=\"text\" value={this.state.value} onChange={this.handleChange} />\n\t\t\t\t\t </label>\n\t\t\t\t\t <label>\n\t\t\t\t\t\t 内容：\n\t\t\t\t\t\t <textarea name=\"textValue\"  value={this.state.textValue} onChange={this.handleChange}/>\n\t\t\t\t\t </label>\n\t\t\t\t\t <label>\n\t\t\t\t\t \t选择：\n\t\t\t\t\t \t<select name=\"selected\" value={this.state.selected} onChange={this.handleChange} >\n\t\t\t\t\t \t    <option value='aa'>aa</ option>\n\t\t\t\t\t \t\t<option value='bb'>bb</ option>\n\t\t\t\t\t \t\t<option value='cc'>cc</ option>\n\t\t\t\t\t \t</select>\n\t\t\t\t\t </label>\n\t\t\t\t\t  <button type=\"submit\">提交</button>\n\t\t\t\t\t</form>  \n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tReactDOM.render(<NameForm />,document.getElementById('test1'))\n\n\t\t</script>\n</html>\n\n```\n\n","slug":"React学习四","published":1,"updated":"2021-12-19T05:49:52.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxeksgkv0000lotvdkcr3chz","content":"<h3 id=\"一、状态提升\"><a href=\"#一、状态提升\" class=\"headerlink\" title=\"一、状态提升\"></a>一、状态提升</h3><p>通常，多个组件需要反应同一个数据变化时，建议使用状态提升，即共享状态提升到最近的父组件中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//通过map的方式渲染列表</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">List</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//获取列表参数</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">const</span> numbers=props.numbers;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//利用map进行渲染</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">const</span> listItem=numbers.map((<span class=\"hljs-function\"><span class=\"hljs-params\">number</span>=&gt;</span></span><br><span class=\"javascript\">\t\t\t<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;number&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>));</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">return</span> (</span><br><span class=\"javascript\">\t\t\t  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>&#123;listItem&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t\t)</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-keyword\">const</span> numbers=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>];</span><br><span class=\"javascript\">\t\tReactDOM.render(</span><br><span class=\"javascript\">\t\t<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span> <span class=\"hljs-attr\">numbers</span>=<span class=\"hljs-string\">&#123;numbers&#125;</span> /&gt;</span></span>,</span><br><span class=\"javascript\">\t\t<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;test1&#x27;</span>))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>运行以上代码，发现已成功渲染列表，但是在控制台获得警告如下：</p>\n<p><img src=\"/images/react/2021121903.png\"></p>\n<p>提示对于列表的每一个元素都需要key关键词，给每一列添加key:<code>&lt;li key=&#123;number.toString()&#125;&gt;&#123;number&#125;&lt;/li&gt;));</code>，key作为列表中每个元素的唯一标识符，是有优化性能的作用。对于应该在哪里设置元素的key，一个好的经验法则是：在 <code>map()</code> 方法中的元素需要设置 key 属性。</p>\n<p>以上情况可以也通过以下方法实现</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">funtion <span class=\"hljs-function\"><span class=\"hljs-title\">ListItem</span>(<span class=\"hljs-params\">props</span>)</span>&#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;props.value&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br>&#125;<br>\t\t<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">List2</span>(<span class=\"hljs-params\">props</span>)</span>&#123;<br>\t<span class=\"hljs-keyword\">const</span> numbers=props.numbers;<br>\t<span class=\"hljs-keyword\">return</span> (<br>\t\t <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"xml\">\t\t\t&#123;numbers.map((number=&gt;</span><br><span class=\"xml\">\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ListItem</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&#123;number.toString()&#125;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&#123;number&#125;</span> /&gt;</span></span><br><span class=\"xml\">\t\t\t))&#125;</span><br><span class=\"xml\">\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br>\t)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"二、表单\"><a href=\"#二、表单\" class=\"headerlink\" title=\"二、表单\"></a>二、表单</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//表单的运用</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//通过类自定义的内有方法来更方便迅捷地操作表单</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//自定义表单组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NameForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">super</span>(props);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//定义可更改的变量，即表单输入元素</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.state=&#123;<span class=\"hljs-attr\">value</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>&#125;;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//在具体方法中绑定this来实现对state的改变。</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChange=<span class=\"hljs-built_in\">this</span>.handleChange.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleSubmit=<span class=\"hljs-built_in\">this</span>.handleSubmit.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChange</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;<span class=\"hljs-attr\">value</span>:event.target.value&#125;);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleSubmit</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//提交前显示名字</span></span><br><span class=\"javascript\">\t\t\t\talert(<span class=\"hljs-string\">&#x27;提交的名字：&#x27;</span>+<span class=\"hljs-built_in\">this</span>.state.value);</span><br><span class=\"javascript\">\t\t\t\tevent.preventDefault();</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span>(</span><br><span class=\"javascript\">\t\t\t\t  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t  名字:</span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&#123;this.state.value&#125;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>  </span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\tReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NameForm</span> /&gt;</span></span>,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;test1&#x27;</span>))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>以上例子实现了一个自定义表单的应用。</p>\n<p>注意：在Html中<code>&lt;textarea&gt;</code> 组件直接通过子元素定义其文本，而在React中通过属性value来确定其文本。针对<code>&lt;select&gt;</code>组件React 并不会使用 <code>selected</code> 属性，而是在根 <code>select</code> 标签上使用 <code>value</code> 属性。这在受控组件中更便捷，因为您只需要在根标签中更新它。</p>\n<p>具体关于textarea 和select在React里的具体操作如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//表单的运用</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//通过类自定义的内有方法来更方便迅捷地操作表单</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//自定义表单组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NameForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">super</span>(props);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//定义可更改的变量，即表单输入元素</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.state=&#123;</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">value</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">textValue</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">selected</span>:<span class=\"hljs-string\">&#x27;aa&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t&#125;;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//在具体方法中绑定this来实现对state的改变。</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChange=<span class=\"hljs-built_in\">this</span>.handleChange.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleSubmit=<span class=\"hljs-built_in\">this</span>.handleSubmit.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChangeSelect=<span class=\"hljs-built_in\">this</span>.handleChangeSelect.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChangeTextarea=<span class=\"hljs-built_in\">this</span>.handleChangeTextarea.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChange</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;<span class=\"hljs-attr\">value</span>:event.target.value&#125;);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleSubmit</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//提交前显示名字</span></span><br><span class=\"javascript\">\t\t\t\talert(<span class=\"hljs-string\">&#x27;提交的名字：&#x27;</span>+<span class=\"hljs-built_in\">this</span>.state.value);</span><br><span class=\"javascript\">\t\t\t\tevent.preventDefault();</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChangeTextarea</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;<span class=\"hljs-attr\">textValue</span>:event.target.value&#125;)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChangeSelect</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;event&#x27;</span>,event)</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;<span class=\"hljs-attr\">selected</span>:event.target.value&#125;);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span>(</span><br><span class=\"javascript\">\t\t\t\t  &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class=\"javascript\">\t\t\t\t    &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t  名字:</span><br><span class=\"javascript\">\t\t\t\t\t  &lt;input type=&quot;text&quot; value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t\t 内容：</span><br><span class=\"javascript\">\t\t\t\t\t\t &lt;textarea  value=&#123;this.state.textValue&#125; onChange=&#123;this.handleChangeTextarea&#125;/&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t选择：</span><br><span class=\"javascript\">\t\t\t\t\t \t&lt;select value=&#123;this.state.selected&#125; onChange=&#123;this.handleChangeSelect&#125; &gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t    &lt;option value=&#x27;aa&#x27;&gt;aa&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t\t&lt;option value=&#x27;bb&#x27;&gt;bb&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t\t&lt;option value=&#x27;cc&#x27;&gt;cc&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t&lt;/select&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t  &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class=\"javascript\">\t\t\t\t\t&lt;/form&gt;  </span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\tReactDOM.render(&lt;NameForm /&gt;,document.getElementById(&#x27;test1&#x27;))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>以上的形式在一个表单中调用了多个onChange，也可以只调用同一个onChange函数同时监听并改变多个数据，可以给每个元素添加 <code>name</code> 属性，并让处理函数根据 <code>event.target.name</code> 的值选择要执行的操作。具体代码如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//表单的运用</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//通过类自定义的内有方法来更方便迅捷地操作表单</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//自定义表单组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NameForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">super</span>(props);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//定义可更改的变量，即表单输入元素</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.state=&#123;</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">nameValue</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">textValue</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">selected</span>:<span class=\"hljs-string\">&#x27;aa&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t&#125;;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//在具体方法中绑定this来实现对state的改变。</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChange=<span class=\"hljs-built_in\">this</span>.handleChange.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleSubmit=<span class=\"hljs-built_in\">this</span>.handleSubmit.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChange</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">const</span> value=event.target.value;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">const</span> name=event.target.name;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;</span><br><span class=\"javascript\">\t\t\t\t\t[name]:value</span><br><span class=\"javascript\">\t\t\t\t&#125;)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleSubmit</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//提交前显示名字</span></span><br><span class=\"javascript\">\t\t\t\talert(<span class=\"hljs-string\">&#x27;提交的名字：&#x27;</span>+<span class=\"hljs-built_in\">this</span>.state.value);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;state&#x27;</span>,<span class=\"hljs-built_in\">this</span>.state)</span><br><span class=\"javascript\">\t\t\t\tevent.preventDefault();</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span>(</span><br><span class=\"javascript\">\t\t\t\t  &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class=\"javascript\">\t\t\t\t    &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t  名字:</span><br><span class=\"javascript\">\t\t\t\t\t  &lt;input name=&quot;nameValue&quot; type=&quot;text&quot; value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t\t 内容：</span><br><span class=\"javascript\">\t\t\t\t\t\t &lt;textarea name=&quot;textValue&quot;  value=&#123;this.state.textValue&#125; onChange=&#123;this.handleChange&#125;/&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t选择：</span><br><span class=\"javascript\">\t\t\t\t\t \t&lt;select name=&quot;selected&quot; value=&#123;this.state.selected&#125; onChange=&#123;this.handleChange&#125; &gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t    &lt;option value=&#x27;aa&#x27;&gt;aa&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t\t&lt;option value=&#x27;bb&#x27;&gt;bb&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t\t&lt;option value=&#x27;cc&#x27;&gt;cc&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t&lt;/select&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t  &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class=\"javascript\">\t\t\t\t\t&lt;/form&gt;  </span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\tReactDOM.render(&lt;NameForm /&gt;,document.getElementById(&#x27;test1&#x27;))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":"<h3 id=\"一、状态提升\"><a href=\"#一、状态提升\" class=\"headerlink\" title=\"一、状态提升\"></a>一、状态提升</h3><p>通常，多个组件需要反应同一个数据变化时，建议使用状态提升，即共享状态提升到最近的父组件中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//通过map的方式渲染列表</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">List</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//获取列表参数</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">const</span> numbers=props.numbers;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-comment\">//利用map进行渲染</span></span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">const</span> listItem=numbers.map((<span class=\"hljs-function\"><span class=\"hljs-params\">number</span>=&gt;</span></span><br><span class=\"javascript\">\t\t\t<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;number&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>));</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">return</span> (</span><br><span class=\"javascript\">\t\t\t  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>&#123;listItem&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span></span><br><span class=\"javascript\">\t\t\t)</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-keyword\">const</span> numbers=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>];</span><br><span class=\"javascript\">\t\tReactDOM.render(</span><br><span class=\"javascript\">\t\t<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span> <span class=\"hljs-attr\">numbers</span>=<span class=\"hljs-string\">&#123;numbers&#125;</span> /&gt;</span></span>,</span><br><span class=\"javascript\">\t\t<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;test1&#x27;</span>))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>运行以上代码，发现已成功渲染列表，但是在控制台获得警告如下：</p>\n<p><img src=\"/images/react/2021121903.png\"></p>\n<p>提示对于列表的每一个元素都需要key关键词，给每一列添加key:<code>&lt;li key=&#123;number.toString()&#125;&gt;&#123;number&#125;&lt;/li&gt;));</code>，key作为列表中每个元素的唯一标识符，是有优化性能的作用。对于应该在哪里设置元素的key，一个好的经验法则是：在 <code>map()</code> 方法中的元素需要设置 key 属性。</p>\n<p>以上情况可以也通过以下方法实现</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">funtion <span class=\"hljs-function\"><span class=\"hljs-title\">ListItem</span>(<span class=\"hljs-params\">props</span>)</span>&#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;props.value&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br>&#125;<br>\t\t<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">List2</span>(<span class=\"hljs-params\">props</span>)</span>&#123;<br>\t<span class=\"hljs-keyword\">const</span> numbers=props.numbers;<br>\t<span class=\"hljs-keyword\">return</span> (<br>\t\t <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"xml\">\t\t\t&#123;numbers.map((number=&gt;</span><br><span class=\"xml\">\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ListItem</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&#123;number.toString()&#125;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&#123;number&#125;</span> /&gt;</span></span><br><span class=\"xml\">\t\t\t))&#125;</span><br><span class=\"xml\">\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br>\t)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"二、表单\"><a href=\"#二、表单\" class=\"headerlink\" title=\"二、表单\"></a>二、表单</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//表单的运用</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//通过类自定义的内有方法来更方便迅捷地操作表单</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//自定义表单组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NameForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">super</span>(props);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//定义可更改的变量，即表单输入元素</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.state=&#123;<span class=\"hljs-attr\">value</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>&#125;;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//在具体方法中绑定this来实现对state的改变。</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChange=<span class=\"hljs-built_in\">this</span>.handleChange.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleSubmit=<span class=\"hljs-built_in\">this</span>.handleSubmit.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChange</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;<span class=\"hljs-attr\">value</span>:event.target.value&#125;);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleSubmit</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//提交前显示名字</span></span><br><span class=\"javascript\">\t\t\t\talert(<span class=\"hljs-string\">&#x27;提交的名字：&#x27;</span>+<span class=\"hljs-built_in\">this</span>.state.value);</span><br><span class=\"javascript\">\t\t\t\tevent.preventDefault();</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span>(</span><br><span class=\"javascript\">\t\t\t\t  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t  名字:</span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&#123;this.state.value&#125;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>  </span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\tReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NameForm</span> /&gt;</span></span>,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;test1&#x27;</span>))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>以上例子实现了一个自定义表单的应用。</p>\n<p>注意：在Html中<code>&lt;textarea&gt;</code> 组件直接通过子元素定义其文本，而在React中通过属性value来确定其文本。针对<code>&lt;select&gt;</code>组件React 并不会使用 <code>selected</code> 属性，而是在根 <code>select</code> 标签上使用 <code>value</code> 属性。这在受控组件中更便捷，因为您只需要在根标签中更新它。</p>\n<p>具体关于textarea 和select在React里的具体操作如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//表单的运用</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//通过类自定义的内有方法来更方便迅捷地操作表单</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//自定义表单组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NameForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">super</span>(props);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//定义可更改的变量，即表单输入元素</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.state=&#123;</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">value</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">textValue</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">selected</span>:<span class=\"hljs-string\">&#x27;aa&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t&#125;;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//在具体方法中绑定this来实现对state的改变。</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChange=<span class=\"hljs-built_in\">this</span>.handleChange.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleSubmit=<span class=\"hljs-built_in\">this</span>.handleSubmit.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChangeSelect=<span class=\"hljs-built_in\">this</span>.handleChangeSelect.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChangeTextarea=<span class=\"hljs-built_in\">this</span>.handleChangeTextarea.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChange</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;<span class=\"hljs-attr\">value</span>:event.target.value&#125;);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleSubmit</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//提交前显示名字</span></span><br><span class=\"javascript\">\t\t\t\talert(<span class=\"hljs-string\">&#x27;提交的名字：&#x27;</span>+<span class=\"hljs-built_in\">this</span>.state.value);</span><br><span class=\"javascript\">\t\t\t\tevent.preventDefault();</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChangeTextarea</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;<span class=\"hljs-attr\">textValue</span>:event.target.value&#125;)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChangeSelect</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;event&#x27;</span>,event)</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;<span class=\"hljs-attr\">selected</span>:event.target.value&#125;);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span>(</span><br><span class=\"javascript\">\t\t\t\t  &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class=\"javascript\">\t\t\t\t    &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t  名字:</span><br><span class=\"javascript\">\t\t\t\t\t  &lt;input type=&quot;text&quot; value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t\t 内容：</span><br><span class=\"javascript\">\t\t\t\t\t\t &lt;textarea  value=&#123;this.state.textValue&#125; onChange=&#123;this.handleChangeTextarea&#125;/&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t选择：</span><br><span class=\"javascript\">\t\t\t\t\t \t&lt;select value=&#123;this.state.selected&#125; onChange=&#123;this.handleChangeSelect&#125; &gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t    &lt;option value=&#x27;aa&#x27;&gt;aa&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t\t&lt;option value=&#x27;bb&#x27;&gt;bb&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t\t&lt;option value=&#x27;cc&#x27;&gt;cc&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t&lt;/select&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t  &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class=\"javascript\">\t\t\t\t\t&lt;/form&gt;  </span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\tReactDOM.render(&lt;NameForm /&gt;,document.getElementById(&#x27;test1&#x27;))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p>以上的形式在一个表单中调用了多个onChange，也可以只调用同一个onChange函数同时监听并改变多个数据，可以给每个元素添加 <code>name</code> 属性，并让处理函数根据 <code>event.target.name</code> 的值选择要执行的操作。具体代码如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/react-dom.development.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t\t<br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//表单的运用</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//通过类自定义的内有方法来更方便迅捷地操作表单</span></span><br><span class=\"javascript\">\t\t</span><br><span class=\"javascript\">\t\t<span class=\"hljs-comment\">//自定义表单组件</span></span><br><span class=\"javascript\">\t\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NameForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>&#123;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">super</span>(props);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//定义可更改的变量，即表单输入元素</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.state=&#123;</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">nameValue</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">textValue</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t\t<span class=\"hljs-attr\">selected</span>:<span class=\"hljs-string\">&#x27;aa&#x27;</span>,</span><br><span class=\"javascript\">\t\t\t\t&#125;;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//在具体方法中绑定this来实现对state的改变。</span></span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleChange=<span class=\"hljs-built_in\">this</span>.handleChange.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.handleSubmit=<span class=\"hljs-built_in\">this</span>.handleSubmit.bind(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleChange</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">const</span> value=event.target.value;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">const</span> name=event.target.name;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">this</span>.setState(&#123;</span><br><span class=\"javascript\">\t\t\t\t\t[name]:value</span><br><span class=\"javascript\">\t\t\t\t&#125;)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">handleSubmit</span>(<span class=\"hljs-params\">event</span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-comment\">//提交前显示名字</span></span><br><span class=\"javascript\">\t\t\t\talert(<span class=\"hljs-string\">&#x27;提交的名字：&#x27;</span>+<span class=\"hljs-built_in\">this</span>.state.value);</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;state&#x27;</span>,<span class=\"hljs-built_in\">this</span>.state)</span><br><span class=\"javascript\">\t\t\t\tevent.preventDefault();</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span>(</span><br><span class=\"javascript\">\t\t\t\t  &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class=\"javascript\">\t\t\t\t    &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t  名字:</span><br><span class=\"javascript\">\t\t\t\t\t  &lt;input name=&quot;nameValue&quot; type=&quot;text&quot; value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t\t 内容：</span><br><span class=\"javascript\">\t\t\t\t\t\t &lt;textarea name=&quot;textValue&quot;  value=&#123;this.state.textValue&#125; onChange=&#123;this.handleChange&#125;/&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t选择：</span><br><span class=\"javascript\">\t\t\t\t\t \t&lt;select name=&quot;selected&quot; value=&#123;this.state.selected&#125; onChange=&#123;this.handleChange&#125; &gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t    &lt;option value=&#x27;aa&#x27;&gt;aa&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t\t&lt;option value=&#x27;bb&#x27;&gt;bb&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t\t&lt;option value=&#x27;cc&#x27;&gt;cc&lt;/ option&gt;</span><br><span class=\"javascript\">\t\t\t\t\t \t&lt;/select&gt;</span><br><span class=\"javascript\">\t\t\t\t\t &lt;/label&gt;</span><br><span class=\"javascript\">\t\t\t\t\t  &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class=\"javascript\">\t\t\t\t\t&lt;/form&gt;  </span><br><span class=\"javascript\">\t\t\t\t)</span><br><span class=\"javascript\">\t\t\t&#125;</span><br><span class=\"javascript\">\t\t&#125;</span><br><span class=\"javascript\">\t\tReactDOM.render(&lt;NameForm /&gt;,document.getElementById(&#x27;test1&#x27;))</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"计算机网络基础复习","date":"2021-12-20T00:28:05.000Z","_content":"\n------\n\n*本文来源于https://github.com/CyC2018/CS-Notes，是在阅读该资源时的笔记整理，但有大部分的内容和原文一致。*\n\n------\n\n\n\n## 1.network、internet、Internet的区别\n\nnetwork是计算机的网络，把计算机主机连接起来（有很多种网络，包括局域网、广域网等），而internet则是把<u>广域网</u>的一种，是泛指，不一定采取TCP/IP协议；internet是网络的网络。Internet是全球最大最开放的internet，<u>采用TCP/IP协议</u>。\n\n## 2.ISP\n\nISP（Internet Service Provider 互联网服务提供商）在互联网<u>主干网上</u>提供相应服务使个体设备接入互联网。在中国比较热门的互联网提供商有移动、联通、电信等。\n\n## 3.主机之间通信方式\n\n**C/S 客户-服务器方式：**以服务器为核心提供客户资源\n\n**P2P 点对点方式：**双方对等、共享资源（比如迅雷下载）\n\n## 4.电路交换、分组交换\n\n**电路交换：**电路交换用于电话通信系统，两个用户要通信之前需要建立一条专用的物理链路，并且在整个通信过程中始终<u>占用</u>该链路。由于通信的过程中不可能一直在使用传输线路，因此电路交换对线路的利用率很低，往往不到 10%。\n\n**分组交换：**每个分组都有首部和尾部，包含了源地址和目的地址等控制信息，在同一个传输线路上同时传输多个分组互相不会影响，因此在同一条传输线路上允许同时传输多个分组，也就是说分组交换<u>不需要占用传输线路</u>。\n\n## 5.计算机网络体系结构\n\nOSI 国际标准的网络体系结构，共有七层，自下往上分别是<u>物理层、数据链路层、网络层、运输层、会话层、应用层</u>。\n\nTCP/IP协议是民间运用最广泛的网络协议，它简化了OSI协议，只有四层，自下往上是<u>网络接口层、网际层、运输层、应用层</u>。\n\n因为上面两个结构有层数太多或太少的问题，所以往往采取折中的方式即五层协议的体系架构，它自下往上分别是<u>物理层、数据链路层、网络层、运输层、应用层</u>。\n\n**物理层**：传输的是可以通过<u>物理介质</u>运输的数据比特流。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。\n\n**数据链路层**：物理寻址，同时将原始的比特流转变为<u>逻辑传输路线</u>。主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧，该层涉及到的协议有<u>以太网协议、点对点协议</u>。\n\n**网络层**：它通过路由选择算法，为分组通过通信子网选择最适当的路径，以实现网络的互连功能。具体地说，数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、流量控制、拥塞控制等将信息从一台网络设备传送到另一台网络设备。该层协议的代表包括<u>IP、IPX 协议</u>等。\n\n**运输层**：该层是通信子网和资源子网的接口和桥梁，起到了承上启下的作用。该层提供会话层和网络层之间的传输服务，这种服务从会话层获得数据，并在必要时对数据进行分割然后将数据传递到网络层，并确保数据能正确无误地传送到网络层。因此,运输层负责提供主机中<u>两个进程之间数据的可靠传送</u>。运输层的目的是向用户透明地传送报文，它向高层屏蔽了下层数据通信的细节。该层主要有两种协议：<u>TCP协议、UDP协议</u>。\n\n**会话层**：其主要任务是负责维护两个实体之间的会话连接确保点到点的传输不被中断，并进行会话管理和数据交换管理，即组织和协调两个会话进程之间的通信，并对数据交换进行管理。\n\n**表示层**：主要功能是协商和建立数据交换的格式，解决各应用程序之间在数据格式表示上的差异,，以使一个主机应用层的数据可以被另一个主机的应用层理解。\n\n**应用层**：用户应用程序和网络之间的接口，完成用户希望在网络上完成的各种工作。该层的协议有<u>HTTP、DNS协议</u>，数据单位为<u>报文</u>。\n\n\n\nTCP/IP协议相当于五层协议的下面两层合并成一层（网络接口层）。\n\n## 6.应用层\n\n**DNS：**域名解析，提供了主机名和IP地址相互转化的服务，域名的层次结构如下所示：\n\n![](/images/react/2021122001.png)\n\nDNS使用的端口是53，可以使用UDP或TCP协议，如果返回的响应超过512字节或者是区域传输则会使用TCP进行运输。\n\n**FTP：**使用TCP进行连接，需要两个连接（控制连接、数据连接）来传输一个文件。端口：20、21.有主动传输和被动传输两种模式。\n\n**DHCP：**动态主机配置协议.一个局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。\n\n电子邮件协议：一个电子邮件系统由三部分组成：用户代理、邮件服务器以及邮件协议。发送协议常用**SMTP**（只能发送ASCII码，MIMI扩充了SMTP，可以发送非ASCII码）、读取协议常用POP3（阅后即焚，最新版本可不焚）和IMAP。\n\n**常用端口：**如下图所示：\n\n![](/images/react/2021122002.png)\n\n须知0-1023是熟知端口，客服端生产的随机端口必须大于1024。\n\n## 7.传输层（报文）\n\n### 7.1 UDP和TCP的区别\n\nUDP 用户数据报协议，无连接，尽最大可能交付，没有拥塞控制，面对报文（应用层传下来的报文，只在其头部添加UDP首部），支持一对一、一对多、多对一、多对多的连接。\n\nTCP面向连接，提供可靠交付，有拥塞控制（TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复），提供全双工通信，面向字节流（应用层传下来的报文看成字节流，并拆分成数据块），连接一对一。\n\n### 7.2 UDP首部\n\nUDP的首部有8字节以及12字节的伪首部，伪首部是为了计算检验而临时添加，首部8字节包括2字节源端口和目的端口，2字节长度和检验和。以下为UDP首部示意图：\n\n![](/images/react/2021122003.png)\n\n### 7.3 TCP首部\n\nTCP首部长度不固定，有20字节的固定头部，具体情况如下图所示：\n\n![](/images/react/2021122004.png)\n\n序号：当前报文的序号，下一个报文的序号则为前一个报文的序号加上前一个报文的长度。\n\n确认号：因为TCP协议是可靠的一对一协议，所以当前报文发出时也要有希望接收到的下一个报文的序号，将接收到的下一个报文的序号则是前一个报文的确认号。\n\n数据偏移：实际就是TCP报文头部长度。\n\n确认位ACK：只有当ACK=1时确认号字段才有效。\n\n同步位SYN：建立连接时用来同步序号。SYN=1,ACK=0表示这是一个请求连接报文，SYN=1,ACK=1是同意连接的响应报文。\n\n终止位FIN：FIN=1表示释放一个连接。\n\n### 7.4 TCP的三次握手\n\n第一次握手：客服端向服务端发送请求报文，其中ACK=0,SYN=1。\n\n第二次握手：服务端返回客服端一个响应报文，其中SYN=1,ACK=1。\n\n第三次握手：客服端向服务端发送确认报文，其中SYN=0,ACK=1。\n\n三次握手成功建立连接。\n\n**需要三次握手的原因（面试题）：**\n\n三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。如果没有三次握手，会出现这种现象，客户端发送请求访问报文给服务端，但是这个报文在网络中受阻延迟没有及时传达到，而超时后客户端会再次发送请求报文给服务端，此时服务端就会收到并且要处理先后两条请求报文，有了三次握手，客户端会忽略服务器发送的第二条响应请求报文，不会进行第三次握手。\n\n### 7.5 TCP的四次挥手\n\n在客户端要关闭服务时需要和服务端进行四次挥手。\n\n第一次挥手：客户端向服务端发送释放请求报文，其中FIN=1\n\n第二次挥手：TCP处于半关闭状态，客户端无法再发送报文给服务端，服务端可以向客户端发送服务器端发送还未传送完毕的数据。\n\n第三次挥手：服务端向客户端发送释放报文，FIN=1\n\n第四次挥手：客户端向服务端发送确认报文，等待2MSL后释放应用。服务端收到确认报文后释放应用。\n\n**四次挥手的原因（面试题）：**\n\n客户端发送释放报文后，TCP处于半关闭状态，这个状态能让服务端继续发送未传送完毕的数据，数据传完后，服务器会发送释放报文。\n\n**四次挥手过程中TIME_WAIT的原因（面试题）：**\n\n在客户端收到服务端的FIN释放报文时回有2MSL（MSL 一个报文在网络中最大的存活时间）的等待时间，这是为了确保自己发送给服务端的确认报文能顺利传达，若出现意外则可以再次发送。也可让这段连续时间内产生的报文在网络中消失以避免干扰之后的连接请求。\n\n## 8.网络层（分组）\n\n网络层是整个互联网的核心，其中最关键的就是IP协议，其将异构的物理网络连接起来。与IP协议配套的还有地址解析协议ARP、网际控制报文协议ICMP、网际组管理协议IGMP。\n\n### 8.1 IP协议\n\n通过IP地址，保证了联网设备的唯一性，实现了网络通信的面向无连接和不可靠的传输功能。\n\nIP地址的偏执方式经历了三个历史阶段：分类、子网划分、无分类。\n\n**分类**：32位的IP地址根据网络号的长度（8、16、24位）分为A、B、C类地址以及多播地址D类、今后使用地址E类。具体几类地址的区别如下所示：\n\n![](/images/react/2021122005.png)\n\n**子网划分**：对于局域网内部的网络可进行子网划分，首先需要配置子网掩码。\n\n**无分类**：无分类编制CIDR消除了以上两种情况概念，使用网络前缀和主机号来对IP地址进行编码。如128.14.35.7/20 就是使用CIDR进行表示，其代表前 20 位为网络前缀。\n\n### 8.2 ARP协议\n\nARP协议实现了通过IP地址获得<u>MAC地址</u>。MAC地址是主机的硬件地址。每个主机都有一个<u>ARP高速缓存</u>，即IP地址到MAC地址的映射表。如果主机A没有主机B的MAC地址，只要获得其IP地址，通过广播的形式将访问信息发送给B，B 收到请求就将其MAC地址发送给A，这样A就可以通过ARP发送信息给B了。\n\n### 8.3 ICMP协议\n\nICMP协议是为了更有效地转发IP数据包，它被封装在IP数据报中，但不属于高层协议。<u>Ping</u>是ICNMP的一个重要应用，主要用来测试两台主机之间的连通性。\n\n### 8.4 虚拟专用网VPN\n\n因为实际的主机数要远远大于IP地址，并且也不需要把所有的主机接入到外部的互联网中，所以就有了专用地址，即机构内的计算机可使用仅在本机构有效的IP地址。VPN使用公用的互联网作为本机构各个专用网之间的通信载体，其功能是在公用网络上建立专用网络，进行加密通讯，即只要本机构的主机才能进行通讯。\n\n### 8.5 网络地址转换NAT\n\n专用网内部主机想要和互联网上的主机进行通讯时即要使用NAT进行IP地址的转换，把本地IP转为全球IP。\n\n### 8.6 路由选择协议\n\n内部路由选择协议有<u>RIP</u>和<u>OSPF</u>协议。RIP 是一种基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。RIP 协议实现简单，开销小。但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。为了克服RIP的缺点而开发了OSPF协议，即开放最短路径优先。\n\n外部路由选择协议有<u>BGP</u>协议——边界网关协议。\n\n## 9.数据链路层（帧）\n\n### 9.1 基本问题\n\n**封装成帧**：链路层以帧的形式进行传输，需要将网络层的分组添加首部和尾部用于标记帧的开始和结束。\n\n**透明传输**：如果帧内部有首部或尾部相同的内容就容易错误定位帧的位置，所以需要在帧内部添加响应的<u>转义字符</u>以解决该问题。\n\n**差错检测**：目前使用最广泛的是<u>CRC</u>（循环冗余检验）来检查比特差错。\n\n### 9.2 信道分类\n\n分为广播信道和点对点信道，广播信道是一对多通信，采用<u>CSMA/CD协议</u>，表示载波监听多点接入/碰撞检测；点对点信道是一对一通信，采用<u>PPP协议</u>，这是一种用户计算机和 ISP 进行通信时所使用的数据链路层协议。\n\n### 9.3 信道复用技术\n\n包括频分复用、时分复用、波分复用、码分复用。\n\n### 9.4 局域网、以太网与虚拟局域网\n\n局域网是一种<u>广播信道</u>，以太网是<u>特殊的局域网</u>。局域网的特点为网络是一个单位所拥有，且地理位置和站点数目均有限。按照拓扑结构可将局域网分为<u>星型、环形、直线型</u>；以太网是一种星型局域网，早期使用集线器作为传输数据的物理设备，作用于比特而非帧，现在使用<u>交换机</u>，这是一种链路层设备。交换机具有学习功能，学习交换表的内容，交换表存储着MAC地址到接口的映射。<u>虚拟局域网</u>建立了与物理位置无关的逻辑组，只有在同一个虚拟局域网内的成员才能收到链路层广播信息。\n\n## 10.物理层\n\n### 10.1 通信方式\n\n根据信息的传输方向分为单工通信（单向传输）、半双工通信（双向交替传输）、全双工通信（双向同时传输）。\n\n### 10.2 带通调制\n\n带同调制将离散的数字信号转为连续的模拟信号。","source":"_posts/计算机网络复习.md","raw":"---\ntitle: 计算机网络基础复习\ndate: 2021-12-20 08:28:05\ntags: [计算机, 学习,前端面试]\ncategories:\n- 博客\n---\n\n------\n\n*本文来源于https://github.com/CyC2018/CS-Notes，是在阅读该资源时的笔记整理，但有大部分的内容和原文一致。*\n\n------\n\n\n\n## 1.network、internet、Internet的区别\n\nnetwork是计算机的网络，把计算机主机连接起来（有很多种网络，包括局域网、广域网等），而internet则是把<u>广域网</u>的一种，是泛指，不一定采取TCP/IP协议；internet是网络的网络。Internet是全球最大最开放的internet，<u>采用TCP/IP协议</u>。\n\n## 2.ISP\n\nISP（Internet Service Provider 互联网服务提供商）在互联网<u>主干网上</u>提供相应服务使个体设备接入互联网。在中国比较热门的互联网提供商有移动、联通、电信等。\n\n## 3.主机之间通信方式\n\n**C/S 客户-服务器方式：**以服务器为核心提供客户资源\n\n**P2P 点对点方式：**双方对等、共享资源（比如迅雷下载）\n\n## 4.电路交换、分组交换\n\n**电路交换：**电路交换用于电话通信系统，两个用户要通信之前需要建立一条专用的物理链路，并且在整个通信过程中始终<u>占用</u>该链路。由于通信的过程中不可能一直在使用传输线路，因此电路交换对线路的利用率很低，往往不到 10%。\n\n**分组交换：**每个分组都有首部和尾部，包含了源地址和目的地址等控制信息，在同一个传输线路上同时传输多个分组互相不会影响，因此在同一条传输线路上允许同时传输多个分组，也就是说分组交换<u>不需要占用传输线路</u>。\n\n## 5.计算机网络体系结构\n\nOSI 国际标准的网络体系结构，共有七层，自下往上分别是<u>物理层、数据链路层、网络层、运输层、会话层、应用层</u>。\n\nTCP/IP协议是民间运用最广泛的网络协议，它简化了OSI协议，只有四层，自下往上是<u>网络接口层、网际层、运输层、应用层</u>。\n\n因为上面两个结构有层数太多或太少的问题，所以往往采取折中的方式即五层协议的体系架构，它自下往上分别是<u>物理层、数据链路层、网络层、运输层、应用层</u>。\n\n**物理层**：传输的是可以通过<u>物理介质</u>运输的数据比特流。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。\n\n**数据链路层**：物理寻址，同时将原始的比特流转变为<u>逻辑传输路线</u>。主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧，该层涉及到的协议有<u>以太网协议、点对点协议</u>。\n\n**网络层**：它通过路由选择算法，为分组通过通信子网选择最适当的路径，以实现网络的互连功能。具体地说，数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、流量控制、拥塞控制等将信息从一台网络设备传送到另一台网络设备。该层协议的代表包括<u>IP、IPX 协议</u>等。\n\n**运输层**：该层是通信子网和资源子网的接口和桥梁，起到了承上启下的作用。该层提供会话层和网络层之间的传输服务，这种服务从会话层获得数据，并在必要时对数据进行分割然后将数据传递到网络层，并确保数据能正确无误地传送到网络层。因此,运输层负责提供主机中<u>两个进程之间数据的可靠传送</u>。运输层的目的是向用户透明地传送报文，它向高层屏蔽了下层数据通信的细节。该层主要有两种协议：<u>TCP协议、UDP协议</u>。\n\n**会话层**：其主要任务是负责维护两个实体之间的会话连接确保点到点的传输不被中断，并进行会话管理和数据交换管理，即组织和协调两个会话进程之间的通信，并对数据交换进行管理。\n\n**表示层**：主要功能是协商和建立数据交换的格式，解决各应用程序之间在数据格式表示上的差异,，以使一个主机应用层的数据可以被另一个主机的应用层理解。\n\n**应用层**：用户应用程序和网络之间的接口，完成用户希望在网络上完成的各种工作。该层的协议有<u>HTTP、DNS协议</u>，数据单位为<u>报文</u>。\n\n\n\nTCP/IP协议相当于五层协议的下面两层合并成一层（网络接口层）。\n\n## 6.应用层\n\n**DNS：**域名解析，提供了主机名和IP地址相互转化的服务，域名的层次结构如下所示：\n\n![](/images/react/2021122001.png)\n\nDNS使用的端口是53，可以使用UDP或TCP协议，如果返回的响应超过512字节或者是区域传输则会使用TCP进行运输。\n\n**FTP：**使用TCP进行连接，需要两个连接（控制连接、数据连接）来传输一个文件。端口：20、21.有主动传输和被动传输两种模式。\n\n**DHCP：**动态主机配置协议.一个局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。\n\n电子邮件协议：一个电子邮件系统由三部分组成：用户代理、邮件服务器以及邮件协议。发送协议常用**SMTP**（只能发送ASCII码，MIMI扩充了SMTP，可以发送非ASCII码）、读取协议常用POP3（阅后即焚，最新版本可不焚）和IMAP。\n\n**常用端口：**如下图所示：\n\n![](/images/react/2021122002.png)\n\n须知0-1023是熟知端口，客服端生产的随机端口必须大于1024。\n\n## 7.传输层（报文）\n\n### 7.1 UDP和TCP的区别\n\nUDP 用户数据报协议，无连接，尽最大可能交付，没有拥塞控制，面对报文（应用层传下来的报文，只在其头部添加UDP首部），支持一对一、一对多、多对一、多对多的连接。\n\nTCP面向连接，提供可靠交付，有拥塞控制（TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复），提供全双工通信，面向字节流（应用层传下来的报文看成字节流，并拆分成数据块），连接一对一。\n\n### 7.2 UDP首部\n\nUDP的首部有8字节以及12字节的伪首部，伪首部是为了计算检验而临时添加，首部8字节包括2字节源端口和目的端口，2字节长度和检验和。以下为UDP首部示意图：\n\n![](/images/react/2021122003.png)\n\n### 7.3 TCP首部\n\nTCP首部长度不固定，有20字节的固定头部，具体情况如下图所示：\n\n![](/images/react/2021122004.png)\n\n序号：当前报文的序号，下一个报文的序号则为前一个报文的序号加上前一个报文的长度。\n\n确认号：因为TCP协议是可靠的一对一协议，所以当前报文发出时也要有希望接收到的下一个报文的序号，将接收到的下一个报文的序号则是前一个报文的确认号。\n\n数据偏移：实际就是TCP报文头部长度。\n\n确认位ACK：只有当ACK=1时确认号字段才有效。\n\n同步位SYN：建立连接时用来同步序号。SYN=1,ACK=0表示这是一个请求连接报文，SYN=1,ACK=1是同意连接的响应报文。\n\n终止位FIN：FIN=1表示释放一个连接。\n\n### 7.4 TCP的三次握手\n\n第一次握手：客服端向服务端发送请求报文，其中ACK=0,SYN=1。\n\n第二次握手：服务端返回客服端一个响应报文，其中SYN=1,ACK=1。\n\n第三次握手：客服端向服务端发送确认报文，其中SYN=0,ACK=1。\n\n三次握手成功建立连接。\n\n**需要三次握手的原因（面试题）：**\n\n三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。如果没有三次握手，会出现这种现象，客户端发送请求访问报文给服务端，但是这个报文在网络中受阻延迟没有及时传达到，而超时后客户端会再次发送请求报文给服务端，此时服务端就会收到并且要处理先后两条请求报文，有了三次握手，客户端会忽略服务器发送的第二条响应请求报文，不会进行第三次握手。\n\n### 7.5 TCP的四次挥手\n\n在客户端要关闭服务时需要和服务端进行四次挥手。\n\n第一次挥手：客户端向服务端发送释放请求报文，其中FIN=1\n\n第二次挥手：TCP处于半关闭状态，客户端无法再发送报文给服务端，服务端可以向客户端发送服务器端发送还未传送完毕的数据。\n\n第三次挥手：服务端向客户端发送释放报文，FIN=1\n\n第四次挥手：客户端向服务端发送确认报文，等待2MSL后释放应用。服务端收到确认报文后释放应用。\n\n**四次挥手的原因（面试题）：**\n\n客户端发送释放报文后，TCP处于半关闭状态，这个状态能让服务端继续发送未传送完毕的数据，数据传完后，服务器会发送释放报文。\n\n**四次挥手过程中TIME_WAIT的原因（面试题）：**\n\n在客户端收到服务端的FIN释放报文时回有2MSL（MSL 一个报文在网络中最大的存活时间）的等待时间，这是为了确保自己发送给服务端的确认报文能顺利传达，若出现意外则可以再次发送。也可让这段连续时间内产生的报文在网络中消失以避免干扰之后的连接请求。\n\n## 8.网络层（分组）\n\n网络层是整个互联网的核心，其中最关键的就是IP协议，其将异构的物理网络连接起来。与IP协议配套的还有地址解析协议ARP、网际控制报文协议ICMP、网际组管理协议IGMP。\n\n### 8.1 IP协议\n\n通过IP地址，保证了联网设备的唯一性，实现了网络通信的面向无连接和不可靠的传输功能。\n\nIP地址的偏执方式经历了三个历史阶段：分类、子网划分、无分类。\n\n**分类**：32位的IP地址根据网络号的长度（8、16、24位）分为A、B、C类地址以及多播地址D类、今后使用地址E类。具体几类地址的区别如下所示：\n\n![](/images/react/2021122005.png)\n\n**子网划分**：对于局域网内部的网络可进行子网划分，首先需要配置子网掩码。\n\n**无分类**：无分类编制CIDR消除了以上两种情况概念，使用网络前缀和主机号来对IP地址进行编码。如128.14.35.7/20 就是使用CIDR进行表示，其代表前 20 位为网络前缀。\n\n### 8.2 ARP协议\n\nARP协议实现了通过IP地址获得<u>MAC地址</u>。MAC地址是主机的硬件地址。每个主机都有一个<u>ARP高速缓存</u>，即IP地址到MAC地址的映射表。如果主机A没有主机B的MAC地址，只要获得其IP地址，通过广播的形式将访问信息发送给B，B 收到请求就将其MAC地址发送给A，这样A就可以通过ARP发送信息给B了。\n\n### 8.3 ICMP协议\n\nICMP协议是为了更有效地转发IP数据包，它被封装在IP数据报中，但不属于高层协议。<u>Ping</u>是ICNMP的一个重要应用，主要用来测试两台主机之间的连通性。\n\n### 8.4 虚拟专用网VPN\n\n因为实际的主机数要远远大于IP地址，并且也不需要把所有的主机接入到外部的互联网中，所以就有了专用地址，即机构内的计算机可使用仅在本机构有效的IP地址。VPN使用公用的互联网作为本机构各个专用网之间的通信载体，其功能是在公用网络上建立专用网络，进行加密通讯，即只要本机构的主机才能进行通讯。\n\n### 8.5 网络地址转换NAT\n\n专用网内部主机想要和互联网上的主机进行通讯时即要使用NAT进行IP地址的转换，把本地IP转为全球IP。\n\n### 8.6 路由选择协议\n\n内部路由选择协议有<u>RIP</u>和<u>OSPF</u>协议。RIP 是一种基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。RIP 协议实现简单，开销小。但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。为了克服RIP的缺点而开发了OSPF协议，即开放最短路径优先。\n\n外部路由选择协议有<u>BGP</u>协议——边界网关协议。\n\n## 9.数据链路层（帧）\n\n### 9.1 基本问题\n\n**封装成帧**：链路层以帧的形式进行传输，需要将网络层的分组添加首部和尾部用于标记帧的开始和结束。\n\n**透明传输**：如果帧内部有首部或尾部相同的内容就容易错误定位帧的位置，所以需要在帧内部添加响应的<u>转义字符</u>以解决该问题。\n\n**差错检测**：目前使用最广泛的是<u>CRC</u>（循环冗余检验）来检查比特差错。\n\n### 9.2 信道分类\n\n分为广播信道和点对点信道，广播信道是一对多通信，采用<u>CSMA/CD协议</u>，表示载波监听多点接入/碰撞检测；点对点信道是一对一通信，采用<u>PPP协议</u>，这是一种用户计算机和 ISP 进行通信时所使用的数据链路层协议。\n\n### 9.3 信道复用技术\n\n包括频分复用、时分复用、波分复用、码分复用。\n\n### 9.4 局域网、以太网与虚拟局域网\n\n局域网是一种<u>广播信道</u>，以太网是<u>特殊的局域网</u>。局域网的特点为网络是一个单位所拥有，且地理位置和站点数目均有限。按照拓扑结构可将局域网分为<u>星型、环形、直线型</u>；以太网是一种星型局域网，早期使用集线器作为传输数据的物理设备，作用于比特而非帧，现在使用<u>交换机</u>，这是一种链路层设备。交换机具有学习功能，学习交换表的内容，交换表存储着MAC地址到接口的映射。<u>虚拟局域网</u>建立了与物理位置无关的逻辑组，只有在同一个虚拟局域网内的成员才能收到链路层广播信息。\n\n## 10.物理层\n\n### 10.1 通信方式\n\n根据信息的传输方向分为单工通信（单向传输）、半双工通信（双向交替传输）、全双工通信（双向同时传输）。\n\n### 10.2 带通调制\n\n带同调制将离散的数字信号转为连续的模拟信号。","slug":"计算机网络复习","published":1,"updated":"2021-12-20T12:50:46.354Z","_id":"ckxeksgl20004lotv47gs87cf","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<p><em>本文来源于<a href=\"https://github.com/CyC2018/CS-Notes%EF%BC%8C%E6%98%AF%E5%9C%A8%E9%98%85%E8%AF%BB%E8%AF%A5%E8%B5%84%E6%BA%90%E6%97%B6%E7%9A%84%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%EF%BC%8C%E4%BD%86%E6%9C%89%E5%A4%A7%E9%83%A8%E5%88%86%E7%9A%84%E5%86%85%E5%AE%B9%E5%92%8C%E5%8E%9F%E6%96%87%E4%B8%80%E8%87%B4%E3%80%82\">https://github.com/CyC2018/CS-Notes，是在阅读该资源时的笔记整理，但有大部分的内容和原文一致。</a></em></p>\n<hr>\n<h2 id=\"1-network、internet、Internet的区别\"><a href=\"#1-network、internet、Internet的区别\" class=\"headerlink\" title=\"1.network、internet、Internet的区别\"></a>1.network、internet、Internet的区别</h2><p>network是计算机的网络，把计算机主机连接起来（有很多种网络，包括局域网、广域网等），而internet则是把<u>广域网</u>的一种，是泛指，不一定采取TCP/IP协议；internet是网络的网络。Internet是全球最大最开放的internet，<u>采用TCP/IP协议</u>。</p>\n<h2 id=\"2-ISP\"><a href=\"#2-ISP\" class=\"headerlink\" title=\"2.ISP\"></a>2.ISP</h2><p>ISP（Internet Service Provider 互联网服务提供商）在互联网<u>主干网上</u>提供相应服务使个体设备接入互联网。在中国比较热门的互联网提供商有移动、联通、电信等。</p>\n<h2 id=\"3-主机之间通信方式\"><a href=\"#3-主机之间通信方式\" class=\"headerlink\" title=\"3.主机之间通信方式\"></a>3.主机之间通信方式</h2><p><strong>C/S 客户-服务器方式：</strong>以服务器为核心提供客户资源</p>\n<p><strong>P2P 点对点方式：</strong>双方对等、共享资源（比如迅雷下载）</p>\n<h2 id=\"4-电路交换、分组交换\"><a href=\"#4-电路交换、分组交换\" class=\"headerlink\" title=\"4.电路交换、分组交换\"></a>4.电路交换、分组交换</h2><p><strong>电路交换：</strong>电路交换用于电话通信系统，两个用户要通信之前需要建立一条专用的物理链路，并且在整个通信过程中始终<u>占用</u>该链路。由于通信的过程中不可能一直在使用传输线路，因此电路交换对线路的利用率很低，往往不到 10%。</p>\n<p><strong>分组交换：</strong>每个分组都有首部和尾部，包含了源地址和目的地址等控制信息，在同一个传输线路上同时传输多个分组互相不会影响，因此在同一条传输线路上允许同时传输多个分组，也就是说分组交换<u>不需要占用传输线路</u>。</p>\n<h2 id=\"5-计算机网络体系结构\"><a href=\"#5-计算机网络体系结构\" class=\"headerlink\" title=\"5.计算机网络体系结构\"></a>5.计算机网络体系结构</h2><p>OSI 国际标准的网络体系结构，共有七层，自下往上分别是<u>物理层、数据链路层、网络层、运输层、会话层、应用层</u>。</p>\n<p>TCP/IP协议是民间运用最广泛的网络协议，它简化了OSI协议，只有四层，自下往上是<u>网络接口层、网际层、运输层、应用层</u>。</p>\n<p>因为上面两个结构有层数太多或太少的问题，所以往往采取折中的方式即五层协议的体系架构，它自下往上分别是<u>物理层、数据链路层、网络层、运输层、应用层</u>。</p>\n<p><strong>物理层</strong>：传输的是可以通过<u>物理介质</u>运输的数据比特流。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。</p>\n<p><strong>数据链路层</strong>：物理寻址，同时将原始的比特流转变为<u>逻辑传输路线</u>。主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧，该层涉及到的协议有<u>以太网协议、点对点协议</u>。</p>\n<p><strong>网络层</strong>：它通过路由选择算法，为分组通过通信子网选择最适当的路径，以实现网络的互连功能。具体地说，数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、流量控制、拥塞控制等将信息从一台网络设备传送到另一台网络设备。该层协议的代表包括<u>IP、IPX 协议</u>等。</p>\n<p><strong>运输层</strong>：该层是通信子网和资源子网的接口和桥梁，起到了承上启下的作用。该层提供会话层和网络层之间的传输服务，这种服务从会话层获得数据，并在必要时对数据进行分割然后将数据传递到网络层，并确保数据能正确无误地传送到网络层。因此,运输层负责提供主机中<u>两个进程之间数据的可靠传送</u>。运输层的目的是向用户透明地传送报文，它向高层屏蔽了下层数据通信的细节。该层主要有两种协议：<u>TCP协议、UDP协议</u>。</p>\n<p><strong>会话层</strong>：其主要任务是负责维护两个实体之间的会话连接确保点到点的传输不被中断，并进行会话管理和数据交换管理，即组织和协调两个会话进程之间的通信，并对数据交换进行管理。</p>\n<p><strong>表示层</strong>：主要功能是协商和建立数据交换的格式，解决各应用程序之间在数据格式表示上的差异,，以使一个主机应用层的数据可以被另一个主机的应用层理解。</p>\n<p><strong>应用层</strong>：用户应用程序和网络之间的接口，完成用户希望在网络上完成的各种工作。该层的协议有<u>HTTP、DNS协议</u>，数据单位为<u>报文</u>。</p>\n<p>TCP/IP协议相当于五层协议的下面两层合并成一层（网络接口层）。</p>\n<h2 id=\"6-应用层\"><a href=\"#6-应用层\" class=\"headerlink\" title=\"6.应用层\"></a>6.应用层</h2><p><strong>DNS：</strong>域名解析，提供了主机名和IP地址相互转化的服务，域名的层次结构如下所示：</p>\n<p><img src=\"/images/react/2021122001.png\"></p>\n<p>DNS使用的端口是53，可以使用UDP或TCP协议，如果返回的响应超过512字节或者是区域传输则会使用TCP进行运输。</p>\n<p><strong>FTP：</strong>使用TCP进行连接，需要两个连接（控制连接、数据连接）来传输一个文件。端口：20、21.有主动传输和被动传输两种模式。</p>\n<p><strong>DHCP：</strong>动态主机配置协议.一个局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。</p>\n<p>电子邮件协议：一个电子邮件系统由三部分组成：用户代理、邮件服务器以及邮件协议。发送协议常用<strong>SMTP</strong>（只能发送ASCII码，MIMI扩充了SMTP，可以发送非ASCII码）、读取协议常用POP3（阅后即焚，最新版本可不焚）和IMAP。</p>\n<p><strong>常用端口：</strong>如下图所示：</p>\n<p><img src=\"/images/react/2021122002.png\"></p>\n<p>须知0-1023是熟知端口，客服端生产的随机端口必须大于1024。</p>\n<h2 id=\"7-传输层（报文）\"><a href=\"#7-传输层（报文）\" class=\"headerlink\" title=\"7.传输层（报文）\"></a>7.传输层（报文）</h2><h3 id=\"7-1-UDP和TCP的区别\"><a href=\"#7-1-UDP和TCP的区别\" class=\"headerlink\" title=\"7.1 UDP和TCP的区别\"></a>7.1 UDP和TCP的区别</h3><p>UDP 用户数据报协议，无连接，尽最大可能交付，没有拥塞控制，面对报文（应用层传下来的报文，只在其头部添加UDP首部），支持一对一、一对多、多对一、多对多的连接。</p>\n<p>TCP面向连接，提供可靠交付，有拥塞控制（TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复），提供全双工通信，面向字节流（应用层传下来的报文看成字节流，并拆分成数据块），连接一对一。</p>\n<h3 id=\"7-2-UDP首部\"><a href=\"#7-2-UDP首部\" class=\"headerlink\" title=\"7.2 UDP首部\"></a>7.2 UDP首部</h3><p>UDP的首部有8字节以及12字节的伪首部，伪首部是为了计算检验而临时添加，首部8字节包括2字节源端口和目的端口，2字节长度和检验和。以下为UDP首部示意图：</p>\n<p><img src=\"/images/react/2021122003.png\"></p>\n<h3 id=\"7-3-TCP首部\"><a href=\"#7-3-TCP首部\" class=\"headerlink\" title=\"7.3 TCP首部\"></a>7.3 TCP首部</h3><p>TCP首部长度不固定，有20字节的固定头部，具体情况如下图所示：</p>\n<p><img src=\"/images/react/2021122004.png\"></p>\n<p>序号：当前报文的序号，下一个报文的序号则为前一个报文的序号加上前一个报文的长度。</p>\n<p>确认号：因为TCP协议是可靠的一对一协议，所以当前报文发出时也要有希望接收到的下一个报文的序号，将接收到的下一个报文的序号则是前一个报文的确认号。</p>\n<p>数据偏移：实际就是TCP报文头部长度。</p>\n<p>确认位ACK：只有当ACK=1时确认号字段才有效。</p>\n<p>同步位SYN：建立连接时用来同步序号。SYN=1,ACK=0表示这是一个请求连接报文，SYN=1,ACK=1是同意连接的响应报文。</p>\n<p>终止位FIN：FIN=1表示释放一个连接。</p>\n<h3 id=\"7-4-TCP的三次握手\"><a href=\"#7-4-TCP的三次握手\" class=\"headerlink\" title=\"7.4 TCP的三次握手\"></a>7.4 TCP的三次握手</h3><p>第一次握手：客服端向服务端发送请求报文，其中ACK=0,SYN=1。</p>\n<p>第二次握手：服务端返回客服端一个响应报文，其中SYN=1,ACK=1。</p>\n<p>第三次握手：客服端向服务端发送确认报文，其中SYN=0,ACK=1。</p>\n<p>三次握手成功建立连接。</p>\n<p><strong>需要三次握手的原因（面试题）：</strong></p>\n<p>三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。如果没有三次握手，会出现这种现象，客户端发送请求访问报文给服务端，但是这个报文在网络中受阻延迟没有及时传达到，而超时后客户端会再次发送请求报文给服务端，此时服务端就会收到并且要处理先后两条请求报文，有了三次握手，客户端会忽略服务器发送的第二条响应请求报文，不会进行第三次握手。</p>\n<h3 id=\"7-5-TCP的四次挥手\"><a href=\"#7-5-TCP的四次挥手\" class=\"headerlink\" title=\"7.5 TCP的四次挥手\"></a>7.5 TCP的四次挥手</h3><p>在客户端要关闭服务时需要和服务端进行四次挥手。</p>\n<p>第一次挥手：客户端向服务端发送释放请求报文，其中FIN=1</p>\n<p>第二次挥手：TCP处于半关闭状态，客户端无法再发送报文给服务端，服务端可以向客户端发送服务器端发送还未传送完毕的数据。</p>\n<p>第三次挥手：服务端向客户端发送释放报文，FIN=1</p>\n<p>第四次挥手：客户端向服务端发送确认报文，等待2MSL后释放应用。服务端收到确认报文后释放应用。</p>\n<p><strong>四次挥手的原因（面试题）：</strong></p>\n<p>客户端发送释放报文后，TCP处于半关闭状态，这个状态能让服务端继续发送未传送完毕的数据，数据传完后，服务器会发送释放报文。</p>\n<p><strong>四次挥手过程中TIME_WAIT的原因（面试题）：</strong></p>\n<p>在客户端收到服务端的FIN释放报文时回有2MSL（MSL 一个报文在网络中最大的存活时间）的等待时间，这是为了确保自己发送给服务端的确认报文能顺利传达，若出现意外则可以再次发送。也可让这段连续时间内产生的报文在网络中消失以避免干扰之后的连接请求。</p>\n<h2 id=\"8-网络层（分组）\"><a href=\"#8-网络层（分组）\" class=\"headerlink\" title=\"8.网络层（分组）\"></a>8.网络层（分组）</h2><p>网络层是整个互联网的核心，其中最关键的就是IP协议，其将异构的物理网络连接起来。与IP协议配套的还有地址解析协议ARP、网际控制报文协议ICMP、网际组管理协议IGMP。</p>\n<h3 id=\"8-1-IP协议\"><a href=\"#8-1-IP协议\" class=\"headerlink\" title=\"8.1 IP协议\"></a>8.1 IP协议</h3><p>通过IP地址，保证了联网设备的唯一性，实现了网络通信的面向无连接和不可靠的传输功能。</p>\n<p>IP地址的偏执方式经历了三个历史阶段：分类、子网划分、无分类。</p>\n<p><strong>分类</strong>：32位的IP地址根据网络号的长度（8、16、24位）分为A、B、C类地址以及多播地址D类、今后使用地址E类。具体几类地址的区别如下所示：</p>\n<p><img src=\"/images/react/2021122005.png\"></p>\n<p><strong>子网划分</strong>：对于局域网内部的网络可进行子网划分，首先需要配置子网掩码。</p>\n<p><strong>无分类</strong>：无分类编制CIDR消除了以上两种情况概念，使用网络前缀和主机号来对IP地址进行编码。如128.14.35.7/20 就是使用CIDR进行表示，其代表前 20 位为网络前缀。</p>\n<h3 id=\"8-2-ARP协议\"><a href=\"#8-2-ARP协议\" class=\"headerlink\" title=\"8.2 ARP协议\"></a>8.2 ARP协议</h3><p>ARP协议实现了通过IP地址获得<u>MAC地址</u>。MAC地址是主机的硬件地址。每个主机都有一个<u>ARP高速缓存</u>，即IP地址到MAC地址的映射表。如果主机A没有主机B的MAC地址，只要获得其IP地址，通过广播的形式将访问信息发送给B，B 收到请求就将其MAC地址发送给A，这样A就可以通过ARP发送信息给B了。</p>\n<h3 id=\"8-3-ICMP协议\"><a href=\"#8-3-ICMP协议\" class=\"headerlink\" title=\"8.3 ICMP协议\"></a>8.3 ICMP协议</h3><p>ICMP协议是为了更有效地转发IP数据包，它被封装在IP数据报中，但不属于高层协议。<u>Ping</u>是ICNMP的一个重要应用，主要用来测试两台主机之间的连通性。</p>\n<h3 id=\"8-4-虚拟专用网VPN\"><a href=\"#8-4-虚拟专用网VPN\" class=\"headerlink\" title=\"8.4 虚拟专用网VPN\"></a>8.4 虚拟专用网VPN</h3><p>因为实际的主机数要远远大于IP地址，并且也不需要把所有的主机接入到外部的互联网中，所以就有了专用地址，即机构内的计算机可使用仅在本机构有效的IP地址。VPN使用公用的互联网作为本机构各个专用网之间的通信载体，其功能是在公用网络上建立专用网络，进行加密通讯，即只要本机构的主机才能进行通讯。</p>\n<h3 id=\"8-5-网络地址转换NAT\"><a href=\"#8-5-网络地址转换NAT\" class=\"headerlink\" title=\"8.5 网络地址转换NAT\"></a>8.5 网络地址转换NAT</h3><p>专用网内部主机想要和互联网上的主机进行通讯时即要使用NAT进行IP地址的转换，把本地IP转为全球IP。</p>\n<h3 id=\"8-6-路由选择协议\"><a href=\"#8-6-路由选择协议\" class=\"headerlink\" title=\"8.6 路由选择协议\"></a>8.6 路由选择协议</h3><p>内部路由选择协议有<u>RIP</u>和<u>OSPF</u>协议。RIP 是一种基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。RIP 协议实现简单，开销小。但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。为了克服RIP的缺点而开发了OSPF协议，即开放最短路径优先。</p>\n<p>外部路由选择协议有<u>BGP</u>协议——边界网关协议。</p>\n<h2 id=\"9-数据链路层（帧）\"><a href=\"#9-数据链路层（帧）\" class=\"headerlink\" title=\"9.数据链路层（帧）\"></a>9.数据链路层（帧）</h2><h3 id=\"9-1-基本问题\"><a href=\"#9-1-基本问题\" class=\"headerlink\" title=\"9.1 基本问题\"></a>9.1 基本问题</h3><p><strong>封装成帧</strong>：链路层以帧的形式进行传输，需要将网络层的分组添加首部和尾部用于标记帧的开始和结束。</p>\n<p><strong>透明传输</strong>：如果帧内部有首部或尾部相同的内容就容易错误定位帧的位置，所以需要在帧内部添加响应的<u>转义字符</u>以解决该问题。</p>\n<p><strong>差错检测</strong>：目前使用最广泛的是<u>CRC</u>（循环冗余检验）来检查比特差错。</p>\n<h3 id=\"9-2-信道分类\"><a href=\"#9-2-信道分类\" class=\"headerlink\" title=\"9.2 信道分类\"></a>9.2 信道分类</h3><p>分为广播信道和点对点信道，广播信道是一对多通信，采用<u>CSMA/CD协议</u>，表示载波监听多点接入/碰撞检测；点对点信道是一对一通信，采用<u>PPP协议</u>，这是一种用户计算机和 ISP 进行通信时所使用的数据链路层协议。</p>\n<h3 id=\"9-3-信道复用技术\"><a href=\"#9-3-信道复用技术\" class=\"headerlink\" title=\"9.3 信道复用技术\"></a>9.3 信道复用技术</h3><p>包括频分复用、时分复用、波分复用、码分复用。</p>\n<h3 id=\"9-4-局域网、以太网与虚拟局域网\"><a href=\"#9-4-局域网、以太网与虚拟局域网\" class=\"headerlink\" title=\"9.4 局域网、以太网与虚拟局域网\"></a>9.4 局域网、以太网与虚拟局域网</h3><p>局域网是一种<u>广播信道</u>，以太网是<u>特殊的局域网</u>。局域网的特点为网络是一个单位所拥有，且地理位置和站点数目均有限。按照拓扑结构可将局域网分为<u>星型、环形、直线型</u>；以太网是一种星型局域网，早期使用集线器作为传输数据的物理设备，作用于比特而非帧，现在使用<u>交换机</u>，这是一种链路层设备。交换机具有学习功能，学习交换表的内容，交换表存储着MAC地址到接口的映射。<u>虚拟局域网</u>建立了与物理位置无关的逻辑组，只有在同一个虚拟局域网内的成员才能收到链路层广播信息。</p>\n<h2 id=\"10-物理层\"><a href=\"#10-物理层\" class=\"headerlink\" title=\"10.物理层\"></a>10.物理层</h2><h3 id=\"10-1-通信方式\"><a href=\"#10-1-通信方式\" class=\"headerlink\" title=\"10.1 通信方式\"></a>10.1 通信方式</h3><p>根据信息的传输方向分为单工通信（单向传输）、半双工通信（双向交替传输）、全双工通信（双向同时传输）。</p>\n<h3 id=\"10-2-带通调制\"><a href=\"#10-2-带通调制\" class=\"headerlink\" title=\"10.2 带通调制\"></a>10.2 带通调制</h3><p>带同调制将离散的数字信号转为连续的模拟信号。</p>\n","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":"<hr>\n<p><em>本文来源于<a href=\"https://github.com/CyC2018/CS-Notes%EF%BC%8C%E6%98%AF%E5%9C%A8%E9%98%85%E8%AF%BB%E8%AF%A5%E8%B5%84%E6%BA%90%E6%97%B6%E7%9A%84%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%EF%BC%8C%E4%BD%86%E6%9C%89%E5%A4%A7%E9%83%A8%E5%88%86%E7%9A%84%E5%86%85%E5%AE%B9%E5%92%8C%E5%8E%9F%E6%96%87%E4%B8%80%E8%87%B4%E3%80%82\">https://github.com/CyC2018/CS-Notes，是在阅读该资源时的笔记整理，但有大部分的内容和原文一致。</a></em></p>\n<hr>\n<h2 id=\"1-network、internet、Internet的区别\"><a href=\"#1-network、internet、Internet的区别\" class=\"headerlink\" title=\"1.network、internet、Internet的区别\"></a>1.network、internet、Internet的区别</h2><p>network是计算机的网络，把计算机主机连接起来（有很多种网络，包括局域网、广域网等），而internet则是把<u>广域网</u>的一种，是泛指，不一定采取TCP/IP协议；internet是网络的网络。Internet是全球最大最开放的internet，<u>采用TCP/IP协议</u>。</p>\n<h2 id=\"2-ISP\"><a href=\"#2-ISP\" class=\"headerlink\" title=\"2.ISP\"></a>2.ISP</h2><p>ISP（Internet Service Provider 互联网服务提供商）在互联网<u>主干网上</u>提供相应服务使个体设备接入互联网。在中国比较热门的互联网提供商有移动、联通、电信等。</p>\n<h2 id=\"3-主机之间通信方式\"><a href=\"#3-主机之间通信方式\" class=\"headerlink\" title=\"3.主机之间通信方式\"></a>3.主机之间通信方式</h2><p><strong>C/S 客户-服务器方式：</strong>以服务器为核心提供客户资源</p>\n<p><strong>P2P 点对点方式：</strong>双方对等、共享资源（比如迅雷下载）</p>\n<h2 id=\"4-电路交换、分组交换\"><a href=\"#4-电路交换、分组交换\" class=\"headerlink\" title=\"4.电路交换、分组交换\"></a>4.电路交换、分组交换</h2><p><strong>电路交换：</strong>电路交换用于电话通信系统，两个用户要通信之前需要建立一条专用的物理链路，并且在整个通信过程中始终<u>占用</u>该链路。由于通信的过程中不可能一直在使用传输线路，因此电路交换对线路的利用率很低，往往不到 10%。</p>\n<p><strong>分组交换：</strong>每个分组都有首部和尾部，包含了源地址和目的地址等控制信息，在同一个传输线路上同时传输多个分组互相不会影响，因此在同一条传输线路上允许同时传输多个分组，也就是说分组交换<u>不需要占用传输线路</u>。</p>\n<h2 id=\"5-计算机网络体系结构\"><a href=\"#5-计算机网络体系结构\" class=\"headerlink\" title=\"5.计算机网络体系结构\"></a>5.计算机网络体系结构</h2><p>OSI 国际标准的网络体系结构，共有七层，自下往上分别是<u>物理层、数据链路层、网络层、运输层、会话层、应用层</u>。</p>\n<p>TCP/IP协议是民间运用最广泛的网络协议，它简化了OSI协议，只有四层，自下往上是<u>网络接口层、网际层、运输层、应用层</u>。</p>\n<p>因为上面两个结构有层数太多或太少的问题，所以往往采取折中的方式即五层协议的体系架构，它自下往上分别是<u>物理层、数据链路层、网络层、运输层、应用层</u>。</p>\n<p><strong>物理层</strong>：传输的是可以通过<u>物理介质</u>运输的数据比特流。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。</p>\n<p><strong>数据链路层</strong>：物理寻址，同时将原始的比特流转变为<u>逻辑传输路线</u>。主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧，该层涉及到的协议有<u>以太网协议、点对点协议</u>。</p>\n<p><strong>网络层</strong>：它通过路由选择算法，为分组通过通信子网选择最适当的路径，以实现网络的互连功能。具体地说，数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、流量控制、拥塞控制等将信息从一台网络设备传送到另一台网络设备。该层协议的代表包括<u>IP、IPX 协议</u>等。</p>\n<p><strong>运输层</strong>：该层是通信子网和资源子网的接口和桥梁，起到了承上启下的作用。该层提供会话层和网络层之间的传输服务，这种服务从会话层获得数据，并在必要时对数据进行分割然后将数据传递到网络层，并确保数据能正确无误地传送到网络层。因此,运输层负责提供主机中<u>两个进程之间数据的可靠传送</u>。运输层的目的是向用户透明地传送报文，它向高层屏蔽了下层数据通信的细节。该层主要有两种协议：<u>TCP协议、UDP协议</u>。</p>\n<p><strong>会话层</strong>：其主要任务是负责维护两个实体之间的会话连接确保点到点的传输不被中断，并进行会话管理和数据交换管理，即组织和协调两个会话进程之间的通信，并对数据交换进行管理。</p>\n<p><strong>表示层</strong>：主要功能是协商和建立数据交换的格式，解决各应用程序之间在数据格式表示上的差异,，以使一个主机应用层的数据可以被另一个主机的应用层理解。</p>\n<p><strong>应用层</strong>：用户应用程序和网络之间的接口，完成用户希望在网络上完成的各种工作。该层的协议有<u>HTTP、DNS协议</u>，数据单位为<u>报文</u>。</p>\n<p>TCP/IP协议相当于五层协议的下面两层合并成一层（网络接口层）。</p>\n<h2 id=\"6-应用层\"><a href=\"#6-应用层\" class=\"headerlink\" title=\"6.应用层\"></a>6.应用层</h2><p><strong>DNS：</strong>域名解析，提供了主机名和IP地址相互转化的服务，域名的层次结构如下所示：</p>\n<p><img src=\"/images/react/2021122001.png\"></p>\n<p>DNS使用的端口是53，可以使用UDP或TCP协议，如果返回的响应超过512字节或者是区域传输则会使用TCP进行运输。</p>\n<p><strong>FTP：</strong>使用TCP进行连接，需要两个连接（控制连接、数据连接）来传输一个文件。端口：20、21.有主动传输和被动传输两种模式。</p>\n<p><strong>DHCP：</strong>动态主机配置协议.一个局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。</p>\n<p>电子邮件协议：一个电子邮件系统由三部分组成：用户代理、邮件服务器以及邮件协议。发送协议常用<strong>SMTP</strong>（只能发送ASCII码，MIMI扩充了SMTP，可以发送非ASCII码）、读取协议常用POP3（阅后即焚，最新版本可不焚）和IMAP。</p>\n<p><strong>常用端口：</strong>如下图所示：</p>\n<p><img src=\"/images/react/2021122002.png\"></p>\n<p>须知0-1023是熟知端口，客服端生产的随机端口必须大于1024。</p>\n<h2 id=\"7-传输层（报文）\"><a href=\"#7-传输层（报文）\" class=\"headerlink\" title=\"7.传输层（报文）\"></a>7.传输层（报文）</h2><h3 id=\"7-1-UDP和TCP的区别\"><a href=\"#7-1-UDP和TCP的区别\" class=\"headerlink\" title=\"7.1 UDP和TCP的区别\"></a>7.1 UDP和TCP的区别</h3><p>UDP 用户数据报协议，无连接，尽最大可能交付，没有拥塞控制，面对报文（应用层传下来的报文，只在其头部添加UDP首部），支持一对一、一对多、多对一、多对多的连接。</p>\n<p>TCP面向连接，提供可靠交付，有拥塞控制（TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复），提供全双工通信，面向字节流（应用层传下来的报文看成字节流，并拆分成数据块），连接一对一。</p>\n<h3 id=\"7-2-UDP首部\"><a href=\"#7-2-UDP首部\" class=\"headerlink\" title=\"7.2 UDP首部\"></a>7.2 UDP首部</h3><p>UDP的首部有8字节以及12字节的伪首部，伪首部是为了计算检验而临时添加，首部8字节包括2字节源端口和目的端口，2字节长度和检验和。以下为UDP首部示意图：</p>\n<p><img src=\"/images/react/2021122003.png\"></p>\n<h3 id=\"7-3-TCP首部\"><a href=\"#7-3-TCP首部\" class=\"headerlink\" title=\"7.3 TCP首部\"></a>7.3 TCP首部</h3><p>TCP首部长度不固定，有20字节的固定头部，具体情况如下图所示：</p>\n<p><img src=\"/images/react/2021122004.png\"></p>\n<p>序号：当前报文的序号，下一个报文的序号则为前一个报文的序号加上前一个报文的长度。</p>\n<p>确认号：因为TCP协议是可靠的一对一协议，所以当前报文发出时也要有希望接收到的下一个报文的序号，将接收到的下一个报文的序号则是前一个报文的确认号。</p>\n<p>数据偏移：实际就是TCP报文头部长度。</p>\n<p>确认位ACK：只有当ACK=1时确认号字段才有效。</p>\n<p>同步位SYN：建立连接时用来同步序号。SYN=1,ACK=0表示这是一个请求连接报文，SYN=1,ACK=1是同意连接的响应报文。</p>\n<p>终止位FIN：FIN=1表示释放一个连接。</p>\n<h3 id=\"7-4-TCP的三次握手\"><a href=\"#7-4-TCP的三次握手\" class=\"headerlink\" title=\"7.4 TCP的三次握手\"></a>7.4 TCP的三次握手</h3><p>第一次握手：客服端向服务端发送请求报文，其中ACK=0,SYN=1。</p>\n<p>第二次握手：服务端返回客服端一个响应报文，其中SYN=1,ACK=1。</p>\n<p>第三次握手：客服端向服务端发送确认报文，其中SYN=0,ACK=1。</p>\n<p>三次握手成功建立连接。</p>\n<p><strong>需要三次握手的原因（面试题）：</strong></p>\n<p>三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。如果没有三次握手，会出现这种现象，客户端发送请求访问报文给服务端，但是这个报文在网络中受阻延迟没有及时传达到，而超时后客户端会再次发送请求报文给服务端，此时服务端就会收到并且要处理先后两条请求报文，有了三次握手，客户端会忽略服务器发送的第二条响应请求报文，不会进行第三次握手。</p>\n<h3 id=\"7-5-TCP的四次挥手\"><a href=\"#7-5-TCP的四次挥手\" class=\"headerlink\" title=\"7.5 TCP的四次挥手\"></a>7.5 TCP的四次挥手</h3><p>在客户端要关闭服务时需要和服务端进行四次挥手。</p>\n<p>第一次挥手：客户端向服务端发送释放请求报文，其中FIN=1</p>\n<p>第二次挥手：TCP处于半关闭状态，客户端无法再发送报文给服务端，服务端可以向客户端发送服务器端发送还未传送完毕的数据。</p>\n<p>第三次挥手：服务端向客户端发送释放报文，FIN=1</p>\n<p>第四次挥手：客户端向服务端发送确认报文，等待2MSL后释放应用。服务端收到确认报文后释放应用。</p>\n<p><strong>四次挥手的原因（面试题）：</strong></p>\n<p>客户端发送释放报文后，TCP处于半关闭状态，这个状态能让服务端继续发送未传送完毕的数据，数据传完后，服务器会发送释放报文。</p>\n<p><strong>四次挥手过程中TIME_WAIT的原因（面试题）：</strong></p>\n<p>在客户端收到服务端的FIN释放报文时回有2MSL（MSL 一个报文在网络中最大的存活时间）的等待时间，这是为了确保自己发送给服务端的确认报文能顺利传达，若出现意外则可以再次发送。也可让这段连续时间内产生的报文在网络中消失以避免干扰之后的连接请求。</p>\n<h2 id=\"8-网络层（分组）\"><a href=\"#8-网络层（分组）\" class=\"headerlink\" title=\"8.网络层（分组）\"></a>8.网络层（分组）</h2><p>网络层是整个互联网的核心，其中最关键的就是IP协议，其将异构的物理网络连接起来。与IP协议配套的还有地址解析协议ARP、网际控制报文协议ICMP、网际组管理协议IGMP。</p>\n<h3 id=\"8-1-IP协议\"><a href=\"#8-1-IP协议\" class=\"headerlink\" title=\"8.1 IP协议\"></a>8.1 IP协议</h3><p>通过IP地址，保证了联网设备的唯一性，实现了网络通信的面向无连接和不可靠的传输功能。</p>\n<p>IP地址的偏执方式经历了三个历史阶段：分类、子网划分、无分类。</p>\n<p><strong>分类</strong>：32位的IP地址根据网络号的长度（8、16、24位）分为A、B、C类地址以及多播地址D类、今后使用地址E类。具体几类地址的区别如下所示：</p>\n<p><img src=\"/images/react/2021122005.png\"></p>\n<p><strong>子网划分</strong>：对于局域网内部的网络可进行子网划分，首先需要配置子网掩码。</p>\n<p><strong>无分类</strong>：无分类编制CIDR消除了以上两种情况概念，使用网络前缀和主机号来对IP地址进行编码。如128.14.35.7/20 就是使用CIDR进行表示，其代表前 20 位为网络前缀。</p>\n<h3 id=\"8-2-ARP协议\"><a href=\"#8-2-ARP协议\" class=\"headerlink\" title=\"8.2 ARP协议\"></a>8.2 ARP协议</h3><p>ARP协议实现了通过IP地址获得<u>MAC地址</u>。MAC地址是主机的硬件地址。每个主机都有一个<u>ARP高速缓存</u>，即IP地址到MAC地址的映射表。如果主机A没有主机B的MAC地址，只要获得其IP地址，通过广播的形式将访问信息发送给B，B 收到请求就将其MAC地址发送给A，这样A就可以通过ARP发送信息给B了。</p>\n<h3 id=\"8-3-ICMP协议\"><a href=\"#8-3-ICMP协议\" class=\"headerlink\" title=\"8.3 ICMP协议\"></a>8.3 ICMP协议</h3><p>ICMP协议是为了更有效地转发IP数据包，它被封装在IP数据报中，但不属于高层协议。<u>Ping</u>是ICNMP的一个重要应用，主要用来测试两台主机之间的连通性。</p>\n<h3 id=\"8-4-虚拟专用网VPN\"><a href=\"#8-4-虚拟专用网VPN\" class=\"headerlink\" title=\"8.4 虚拟专用网VPN\"></a>8.4 虚拟专用网VPN</h3><p>因为实际的主机数要远远大于IP地址，并且也不需要把所有的主机接入到外部的互联网中，所以就有了专用地址，即机构内的计算机可使用仅在本机构有效的IP地址。VPN使用公用的互联网作为本机构各个专用网之间的通信载体，其功能是在公用网络上建立专用网络，进行加密通讯，即只要本机构的主机才能进行通讯。</p>\n<h3 id=\"8-5-网络地址转换NAT\"><a href=\"#8-5-网络地址转换NAT\" class=\"headerlink\" title=\"8.5 网络地址转换NAT\"></a>8.5 网络地址转换NAT</h3><p>专用网内部主机想要和互联网上的主机进行通讯时即要使用NAT进行IP地址的转换，把本地IP转为全球IP。</p>\n<h3 id=\"8-6-路由选择协议\"><a href=\"#8-6-路由选择协议\" class=\"headerlink\" title=\"8.6 路由选择协议\"></a>8.6 路由选择协议</h3><p>内部路由选择协议有<u>RIP</u>和<u>OSPF</u>协议。RIP 是一种基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。RIP 协议实现简单，开销小。但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。为了克服RIP的缺点而开发了OSPF协议，即开放最短路径优先。</p>\n<p>外部路由选择协议有<u>BGP</u>协议——边界网关协议。</p>\n<h2 id=\"9-数据链路层（帧）\"><a href=\"#9-数据链路层（帧）\" class=\"headerlink\" title=\"9.数据链路层（帧）\"></a>9.数据链路层（帧）</h2><h3 id=\"9-1-基本问题\"><a href=\"#9-1-基本问题\" class=\"headerlink\" title=\"9.1 基本问题\"></a>9.1 基本问题</h3><p><strong>封装成帧</strong>：链路层以帧的形式进行传输，需要将网络层的分组添加首部和尾部用于标记帧的开始和结束。</p>\n<p><strong>透明传输</strong>：如果帧内部有首部或尾部相同的内容就容易错误定位帧的位置，所以需要在帧内部添加响应的<u>转义字符</u>以解决该问题。</p>\n<p><strong>差错检测</strong>：目前使用最广泛的是<u>CRC</u>（循环冗余检验）来检查比特差错。</p>\n<h3 id=\"9-2-信道分类\"><a href=\"#9-2-信道分类\" class=\"headerlink\" title=\"9.2 信道分类\"></a>9.2 信道分类</h3><p>分为广播信道和点对点信道，广播信道是一对多通信，采用<u>CSMA/CD协议</u>，表示载波监听多点接入/碰撞检测；点对点信道是一对一通信，采用<u>PPP协议</u>，这是一种用户计算机和 ISP 进行通信时所使用的数据链路层协议。</p>\n<h3 id=\"9-3-信道复用技术\"><a href=\"#9-3-信道复用技术\" class=\"headerlink\" title=\"9.3 信道复用技术\"></a>9.3 信道复用技术</h3><p>包括频分复用、时分复用、波分复用、码分复用。</p>\n<h3 id=\"9-4-局域网、以太网与虚拟局域网\"><a href=\"#9-4-局域网、以太网与虚拟局域网\" class=\"headerlink\" title=\"9.4 局域网、以太网与虚拟局域网\"></a>9.4 局域网、以太网与虚拟局域网</h3><p>局域网是一种<u>广播信道</u>，以太网是<u>特殊的局域网</u>。局域网的特点为网络是一个单位所拥有，且地理位置和站点数目均有限。按照拓扑结构可将局域网分为<u>星型、环形、直线型</u>；以太网是一种星型局域网，早期使用集线器作为传输数据的物理设备，作用于比特而非帧，现在使用<u>交换机</u>，这是一种链路层设备。交换机具有学习功能，学习交换表的内容，交换表存储着MAC地址到接口的映射。<u>虚拟局域网</u>建立了与物理位置无关的逻辑组，只有在同一个虚拟局域网内的成员才能收到链路层广播信息。</p>\n<h2 id=\"10-物理层\"><a href=\"#10-物理层\" class=\"headerlink\" title=\"10.物理层\"></a>10.物理层</h2><h3 id=\"10-1-通信方式\"><a href=\"#10-1-通信方式\" class=\"headerlink\" title=\"10.1 通信方式\"></a>10.1 通信方式</h3><p>根据信息的传输方向分为单工通信（单向传输）、半双工通信（双向交替传输）、全双工通信（双向同时传输）。</p>\n<h3 id=\"10-2-带通调制\"><a href=\"#10-2-带通调制\" class=\"headerlink\" title=\"10.2 带通调制\"></a>10.2 带通调制</h3><p>带同调制将离散的数字信号转为连续的模拟信号。</p>\n"},{"title":"操作系统基础复习","date":"2021-12-20T11:15:21.000Z","_content":"\n------\n\n*本文来源于https://github.com/CyC2018/CS-Notes，是在阅读该资源时的笔记整理，但有大部分的内容和原文一致。*\n\n------\n\n\n\n## 1.基本特质\n\n操作系统的基本特征为并发、共享、虚拟、异步。\n\n**并发**：同一时间段运行多个程序，区分<u>并行</u>，并行指同一时刻运行多个指令，需要硬件支持。\n\n**共享**：指系统的资源可以被多个并发进程同时共享。共享方式分为<u>互斥共享</u>（同一时刻只允许一个进程访问，其共享资源被称为临界资源，比如打印机）和<u>同时共享</u>。\n\n**虚拟**：把一个物理实体转换为多个逻辑实体，虚拟技术有<u>时分复用技术</u>（比如多个进程并发执行）和<u>空分复用技术</u>（比如虚拟内存）。\n\n**异步**：进程不是一次性执行完毕。\n\n## 2.基本功能\n\n包括<u>进程管理</u>、<u>内存管理</u>、<u>文件管理</u>和<u>设备管理</u>。\n\n## 3.系统调用\n\n如果一个进程在用户态需要使用内核态功能，则进行系统调度，Linux的系统调度有<u>进程控制、进程通信、文件操作、设备操作、信息维护、安全</u>。\n\n## 4.大内核和微内核\n\n**大内核**：将操作系统功能作为一个紧密结合的整体放在内核中，各模块共享信息，具有高性能。\n\n**微内核**：将部分操作系统功能移除内核，只有微内核这部分模块处在内核态，可降低系统的复杂性。\n\n## 5.中断分类\n\n**外中断**：由CPU执行指令以外的事件引起的中断，如I/O完成中断等。\n\n**异常**：由CPU执行指令内部事件引起的中断，如地址越界等。\n\n**陷入**：在用户程序中使用系统调用引起。\n\n## 6.进程管理\n\n### 6.1 进程和线程\n\n**进程**：资源分配的基本单位，PCB（进程控制块）描述进程的基本信息和运行状态。\n\n**线程**：独立调度的基本单位，一个进程有多个线程，它们共享进程资源。\n\n**进程和线程的区别（面试题）：**\n\n进程是<u>资源分配</u>的基本单位，线程不拥有资源，但是线程可以访问所属进程的资源。\n\n进程<u>开销</u>大，在创建、撤销和切换进程时，系统都要为之分配或回收资源，而线程切换只需要保存和设置少量寄存器内容，开销小。\n\n进程<u>通信</u>需要借助IPC，线程间通过直接读写同一进程数据可进行通信。\n\n### 6.2 进程状态转换\n\n进程的状态转换如图所示：\n\n![](/images/react/2021122006.png)\n\n其中，<u>处于就绪状态和运行状态的进程可以相互转换</u>，其他状态进程只能单向转换。处于阻塞状态的进程是缺少资源（不包括时间资源）的进程。\n\n### 6.3 批处理系统\n\n该系统没有太多用户操作，调度算法包括<u>FCFS</u>（先来先服务，有利于长作业）、<u>SJF</u>（短作业优先，不利于长作业）、<u>SRTN</u>（最短剩余时间优先）。该系统的调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。\n\n### 6.4 交互式系统\n\n该系统有大量用户交互操作，调度算法包括<u>时间片轮转</u>、<u>优先级调度</u>、<u>多级反馈列表</u>。该系统的调度算法目标是快速进行响应。\n\n### 6.5 实时系统\n\n实时系统要求一个请求在一个确定时间内得到响应。分为<u>硬实时和软实时</u>，前者必须满足绝对的截止时间，后者可以容忍一定的超时。\n\n","source":"_posts/操作系统复习.md","raw":"---\ntitle: 操作系统基础复习\ndate: 2021-12-20 19:15:21\ntags: [学习,前端面试，操作系统]\ncategories:\n- 博客\n---\n\n------\n\n*本文来源于https://github.com/CyC2018/CS-Notes，是在阅读该资源时的笔记整理，但有大部分的内容和原文一致。*\n\n------\n\n\n\n## 1.基本特质\n\n操作系统的基本特征为并发、共享、虚拟、异步。\n\n**并发**：同一时间段运行多个程序，区分<u>并行</u>，并行指同一时刻运行多个指令，需要硬件支持。\n\n**共享**：指系统的资源可以被多个并发进程同时共享。共享方式分为<u>互斥共享</u>（同一时刻只允许一个进程访问，其共享资源被称为临界资源，比如打印机）和<u>同时共享</u>。\n\n**虚拟**：把一个物理实体转换为多个逻辑实体，虚拟技术有<u>时分复用技术</u>（比如多个进程并发执行）和<u>空分复用技术</u>（比如虚拟内存）。\n\n**异步**：进程不是一次性执行完毕。\n\n## 2.基本功能\n\n包括<u>进程管理</u>、<u>内存管理</u>、<u>文件管理</u>和<u>设备管理</u>。\n\n## 3.系统调用\n\n如果一个进程在用户态需要使用内核态功能，则进行系统调度，Linux的系统调度有<u>进程控制、进程通信、文件操作、设备操作、信息维护、安全</u>。\n\n## 4.大内核和微内核\n\n**大内核**：将操作系统功能作为一个紧密结合的整体放在内核中，各模块共享信息，具有高性能。\n\n**微内核**：将部分操作系统功能移除内核，只有微内核这部分模块处在内核态，可降低系统的复杂性。\n\n## 5.中断分类\n\n**外中断**：由CPU执行指令以外的事件引起的中断，如I/O完成中断等。\n\n**异常**：由CPU执行指令内部事件引起的中断，如地址越界等。\n\n**陷入**：在用户程序中使用系统调用引起。\n\n## 6.进程管理\n\n### 6.1 进程和线程\n\n**进程**：资源分配的基本单位，PCB（进程控制块）描述进程的基本信息和运行状态。\n\n**线程**：独立调度的基本单位，一个进程有多个线程，它们共享进程资源。\n\n**进程和线程的区别（面试题）：**\n\n进程是<u>资源分配</u>的基本单位，线程不拥有资源，但是线程可以访问所属进程的资源。\n\n进程<u>开销</u>大，在创建、撤销和切换进程时，系统都要为之分配或回收资源，而线程切换只需要保存和设置少量寄存器内容，开销小。\n\n进程<u>通信</u>需要借助IPC，线程间通过直接读写同一进程数据可进行通信。\n\n### 6.2 进程状态转换\n\n进程的状态转换如图所示：\n\n![](/images/react/2021122006.png)\n\n其中，<u>处于就绪状态和运行状态的进程可以相互转换</u>，其他状态进程只能单向转换。处于阻塞状态的进程是缺少资源（不包括时间资源）的进程。\n\n### 6.3 批处理系统\n\n该系统没有太多用户操作，调度算法包括<u>FCFS</u>（先来先服务，有利于长作业）、<u>SJF</u>（短作业优先，不利于长作业）、<u>SRTN</u>（最短剩余时间优先）。该系统的调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。\n\n### 6.4 交互式系统\n\n该系统有大量用户交互操作，调度算法包括<u>时间片轮转</u>、<u>优先级调度</u>、<u>多级反馈列表</u>。该系统的调度算法目标是快速进行响应。\n\n### 6.5 实时系统\n\n实时系统要求一个请求在一个确定时间内得到响应。分为<u>硬实时和软实时</u>，前者必须满足绝对的截止时间，后者可以容忍一定的超时。\n\n","slug":"操作系统复习","published":1,"updated":"2021-12-20T12:50:40.992Z","_id":"ckxel082g000glotvdm9d6by7","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<p><em>本文来源于<a href=\"https://github.com/CyC2018/CS-Notes%EF%BC%8C%E6%98%AF%E5%9C%A8%E9%98%85%E8%AF%BB%E8%AF%A5%E8%B5%84%E6%BA%90%E6%97%B6%E7%9A%84%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%EF%BC%8C%E4%BD%86%E6%9C%89%E5%A4%A7%E9%83%A8%E5%88%86%E7%9A%84%E5%86%85%E5%AE%B9%E5%92%8C%E5%8E%9F%E6%96%87%E4%B8%80%E8%87%B4%E3%80%82\">https://github.com/CyC2018/CS-Notes，是在阅读该资源时的笔记整理，但有大部分的内容和原文一致。</a></em></p>\n<hr>\n<h2 id=\"1-基本特质\"><a href=\"#1-基本特质\" class=\"headerlink\" title=\"1.基本特质\"></a>1.基本特质</h2><p>操作系统的基本特征为并发、共享、虚拟、异步。</p>\n<p><strong>并发</strong>：同一时间段运行多个程序，区分<u>并行</u>，并行指同一时刻运行多个指令，需要硬件支持。</p>\n<p><strong>共享</strong>：指系统的资源可以被多个并发进程同时共享。共享方式分为<u>互斥共享</u>（同一时刻只允许一个进程访问，其共享资源被称为临界资源，比如打印机）和<u>同时共享</u>。</p>\n<p><strong>虚拟</strong>：把一个物理实体转换为多个逻辑实体，虚拟技术有<u>时分复用技术</u>（比如多个进程并发执行）和<u>空分复用技术</u>（比如虚拟内存）。</p>\n<p><strong>异步</strong>：进程不是一次性执行完毕。</p>\n<h2 id=\"2-基本功能\"><a href=\"#2-基本功能\" class=\"headerlink\" title=\"2.基本功能\"></a>2.基本功能</h2><p>包括<u>进程管理</u>、<u>内存管理</u>、<u>文件管理</u>和<u>设备管理</u>。</p>\n<h2 id=\"3-系统调用\"><a href=\"#3-系统调用\" class=\"headerlink\" title=\"3.系统调用\"></a>3.系统调用</h2><p>如果一个进程在用户态需要使用内核态功能，则进行系统调度，Linux的系统调度有<u>进程控制、进程通信、文件操作、设备操作、信息维护、安全</u>。</p>\n<h2 id=\"4-大内核和微内核\"><a href=\"#4-大内核和微内核\" class=\"headerlink\" title=\"4.大内核和微内核\"></a>4.大内核和微内核</h2><p><strong>大内核</strong>：将操作系统功能作为一个紧密结合的整体放在内核中，各模块共享信息，具有高性能。</p>\n<p><strong>微内核</strong>：将部分操作系统功能移除内核，只有微内核这部分模块处在内核态，可降低系统的复杂性。</p>\n<h2 id=\"5-中断分类\"><a href=\"#5-中断分类\" class=\"headerlink\" title=\"5.中断分类\"></a>5.中断分类</h2><p><strong>外中断</strong>：由CPU执行指令以外的事件引起的中断，如I/O完成中断等。</p>\n<p><strong>异常</strong>：由CPU执行指令内部事件引起的中断，如地址越界等。</p>\n<p><strong>陷入</strong>：在用户程序中使用系统调用引起。</p>\n<h2 id=\"6-进程管理\"><a href=\"#6-进程管理\" class=\"headerlink\" title=\"6.进程管理\"></a>6.进程管理</h2><h3 id=\"6-1-进程和线程\"><a href=\"#6-1-进程和线程\" class=\"headerlink\" title=\"6.1 进程和线程\"></a>6.1 进程和线程</h3><p><strong>进程</strong>：资源分配的基本单位，PCB（进程控制块）描述进程的基本信息和运行状态。</p>\n<p><strong>线程</strong>：独立调度的基本单位，一个进程有多个线程，它们共享进程资源。</p>\n<p><strong>进程和线程的区别（面试题）：</strong></p>\n<p>进程是<u>资源分配</u>的基本单位，线程不拥有资源，但是线程可以访问所属进程的资源。</p>\n<p>进程<u>开销</u>大，在创建、撤销和切换进程时，系统都要为之分配或回收资源，而线程切换只需要保存和设置少量寄存器内容，开销小。</p>\n<p>进程<u>通信</u>需要借助IPC，线程间通过直接读写同一进程数据可进行通信。</p>\n<h3 id=\"6-2-进程状态转换\"><a href=\"#6-2-进程状态转换\" class=\"headerlink\" title=\"6.2 进程状态转换\"></a>6.2 进程状态转换</h3><p>进程的状态转换如图所示：</p>\n<p><img src=\"/images/react/2021122006.png\"></p>\n<p>其中，<u>处于就绪状态和运行状态的进程可以相互转换</u>，其他状态进程只能单向转换。处于阻塞状态的进程是缺少资源（不包括时间资源）的进程。</p>\n<h3 id=\"6-3-批处理系统\"><a href=\"#6-3-批处理系统\" class=\"headerlink\" title=\"6.3 批处理系统\"></a>6.3 批处理系统</h3><p>该系统没有太多用户操作，调度算法包括<u>FCFS</u>（先来先服务，有利于长作业）、<u>SJF</u>（短作业优先，不利于长作业）、<u>SRTN</u>（最短剩余时间优先）。该系统的调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。</p>\n<h3 id=\"6-4-交互式系统\"><a href=\"#6-4-交互式系统\" class=\"headerlink\" title=\"6.4 交互式系统\"></a>6.4 交互式系统</h3><p>该系统有大量用户交互操作，调度算法包括<u>时间片轮转</u>、<u>优先级调度</u>、<u>多级反馈列表</u>。该系统的调度算法目标是快速进行响应。</p>\n<h3 id=\"6-5-实时系统\"><a href=\"#6-5-实时系统\" class=\"headerlink\" title=\"6.5 实时系统\"></a>6.5 实时系统</h3><p>实时系统要求一个请求在一个确定时间内得到响应。分为<u>硬实时和软实时</u>，前者必须满足绝对的截止时间，后者可以容忍一定的超时。</p>\n","site":{"data":{"galleries":[{"name":"她们","cover":"/images/beauty/02.jfif","description":"好喜欢她们啊。","photos":["/images/beauty/01.png","/images/beauty/02.jfif","/images/beauty/03.jfif","/images/beauty/05.JPG","/images/beauty/06.JPG","/images/beauty/07.PNG","/images/beauty/08.PNG","/images/beauty/12.png","/images/beauty/13.png","/images/beauty/14.png","/images/beauty/15.png","/images/beauty/16.png"]},{"name":"书摘","cover":"/images/book/01.jpg","description":"这些文字是不能被遗忘的。","photos":["/images/book/01.jpg"]}]}},"excerpt":"","more":"<hr>\n<p><em>本文来源于<a href=\"https://github.com/CyC2018/CS-Notes%EF%BC%8C%E6%98%AF%E5%9C%A8%E9%98%85%E8%AF%BB%E8%AF%A5%E8%B5%84%E6%BA%90%E6%97%B6%E7%9A%84%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%EF%BC%8C%E4%BD%86%E6%9C%89%E5%A4%A7%E9%83%A8%E5%88%86%E7%9A%84%E5%86%85%E5%AE%B9%E5%92%8C%E5%8E%9F%E6%96%87%E4%B8%80%E8%87%B4%E3%80%82\">https://github.com/CyC2018/CS-Notes，是在阅读该资源时的笔记整理，但有大部分的内容和原文一致。</a></em></p>\n<hr>\n<h2 id=\"1-基本特质\"><a href=\"#1-基本特质\" class=\"headerlink\" title=\"1.基本特质\"></a>1.基本特质</h2><p>操作系统的基本特征为并发、共享、虚拟、异步。</p>\n<p><strong>并发</strong>：同一时间段运行多个程序，区分<u>并行</u>，并行指同一时刻运行多个指令，需要硬件支持。</p>\n<p><strong>共享</strong>：指系统的资源可以被多个并发进程同时共享。共享方式分为<u>互斥共享</u>（同一时刻只允许一个进程访问，其共享资源被称为临界资源，比如打印机）和<u>同时共享</u>。</p>\n<p><strong>虚拟</strong>：把一个物理实体转换为多个逻辑实体，虚拟技术有<u>时分复用技术</u>（比如多个进程并发执行）和<u>空分复用技术</u>（比如虚拟内存）。</p>\n<p><strong>异步</strong>：进程不是一次性执行完毕。</p>\n<h2 id=\"2-基本功能\"><a href=\"#2-基本功能\" class=\"headerlink\" title=\"2.基本功能\"></a>2.基本功能</h2><p>包括<u>进程管理</u>、<u>内存管理</u>、<u>文件管理</u>和<u>设备管理</u>。</p>\n<h2 id=\"3-系统调用\"><a href=\"#3-系统调用\" class=\"headerlink\" title=\"3.系统调用\"></a>3.系统调用</h2><p>如果一个进程在用户态需要使用内核态功能，则进行系统调度，Linux的系统调度有<u>进程控制、进程通信、文件操作、设备操作、信息维护、安全</u>。</p>\n<h2 id=\"4-大内核和微内核\"><a href=\"#4-大内核和微内核\" class=\"headerlink\" title=\"4.大内核和微内核\"></a>4.大内核和微内核</h2><p><strong>大内核</strong>：将操作系统功能作为一个紧密结合的整体放在内核中，各模块共享信息，具有高性能。</p>\n<p><strong>微内核</strong>：将部分操作系统功能移除内核，只有微内核这部分模块处在内核态，可降低系统的复杂性。</p>\n<h2 id=\"5-中断分类\"><a href=\"#5-中断分类\" class=\"headerlink\" title=\"5.中断分类\"></a>5.中断分类</h2><p><strong>外中断</strong>：由CPU执行指令以外的事件引起的中断，如I/O完成中断等。</p>\n<p><strong>异常</strong>：由CPU执行指令内部事件引起的中断，如地址越界等。</p>\n<p><strong>陷入</strong>：在用户程序中使用系统调用引起。</p>\n<h2 id=\"6-进程管理\"><a href=\"#6-进程管理\" class=\"headerlink\" title=\"6.进程管理\"></a>6.进程管理</h2><h3 id=\"6-1-进程和线程\"><a href=\"#6-1-进程和线程\" class=\"headerlink\" title=\"6.1 进程和线程\"></a>6.1 进程和线程</h3><p><strong>进程</strong>：资源分配的基本单位，PCB（进程控制块）描述进程的基本信息和运行状态。</p>\n<p><strong>线程</strong>：独立调度的基本单位，一个进程有多个线程，它们共享进程资源。</p>\n<p><strong>进程和线程的区别（面试题）：</strong></p>\n<p>进程是<u>资源分配</u>的基本单位，线程不拥有资源，但是线程可以访问所属进程的资源。</p>\n<p>进程<u>开销</u>大，在创建、撤销和切换进程时，系统都要为之分配或回收资源，而线程切换只需要保存和设置少量寄存器内容，开销小。</p>\n<p>进程<u>通信</u>需要借助IPC，线程间通过直接读写同一进程数据可进行通信。</p>\n<h3 id=\"6-2-进程状态转换\"><a href=\"#6-2-进程状态转换\" class=\"headerlink\" title=\"6.2 进程状态转换\"></a>6.2 进程状态转换</h3><p>进程的状态转换如图所示：</p>\n<p><img src=\"/images/react/2021122006.png\"></p>\n<p>其中，<u>处于就绪状态和运行状态的进程可以相互转换</u>，其他状态进程只能单向转换。处于阻塞状态的进程是缺少资源（不包括时间资源）的进程。</p>\n<h3 id=\"6-3-批处理系统\"><a href=\"#6-3-批处理系统\" class=\"headerlink\" title=\"6.3 批处理系统\"></a>6.3 批处理系统</h3><p>该系统没有太多用户操作，调度算法包括<u>FCFS</u>（先来先服务，有利于长作业）、<u>SJF</u>（短作业优先，不利于长作业）、<u>SRTN</u>（最短剩余时间优先）。该系统的调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。</p>\n<h3 id=\"6-4-交互式系统\"><a href=\"#6-4-交互式系统\" class=\"headerlink\" title=\"6.4 交互式系统\"></a>6.4 交互式系统</h3><p>该系统有大量用户交互操作，调度算法包括<u>时间片轮转</u>、<u>优先级调度</u>、<u>多级反馈列表</u>。该系统的调度算法目标是快速进行响应。</p>\n<h3 id=\"6-5-实时系统\"><a href=\"#6-5-实时系统\" class=\"headerlink\" title=\"6.5 实时系统\"></a>6.5 实时系统</h3><p>实时系统要求一个请求在一个确定时间内得到响应。分为<u>硬实时和软实时</u>，前者必须满足绝对的截止时间，后者可以容忍一定的超时。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckxcouokb0001ngtv0zsrcu16","category_id":"ckxcouokh0004ngtva6izb1lk","_id":"ckxcouoks000ingtv20ys2ahc"},{"post_id":"ckxcouokf0003ngtvax4egf9c","category_id":"ckxcouokh0004ngtva6izb1lk","_id":"ckxcouokx000ongtv44xkgm7d"},{"post_id":"ckxcouokj0007ngtv6t6m7gib","category_id":"ckxcouokh0004ngtva6izb1lk","_id":"ckxcouoky000rngtvbf9q1yn9"},{"post_id":"ckxcouokl0009ngtvh7hp8hpj","category_id":"ckxcouokw000nngtv6xr9fu6z","_id":"ckxcouokz000xngtvgzd19z12"},{"post_id":"ckxcouokm000bngtvgx710uc6","category_id":"ckxcouokw000nngtv6xr9fu6z","_id":"ckxcouol00010ngtvc0szgpko"},{"post_id":"ckxcouokp000fngtv8j4jdryf","category_id":"ckxcouokw000nngtv6xr9fu6z","_id":"ckxcouol10015ngtv289k45wg"},{"post_id":"ckxcouokr000gngtvbkwua0be","category_id":"ckxcouokw000nngtv6xr9fu6z","_id":"ckxcouol20019ngtve3m7b28i"},{"post_id":"ckxcouoku000kngtv3knr4wv6","category_id":"ckxcouokw000nngtv6xr9fu6z","_id":"ckxcouol3001cngtv6uwgei89"},{"post_id":"ckxcouokv000mngtv1qrq1igx","category_id":"ckxcouokw000nngtv6xr9fu6z","_id":"ckxcouol3001fngtv34l97r4s"},{"post_id":"ckxcouol6001lngtveknt68sf","category_id":"ckxcouokw000nngtv6xr9fu6z","_id":"ckxcouolk001pngtv86o46usl"},{"post_id":"ckxcouol6001mngtve7300321","category_id":"ckxcouokh0004ngtva6izb1lk","_id":"ckxcouolk001qngtv2dch92u4"},{"post_id":"ckxeksgkv0000lotvdkcr3chz","category_id":"ckxcouokh0004ngtva6izb1lk","_id":"ckxeksgl00003lotvcaik2d8v"},{"post_id":"ckxeksgl20004lotv47gs87cf","category_id":"ckxcouokh0004ngtva6izb1lk","_id":"ckxeksglc0006lotv1jsr21hi"},{"post_id":"ckxel082g000glotvdm9d6by7","category_id":"ckxcouokh0004ngtva6izb1lk","_id":"ckxel082m000jlotvd8up86cu"}],"PostTag":[{"post_id":"ckxcouokb0001ngtv0zsrcu16","tag_id":"ckxcouoki0005ngtvbxmy272s","_id":"ckxcouokv000lngtvfw7tc9x6"},{"post_id":"ckxcouokb0001ngtv0zsrcu16","tag_id":"ckxcouokn000dngtv3mml26xv","_id":"ckxcouokx000pngtv5c3qgrp2"},{"post_id":"ckxcouokf0003ngtvax4egf9c","tag_id":"ckxcouoki0005ngtvbxmy272s","_id":"ckxcouokz000ungtvbkk22ybd"},{"post_id":"ckxcouokf0003ngtvax4egf9c","tag_id":"ckxcouokn000dngtv3mml26xv","_id":"ckxcouokz000vngtv7mgx6pud"},{"post_id":"ckxcouokj0007ngtv6t6m7gib","tag_id":"ckxcouoki0005ngtvbxmy272s","_id":"ckxcouol00012ngtvd5oo8iq1"},{"post_id":"ckxcouokj0007ngtv6t6m7gib","tag_id":"ckxcouokn000dngtv3mml26xv","_id":"ckxcouol10013ngtvh91l2qb6"},{"post_id":"ckxcouokl0009ngtvh7hp8hpj","tag_id":"ckxcouol00011ngtv3p4icw6y","_id":"ckxcouol10017ngtvhnj1c7f3"},{"post_id":"ckxcouokm000bngtvgx710uc6","tag_id":"ckxcouol00011ngtv3p4icw6y","_id":"ckxcouol2001bngtvhcmw869m"},{"post_id":"ckxcouokp000fngtv8j4jdryf","tag_id":"ckxcouol00011ngtv3p4icw6y","_id":"ckxcouol3001engtv5ujtak8e"},{"post_id":"ckxcouokr000gngtvbkwua0be","tag_id":"ckxcouol00011ngtv3p4icw6y","_id":"ckxcouol4001hngtv9clzflw4"},{"post_id":"ckxcouoku000kngtv3knr4wv6","tag_id":"ckxcouol00011ngtv3p4icw6y","_id":"ckxcouol4001jngtveav52qqh"},{"post_id":"ckxcouokv000mngtv1qrq1igx","tag_id":"ckxcouol00011ngtv3p4icw6y","_id":"ckxcouol4001kngtv1c4sflk8"},{"post_id":"ckxcouol6001lngtveknt68sf","tag_id":"ckxcouol00011ngtv3p4icw6y","_id":"ckxcouol7001nngtvcxy13108"},{"post_id":"ckxcouol6001mngtve7300321","tag_id":"ckxcouolg001ongtvbe1m4t86","_id":"ckxcouoll001rngtvcnx09463"},{"post_id":"ckxcouol6001mngtve7300321","tag_id":"ckxcouokn000dngtv3mml26xv","_id":"ckxcouoll001sngtv4gcx7up9"},{"post_id":"ckxeksgkv0000lotvdkcr3chz","tag_id":"ckxcouoki0005ngtvbxmy272s","_id":"ckxeksgl00001lotvfy0p8hgt"},{"post_id":"ckxeksgkv0000lotvdkcr3chz","tag_id":"ckxcouokn000dngtv3mml26xv","_id":"ckxeksgl00002lotv02cuhr0q"},{"post_id":"ckxeksgl20004lotv47gs87cf","tag_id":"ckxeksgl40005lotv8tez3nvm","_id":"ckxeksgld0008lotv9w7zcc0w"},{"post_id":"ckxeksgl20004lotv47gs87cf","tag_id":"ckxcouokn000dngtv3mml26xv","_id":"ckxeksgld0009lotv8ykqfdle"},{"post_id":"ckxeksgl20004lotv47gs87cf","tag_id":"ckxeksglc0007lotvfl9lgdpc","_id":"ckxeksgle000alotv2ucoem5k"},{"post_id":"ckxel082g000glotvdm9d6by7","tag_id":"ckxcouokn000dngtv3mml26xv","_id":"ckxel082m000ilotvc1ou7m4b"},{"post_id":"ckxel082g000glotvdm9d6by7","tag_id":"ckxel16y5000llotv6rog9g5f","_id":"ckxel16y6000mlotvc6a78sol"}],"Tag":[{"name":"React","_id":"ckxcouoki0005ngtvbxmy272s"},{"name":"学习","_id":"ckxcouokn000dngtv3mml26xv"},{"name":"日记","_id":"ckxcouol00011ngtv3p4icw6y"},{"name":"hexo","_id":"ckxcouolg001ongtvbe1m4t86"},{"name":"计算机","_id":"ckxeksgl40005lotv8tez3nvm"},{"name":"前端面试","_id":"ckxeksglc0007lotvfl9lgdpc"},{"name":"前端面试，操作系统","_id":"ckxel16y5000llotv6rog9g5f"}]}}