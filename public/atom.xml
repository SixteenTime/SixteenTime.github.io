<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>16:21:59</title>
  
  <subtitle>这个标题没有任何意义！</subtitle>
  <link href="https://sixteentime.github.io/atom.xml" rel="self"/>
  
  <link href="https://sixteentime.github.io/"/>
  <updated>2021-12-20T12:50:40.992Z</updated>
  <id>https://sixteentime.github.io/</id>
  
  <author>
    <name>十六太</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>操作系统基础复习</title>
    <link href="https://sixteentime.github.io/2021/12/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/"/>
    <id>https://sixteentime.github.io/2021/12/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-12-20T11:15:21.000Z</published>
    <updated>2021-12-20T12:50:40.992Z</updated>
    
    <content type="html"><![CDATA[<hr><p><em>本文来源于<a href="https://github.com/CyC2018/CS-Notes%EF%BC%8C%E6%98%AF%E5%9C%A8%E9%98%85%E8%AF%BB%E8%AF%A5%E8%B5%84%E6%BA%90%E6%97%B6%E7%9A%84%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%EF%BC%8C%E4%BD%86%E6%9C%89%E5%A4%A7%E9%83%A8%E5%88%86%E7%9A%84%E5%86%85%E5%AE%B9%E5%92%8C%E5%8E%9F%E6%96%87%E4%B8%80%E8%87%B4%E3%80%82">https://github.com/CyC2018/CS-Notes，是在阅读该资源时的笔记整理，但有大部分的内容和原文一致。</a></em></p><hr><h2 id="1-基本特质"><a href="#1-基本特质" class="headerlink" title="1.基本特质"></a>1.基本特质</h2><p>操作系统的基本特征为并发、共享、虚拟、异步。</p><p><strong>并发</strong>：同一时间段运行多个程序，区分<u>并行</u>，并行指同一时刻运行多个指令，需要硬件支持。</p><p><strong>共享</strong>：指系统的资源可以被多个并发进程同时共享。共享方式分为<u>互斥共享</u>（同一时刻只允许一个进程访问，其共享资源被称为临界资源，比如打印机）和<u>同时共享</u>。</p><p><strong>虚拟</strong>：把一个物理实体转换为多个逻辑实体，虚拟技术有<u>时分复用技术</u>（比如多个进程并发执行）和<u>空分复用技术</u>（比如虚拟内存）。</p><p><strong>异步</strong>：进程不是一次性执行完毕。</p><h2 id="2-基本功能"><a href="#2-基本功能" class="headerlink" title="2.基本功能"></a>2.基本功能</h2><p>包括<u>进程管理</u>、<u>内存管理</u>、<u>文件管理</u>和<u>设备管理</u>。</p><h2 id="3-系统调用"><a href="#3-系统调用" class="headerlink" title="3.系统调用"></a>3.系统调用</h2><p>如果一个进程在用户态需要使用内核态功能，则进行系统调度，Linux的系统调度有<u>进程控制、进程通信、文件操作、设备操作、信息维护、安全</u>。</p><h2 id="4-大内核和微内核"><a href="#4-大内核和微内核" class="headerlink" title="4.大内核和微内核"></a>4.大内核和微内核</h2><p><strong>大内核</strong>：将操作系统功能作为一个紧密结合的整体放在内核中，各模块共享信息，具有高性能。</p><p><strong>微内核</strong>：将部分操作系统功能移除内核，只有微内核这部分模块处在内核态，可降低系统的复杂性。</p><h2 id="5-中断分类"><a href="#5-中断分类" class="headerlink" title="5.中断分类"></a>5.中断分类</h2><p><strong>外中断</strong>：由CPU执行指令以外的事件引起的中断，如I/O完成中断等。</p><p><strong>异常</strong>：由CPU执行指令内部事件引起的中断，如地址越界等。</p><p><strong>陷入</strong>：在用户程序中使用系统调用引起。</p><h2 id="6-进程管理"><a href="#6-进程管理" class="headerlink" title="6.进程管理"></a>6.进程管理</h2><h3 id="6-1-进程和线程"><a href="#6-1-进程和线程" class="headerlink" title="6.1 进程和线程"></a>6.1 进程和线程</h3><p><strong>进程</strong>：资源分配的基本单位，PCB（进程控制块）描述进程的基本信息和运行状态。</p><p><strong>线程</strong>：独立调度的基本单位，一个进程有多个线程，它们共享进程资源。</p><p><strong>进程和线程的区别（面试题）：</strong></p><p>进程是<u>资源分配</u>的基本单位，线程不拥有资源，但是线程可以访问所属进程的资源。</p><p>进程<u>开销</u>大，在创建、撤销和切换进程时，系统都要为之分配或回收资源，而线程切换只需要保存和设置少量寄存器内容，开销小。</p><p>进程<u>通信</u>需要借助IPC，线程间通过直接读写同一进程数据可进行通信。</p><h3 id="6-2-进程状态转换"><a href="#6-2-进程状态转换" class="headerlink" title="6.2 进程状态转换"></a>6.2 进程状态转换</h3><p>进程的状态转换如图所示：</p><p><img src="/images/react/2021122006.png"></p><p>其中，<u>处于就绪状态和运行状态的进程可以相互转换</u>，其他状态进程只能单向转换。处于阻塞状态的进程是缺少资源（不包括时间资源）的进程。</p><h3 id="6-3-批处理系统"><a href="#6-3-批处理系统" class="headerlink" title="6.3 批处理系统"></a>6.3 批处理系统</h3><p>该系统没有太多用户操作，调度算法包括<u>FCFS</u>（先来先服务，有利于长作业）、<u>SJF</u>（短作业优先，不利于长作业）、<u>SRTN</u>（最短剩余时间优先）。该系统的调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。</p><h3 id="6-4-交互式系统"><a href="#6-4-交互式系统" class="headerlink" title="6.4 交互式系统"></a>6.4 交互式系统</h3><p>该系统有大量用户交互操作，调度算法包括<u>时间片轮转</u>、<u>优先级调度</u>、<u>多级反馈列表</u>。该系统的调度算法目标是快速进行响应。</p><h3 id="6-5-实时系统"><a href="#6-5-实时系统" class="headerlink" title="6.5 实时系统"></a>6.5 实时系统</h3><p>实时系统要求一个请求在一个确定时间内得到响应。分为<u>硬实时和软实时</u>，前者必须满足绝对的截止时间，后者可以容忍一定的超时。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;em&gt;本文来源于&lt;a href=&quot;https://github.com/CyC2018/CS-Notes%EF%BC%8C%E6%98%AF%E5%9C%A8%E9%98%85%E8%AF%BB%E8%AF%A5%E8%B5%84%E6%BA%90%E6%97%</summary>
      
    
    
    
    <category term="博客" scheme="https://sixteentime.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="学习" scheme="https://sixteentime.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="前端面试，操作系统" scheme="https://sixteentime.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%EF%BC%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络基础复习</title>
    <link href="https://sixteentime.github.io/2021/12/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/"/>
    <id>https://sixteentime.github.io/2021/12/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-12-20T00:28:05.000Z</published>
    <updated>2021-12-20T12:50:46.354Z</updated>
    
    <content type="html"><![CDATA[<hr><p><em>本文来源于<a href="https://github.com/CyC2018/CS-Notes%EF%BC%8C%E6%98%AF%E5%9C%A8%E9%98%85%E8%AF%BB%E8%AF%A5%E8%B5%84%E6%BA%90%E6%97%B6%E7%9A%84%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%EF%BC%8C%E4%BD%86%E6%9C%89%E5%A4%A7%E9%83%A8%E5%88%86%E7%9A%84%E5%86%85%E5%AE%B9%E5%92%8C%E5%8E%9F%E6%96%87%E4%B8%80%E8%87%B4%E3%80%82">https://github.com/CyC2018/CS-Notes，是在阅读该资源时的笔记整理，但有大部分的内容和原文一致。</a></em></p><hr><h2 id="1-network、internet、Internet的区别"><a href="#1-network、internet、Internet的区别" class="headerlink" title="1.network、internet、Internet的区别"></a>1.network、internet、Internet的区别</h2><p>network是计算机的网络，把计算机主机连接起来（有很多种网络，包括局域网、广域网等），而internet则是把<u>广域网</u>的一种，是泛指，不一定采取TCP/IP协议；internet是网络的网络。Internet是全球最大最开放的internet，<u>采用TCP/IP协议</u>。</p><h2 id="2-ISP"><a href="#2-ISP" class="headerlink" title="2.ISP"></a>2.ISP</h2><p>ISP（Internet Service Provider 互联网服务提供商）在互联网<u>主干网上</u>提供相应服务使个体设备接入互联网。在中国比较热门的互联网提供商有移动、联通、电信等。</p><h2 id="3-主机之间通信方式"><a href="#3-主机之间通信方式" class="headerlink" title="3.主机之间通信方式"></a>3.主机之间通信方式</h2><p><strong>C/S 客户-服务器方式：</strong>以服务器为核心提供客户资源</p><p><strong>P2P 点对点方式：</strong>双方对等、共享资源（比如迅雷下载）</p><h2 id="4-电路交换、分组交换"><a href="#4-电路交换、分组交换" class="headerlink" title="4.电路交换、分组交换"></a>4.电路交换、分组交换</h2><p><strong>电路交换：</strong>电路交换用于电话通信系统，两个用户要通信之前需要建立一条专用的物理链路，并且在整个通信过程中始终<u>占用</u>该链路。由于通信的过程中不可能一直在使用传输线路，因此电路交换对线路的利用率很低，往往不到 10%。</p><p><strong>分组交换：</strong>每个分组都有首部和尾部，包含了源地址和目的地址等控制信息，在同一个传输线路上同时传输多个分组互相不会影响，因此在同一条传输线路上允许同时传输多个分组，也就是说分组交换<u>不需要占用传输线路</u>。</p><h2 id="5-计算机网络体系结构"><a href="#5-计算机网络体系结构" class="headerlink" title="5.计算机网络体系结构"></a>5.计算机网络体系结构</h2><p>OSI 国际标准的网络体系结构，共有七层，自下往上分别是<u>物理层、数据链路层、网络层、运输层、会话层、应用层</u>。</p><p>TCP/IP协议是民间运用最广泛的网络协议，它简化了OSI协议，只有四层，自下往上是<u>网络接口层、网际层、运输层、应用层</u>。</p><p>因为上面两个结构有层数太多或太少的问题，所以往往采取折中的方式即五层协议的体系架构，它自下往上分别是<u>物理层、数据链路层、网络层、运输层、应用层</u>。</p><p><strong>物理层</strong>：传输的是可以通过<u>物理介质</u>运输的数据比特流。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。</p><p><strong>数据链路层</strong>：物理寻址，同时将原始的比特流转变为<u>逻辑传输路线</u>。主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧，该层涉及到的协议有<u>以太网协议、点对点协议</u>。</p><p><strong>网络层</strong>：它通过路由选择算法，为分组通过通信子网选择最适当的路径，以实现网络的互连功能。具体地说，数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、流量控制、拥塞控制等将信息从一台网络设备传送到另一台网络设备。该层协议的代表包括<u>IP、IPX 协议</u>等。</p><p><strong>运输层</strong>：该层是通信子网和资源子网的接口和桥梁，起到了承上启下的作用。该层提供会话层和网络层之间的传输服务，这种服务从会话层获得数据，并在必要时对数据进行分割然后将数据传递到网络层，并确保数据能正确无误地传送到网络层。因此,运输层负责提供主机中<u>两个进程之间数据的可靠传送</u>。运输层的目的是向用户透明地传送报文，它向高层屏蔽了下层数据通信的细节。该层主要有两种协议：<u>TCP协议、UDP协议</u>。</p><p><strong>会话层</strong>：其主要任务是负责维护两个实体之间的会话连接确保点到点的传输不被中断，并进行会话管理和数据交换管理，即组织和协调两个会话进程之间的通信，并对数据交换进行管理。</p><p><strong>表示层</strong>：主要功能是协商和建立数据交换的格式，解决各应用程序之间在数据格式表示上的差异,，以使一个主机应用层的数据可以被另一个主机的应用层理解。</p><p><strong>应用层</strong>：用户应用程序和网络之间的接口，完成用户希望在网络上完成的各种工作。该层的协议有<u>HTTP、DNS协议</u>，数据单位为<u>报文</u>。</p><p>TCP/IP协议相当于五层协议的下面两层合并成一层（网络接口层）。</p><h2 id="6-应用层"><a href="#6-应用层" class="headerlink" title="6.应用层"></a>6.应用层</h2><p><strong>DNS：</strong>域名解析，提供了主机名和IP地址相互转化的服务，域名的层次结构如下所示：</p><p><img src="/images/react/2021122001.png"></p><p>DNS使用的端口是53，可以使用UDP或TCP协议，如果返回的响应超过512字节或者是区域传输则会使用TCP进行运输。</p><p><strong>FTP：</strong>使用TCP进行连接，需要两个连接（控制连接、数据连接）来传输一个文件。端口：20、21.有主动传输和被动传输两种模式。</p><p><strong>DHCP：</strong>动态主机配置协议.一个局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。</p><p>电子邮件协议：一个电子邮件系统由三部分组成：用户代理、邮件服务器以及邮件协议。发送协议常用<strong>SMTP</strong>（只能发送ASCII码，MIMI扩充了SMTP，可以发送非ASCII码）、读取协议常用POP3（阅后即焚，最新版本可不焚）和IMAP。</p><p><strong>常用端口：</strong>如下图所示：</p><p><img src="/images/react/2021122002.png"></p><p>须知0-1023是熟知端口，客服端生产的随机端口必须大于1024。</p><h2 id="7-传输层（报文）"><a href="#7-传输层（报文）" class="headerlink" title="7.传输层（报文）"></a>7.传输层（报文）</h2><h3 id="7-1-UDP和TCP的区别"><a href="#7-1-UDP和TCP的区别" class="headerlink" title="7.1 UDP和TCP的区别"></a>7.1 UDP和TCP的区别</h3><p>UDP 用户数据报协议，无连接，尽最大可能交付，没有拥塞控制，面对报文（应用层传下来的报文，只在其头部添加UDP首部），支持一对一、一对多、多对一、多对多的连接。</p><p>TCP面向连接，提供可靠交付，有拥塞控制（TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复），提供全双工通信，面向字节流（应用层传下来的报文看成字节流，并拆分成数据块），连接一对一。</p><h3 id="7-2-UDP首部"><a href="#7-2-UDP首部" class="headerlink" title="7.2 UDP首部"></a>7.2 UDP首部</h3><p>UDP的首部有8字节以及12字节的伪首部，伪首部是为了计算检验而临时添加，首部8字节包括2字节源端口和目的端口，2字节长度和检验和。以下为UDP首部示意图：</p><p><img src="/images/react/2021122003.png"></p><h3 id="7-3-TCP首部"><a href="#7-3-TCP首部" class="headerlink" title="7.3 TCP首部"></a>7.3 TCP首部</h3><p>TCP首部长度不固定，有20字节的固定头部，具体情况如下图所示：</p><p><img src="/images/react/2021122004.png"></p><p>序号：当前报文的序号，下一个报文的序号则为前一个报文的序号加上前一个报文的长度。</p><p>确认号：因为TCP协议是可靠的一对一协议，所以当前报文发出时也要有希望接收到的下一个报文的序号，将接收到的下一个报文的序号则是前一个报文的确认号。</p><p>数据偏移：实际就是TCP报文头部长度。</p><p>确认位ACK：只有当ACK=1时确认号字段才有效。</p><p>同步位SYN：建立连接时用来同步序号。SYN=1,ACK=0表示这是一个请求连接报文，SYN=1,ACK=1是同意连接的响应报文。</p><p>终止位FIN：FIN=1表示释放一个连接。</p><h3 id="7-4-TCP的三次握手"><a href="#7-4-TCP的三次握手" class="headerlink" title="7.4 TCP的三次握手"></a>7.4 TCP的三次握手</h3><p>第一次握手：客服端向服务端发送请求报文，其中ACK=0,SYN=1。</p><p>第二次握手：服务端返回客服端一个响应报文，其中SYN=1,ACK=1。</p><p>第三次握手：客服端向服务端发送确认报文，其中SYN=0,ACK=1。</p><p>三次握手成功建立连接。</p><p><strong>需要三次握手的原因（面试题）：</strong></p><p>三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。如果没有三次握手，会出现这种现象，客户端发送请求访问报文给服务端，但是这个报文在网络中受阻延迟没有及时传达到，而超时后客户端会再次发送请求报文给服务端，此时服务端就会收到并且要处理先后两条请求报文，有了三次握手，客户端会忽略服务器发送的第二条响应请求报文，不会进行第三次握手。</p><h3 id="7-5-TCP的四次挥手"><a href="#7-5-TCP的四次挥手" class="headerlink" title="7.5 TCP的四次挥手"></a>7.5 TCP的四次挥手</h3><p>在客户端要关闭服务时需要和服务端进行四次挥手。</p><p>第一次挥手：客户端向服务端发送释放请求报文，其中FIN=1</p><p>第二次挥手：TCP处于半关闭状态，客户端无法再发送报文给服务端，服务端可以向客户端发送服务器端发送还未传送完毕的数据。</p><p>第三次挥手：服务端向客户端发送释放报文，FIN=1</p><p>第四次挥手：客户端向服务端发送确认报文，等待2MSL后释放应用。服务端收到确认报文后释放应用。</p><p><strong>四次挥手的原因（面试题）：</strong></p><p>客户端发送释放报文后，TCP处于半关闭状态，这个状态能让服务端继续发送未传送完毕的数据，数据传完后，服务器会发送释放报文。</p><p><strong>四次挥手过程中TIME_WAIT的原因（面试题）：</strong></p><p>在客户端收到服务端的FIN释放报文时回有2MSL（MSL 一个报文在网络中最大的存活时间）的等待时间，这是为了确保自己发送给服务端的确认报文能顺利传达，若出现意外则可以再次发送。也可让这段连续时间内产生的报文在网络中消失以避免干扰之后的连接请求。</p><h2 id="8-网络层（分组）"><a href="#8-网络层（分组）" class="headerlink" title="8.网络层（分组）"></a>8.网络层（分组）</h2><p>网络层是整个互联网的核心，其中最关键的就是IP协议，其将异构的物理网络连接起来。与IP协议配套的还有地址解析协议ARP、网际控制报文协议ICMP、网际组管理协议IGMP。</p><h3 id="8-1-IP协议"><a href="#8-1-IP协议" class="headerlink" title="8.1 IP协议"></a>8.1 IP协议</h3><p>通过IP地址，保证了联网设备的唯一性，实现了网络通信的面向无连接和不可靠的传输功能。</p><p>IP地址的偏执方式经历了三个历史阶段：分类、子网划分、无分类。</p><p><strong>分类</strong>：32位的IP地址根据网络号的长度（8、16、24位）分为A、B、C类地址以及多播地址D类、今后使用地址E类。具体几类地址的区别如下所示：</p><p><img src="/images/react/2021122005.png"></p><p><strong>子网划分</strong>：对于局域网内部的网络可进行子网划分，首先需要配置子网掩码。</p><p><strong>无分类</strong>：无分类编制CIDR消除了以上两种情况概念，使用网络前缀和主机号来对IP地址进行编码。如128.14.35.7/20 就是使用CIDR进行表示，其代表前 20 位为网络前缀。</p><h3 id="8-2-ARP协议"><a href="#8-2-ARP协议" class="headerlink" title="8.2 ARP协议"></a>8.2 ARP协议</h3><p>ARP协议实现了通过IP地址获得<u>MAC地址</u>。MAC地址是主机的硬件地址。每个主机都有一个<u>ARP高速缓存</u>，即IP地址到MAC地址的映射表。如果主机A没有主机B的MAC地址，只要获得其IP地址，通过广播的形式将访问信息发送给B，B 收到请求就将其MAC地址发送给A，这样A就可以通过ARP发送信息给B了。</p><h3 id="8-3-ICMP协议"><a href="#8-3-ICMP协议" class="headerlink" title="8.3 ICMP协议"></a>8.3 ICMP协议</h3><p>ICMP协议是为了更有效地转发IP数据包，它被封装在IP数据报中，但不属于高层协议。<u>Ping</u>是ICNMP的一个重要应用，主要用来测试两台主机之间的连通性。</p><h3 id="8-4-虚拟专用网VPN"><a href="#8-4-虚拟专用网VPN" class="headerlink" title="8.4 虚拟专用网VPN"></a>8.4 虚拟专用网VPN</h3><p>因为实际的主机数要远远大于IP地址，并且也不需要把所有的主机接入到外部的互联网中，所以就有了专用地址，即机构内的计算机可使用仅在本机构有效的IP地址。VPN使用公用的互联网作为本机构各个专用网之间的通信载体，其功能是在公用网络上建立专用网络，进行加密通讯，即只要本机构的主机才能进行通讯。</p><h3 id="8-5-网络地址转换NAT"><a href="#8-5-网络地址转换NAT" class="headerlink" title="8.5 网络地址转换NAT"></a>8.5 网络地址转换NAT</h3><p>专用网内部主机想要和互联网上的主机进行通讯时即要使用NAT进行IP地址的转换，把本地IP转为全球IP。</p><h3 id="8-6-路由选择协议"><a href="#8-6-路由选择协议" class="headerlink" title="8.6 路由选择协议"></a>8.6 路由选择协议</h3><p>内部路由选择协议有<u>RIP</u>和<u>OSPF</u>协议。RIP 是一种基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。RIP 协议实现简单，开销小。但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。为了克服RIP的缺点而开发了OSPF协议，即开放最短路径优先。</p><p>外部路由选择协议有<u>BGP</u>协议——边界网关协议。</p><h2 id="9-数据链路层（帧）"><a href="#9-数据链路层（帧）" class="headerlink" title="9.数据链路层（帧）"></a>9.数据链路层（帧）</h2><h3 id="9-1-基本问题"><a href="#9-1-基本问题" class="headerlink" title="9.1 基本问题"></a>9.1 基本问题</h3><p><strong>封装成帧</strong>：链路层以帧的形式进行传输，需要将网络层的分组添加首部和尾部用于标记帧的开始和结束。</p><p><strong>透明传输</strong>：如果帧内部有首部或尾部相同的内容就容易错误定位帧的位置，所以需要在帧内部添加响应的<u>转义字符</u>以解决该问题。</p><p><strong>差错检测</strong>：目前使用最广泛的是<u>CRC</u>（循环冗余检验）来检查比特差错。</p><h3 id="9-2-信道分类"><a href="#9-2-信道分类" class="headerlink" title="9.2 信道分类"></a>9.2 信道分类</h3><p>分为广播信道和点对点信道，广播信道是一对多通信，采用<u>CSMA/CD协议</u>，表示载波监听多点接入/碰撞检测；点对点信道是一对一通信，采用<u>PPP协议</u>，这是一种用户计算机和 ISP 进行通信时所使用的数据链路层协议。</p><h3 id="9-3-信道复用技术"><a href="#9-3-信道复用技术" class="headerlink" title="9.3 信道复用技术"></a>9.3 信道复用技术</h3><p>包括频分复用、时分复用、波分复用、码分复用。</p><h3 id="9-4-局域网、以太网与虚拟局域网"><a href="#9-4-局域网、以太网与虚拟局域网" class="headerlink" title="9.4 局域网、以太网与虚拟局域网"></a>9.4 局域网、以太网与虚拟局域网</h3><p>局域网是一种<u>广播信道</u>，以太网是<u>特殊的局域网</u>。局域网的特点为网络是一个单位所拥有，且地理位置和站点数目均有限。按照拓扑结构可将局域网分为<u>星型、环形、直线型</u>；以太网是一种星型局域网，早期使用集线器作为传输数据的物理设备，作用于比特而非帧，现在使用<u>交换机</u>，这是一种链路层设备。交换机具有学习功能，学习交换表的内容，交换表存储着MAC地址到接口的映射。<u>虚拟局域网</u>建立了与物理位置无关的逻辑组，只有在同一个虚拟局域网内的成员才能收到链路层广播信息。</p><h2 id="10-物理层"><a href="#10-物理层" class="headerlink" title="10.物理层"></a>10.物理层</h2><h3 id="10-1-通信方式"><a href="#10-1-通信方式" class="headerlink" title="10.1 通信方式"></a>10.1 通信方式</h3><p>根据信息的传输方向分为单工通信（单向传输）、半双工通信（双向交替传输）、全双工通信（双向同时传输）。</p><h3 id="10-2-带通调制"><a href="#10-2-带通调制" class="headerlink" title="10.2 带通调制"></a>10.2 带通调制</h3><p>带同调制将离散的数字信号转为连续的模拟信号。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;em&gt;本文来源于&lt;a href=&quot;https://github.com/CyC2018/CS-Notes%EF%BC%8C%E6%98%AF%E5%9C%A8%E9%98%85%E8%AF%BB%E8%AF%A5%E8%B5%84%E6%BA%90%E6%97%</summary>
      
    
    
    
    <category term="博客" scheme="https://sixteentime.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="学习" scheme="https://sixteentime.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机" scheme="https://sixteentime.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="前端面试" scheme="https://sixteentime.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>React的状态提升&amp;组合VS继承</title>
    <link href="https://sixteentime.github.io/2021/12/19/React%E5%AD%A6%E4%B9%A0%E5%9B%9B/"/>
    <id>https://sixteentime.github.io/2021/12/19/React%E5%AD%A6%E4%B9%A0%E5%9B%9B/</id>
    <published>2021-12-19T05:49:01.000Z</published>
    <updated>2021-12-19T05:49:52.317Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、状态提升"><a href="#一、状态提升" class="headerlink" title="一、状态提升"></a>一、状态提升</h3><p>通常，多个组件需要反应同一个数据变化时，建议使用状态提升，即共享状态提升到最近的父组件中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react-dom.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//通过map的方式渲染列表</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">List</span>(<span class="hljs-params">props</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//获取列表参数</span></span><br><span class="javascript"><span class="hljs-keyword">const</span> numbers=props.numbers;</span><br><span class="javascript"><span class="hljs-comment">//利用map进行渲染</span></span><br><span class="javascript"><span class="hljs-keyword">const</span> listItem=numbers.map((<span class="hljs-function"><span class="hljs-params">number</span>=&gt;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>));</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">return</span> (</span><br><span class="javascript">  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>&#123;listItem&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="javascript">)</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> numbers=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];</span><br><span class="javascript">ReactDOM.render(</span><br><span class="javascript"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">List</span> <span class="hljs-attr">numbers</span>=<span class="hljs-string">&#123;numbers&#125;</span> /&gt;</span></span>,</span><br><span class="javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test1&#x27;</span>))</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>运行以上代码，发现已成功渲染列表，但是在控制台获得警告如下：</p><p><img src="/images/react/2021121903.png"></p><p>提示对于列表的每一个元素都需要key关键词，给每一列添加key:<code>&lt;li key=&#123;number.toString()&#125;&gt;&#123;number&#125;&lt;/li&gt;));</code>，key作为列表中每个元素的唯一标识符，是有优化性能的作用。对于应该在哪里设置元素的key，一个好的经验法则是：在 <code>map()</code> 方法中的元素需要设置 key 属性。</p><p>以上情况可以也通过以下方法实现</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx">funtion <span class="hljs-function"><span class="hljs-title">ListItem</span>(<span class="hljs-params">props</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;props.value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">List2</span>(<span class="hljs-params">props</span>)</span>&#123;<br><span class="hljs-keyword">const</span> numbers=props.numbers;<br><span class="hljs-keyword">return</span> (<br> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">&#123;numbers.map((number=&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ListItem</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;number.toString()&#125;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;number&#125;</span> /&gt;</span></span><br><span class="xml">))&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二、表单"><a href="#二、表单" class="headerlink" title="二、表单"></a>二、表单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react-dom.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//表单的运用</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//通过类自定义的内有方法来更方便迅捷地操作表单</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//自定义表单组件</span></span><br><span class="javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NameForm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">super</span>(props);</span><br><span class="javascript"><span class="hljs-comment">//定义可更改的变量，即表单输入元素</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.state=&#123;<span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;&#x27;</span>&#125;;</span><br><span class="javascript"><span class="hljs-comment">//在具体方法中绑定this来实现对state的改变。</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.handleChange=<span class="hljs-built_in">this</span>.handleChange.bind(<span class="hljs-built_in">this</span>);</span><br><span class="javascript"><span class="hljs-built_in">this</span>.handleSubmit=<span class="hljs-built_in">this</span>.handleSubmit.bind(<span class="hljs-built_in">this</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handleChange</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">value</span>:event.target.value&#125;);</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handleSubmit</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//提交前显示名字</span></span><br><span class="javascript">alert(<span class="hljs-string">&#x27;提交的名字：&#x27;</span>+<span class="hljs-built_in">this</span>.state.value);</span><br><span class="javascript">event.preventDefault();</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span>(</span><br><span class="javascript">  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="xml"><span class="javascript">    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span></span><br><span class="xml"><span class="javascript">  名字:</span></span><br><span class="xml"><span class="javascript">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.value&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br><span class="xml"><span class="javascript"> <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span></span><br><span class="xml"><span class="javascript">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="xml"><span class="javascript"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span>  </span><br><span class="javascript">)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">NameForm</span> /&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test1&#x27;</span>))</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>以上例子实现了一个自定义表单的应用。</p><p>注意：在Html中<code>&lt;textarea&gt;</code> 组件直接通过子元素定义其文本，而在React中通过属性value来确定其文本。针对<code>&lt;select&gt;</code>组件React 并不会使用 <code>selected</code> 属性，而是在根 <code>select</code> 标签上使用 <code>value</code> 属性。这在受控组件中更便捷，因为您只需要在根标签中更新它。</p><p>具体关于textarea 和select在React里的具体操作如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react-dom.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//表单的运用</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//通过类自定义的内有方法来更方便迅捷地操作表单</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//自定义表单组件</span></span><br><span class="javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NameForm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">super</span>(props);</span><br><span class="javascript"><span class="hljs-comment">//定义可更改的变量，即表单输入元素</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.state=&#123;</span><br><span class="javascript"><span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">textValue</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">selected</span>:<span class="hljs-string">&#x27;aa&#x27;</span>,</span><br><span class="javascript">&#125;;</span><br><span class="javascript"><span class="hljs-comment">//在具体方法中绑定this来实现对state的改变。</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.handleChange=<span class="hljs-built_in">this</span>.handleChange.bind(<span class="hljs-built_in">this</span>);</span><br><span class="javascript"><span class="hljs-built_in">this</span>.handleSubmit=<span class="hljs-built_in">this</span>.handleSubmit.bind(<span class="hljs-built_in">this</span>);</span><br><span class="javascript"><span class="hljs-built_in">this</span>.handleChangeSelect=<span class="hljs-built_in">this</span>.handleChangeSelect.bind(<span class="hljs-built_in">this</span>);</span><br><span class="javascript"><span class="hljs-built_in">this</span>.handleChangeTextarea=<span class="hljs-built_in">this</span>.handleChangeTextarea.bind(<span class="hljs-built_in">this</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handleChange</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">value</span>:event.target.value&#125;);</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handleSubmit</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//提交前显示名字</span></span><br><span class="javascript">alert(<span class="hljs-string">&#x27;提交的名字：&#x27;</span>+<span class="hljs-built_in">this</span>.state.value);</span><br><span class="javascript">event.preventDefault();</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handleChangeTextarea</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">textValue</span>:event.target.value&#125;)</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handleChangeSelect</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;event&#x27;</span>,event)</span><br><span class="javascript"><span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">selected</span>:event.target.value&#125;);</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span>(</span><br><span class="javascript">  &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class="javascript">    &lt;label&gt;</span><br><span class="javascript">  名字:</span><br><span class="javascript">  &lt;input type=&quot;text&quot; value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class="javascript"> &lt;/label&gt;</span><br><span class="javascript"> &lt;label&gt;</span><br><span class="javascript"> 内容：</span><br><span class="javascript"> &lt;textarea  value=&#123;this.state.textValue&#125; onChange=&#123;this.handleChangeTextarea&#125;/&gt;</span><br><span class="javascript"> &lt;/label&gt;</span><br><span class="javascript"> &lt;label&gt;</span><br><span class="javascript"> 选择：</span><br><span class="javascript"> &lt;select value=&#123;this.state.selected&#125; onChange=&#123;this.handleChangeSelect&#125; &gt;</span><br><span class="javascript">     &lt;option value=&#x27;aa&#x27;&gt;aa&lt;/ option&gt;</span><br><span class="javascript"> &lt;option value=&#x27;bb&#x27;&gt;bb&lt;/ option&gt;</span><br><span class="javascript"> &lt;option value=&#x27;cc&#x27;&gt;cc&lt;/ option&gt;</span><br><span class="javascript"> &lt;/select&gt;</span><br><span class="javascript"> &lt;/label&gt;</span><br><span class="javascript">  &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="javascript">&lt;/form&gt;  </span><br><span class="javascript">)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">ReactDOM.render(&lt;NameForm /&gt;,document.getElementById(&#x27;test1&#x27;))</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>以上的形式在一个表单中调用了多个onChange，也可以只调用同一个onChange函数同时监听并改变多个数据，可以给每个元素添加 <code>name</code> 属性，并让处理函数根据 <code>event.target.name</code> 的值选择要执行的操作。具体代码如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react-dom.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//表单的运用</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//通过类自定义的内有方法来更方便迅捷地操作表单</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//自定义表单组件</span></span><br><span class="javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NameForm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">super</span>(props);</span><br><span class="javascript"><span class="hljs-comment">//定义可更改的变量，即表单输入元素</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.state=&#123;</span><br><span class="javascript"><span class="hljs-attr">nameValue</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">textValue</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">selected</span>:<span class="hljs-string">&#x27;aa&#x27;</span>,</span><br><span class="javascript">&#125;;</span><br><span class="javascript"><span class="hljs-comment">//在具体方法中绑定this来实现对state的改变。</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.handleChange=<span class="hljs-built_in">this</span>.handleChange.bind(<span class="hljs-built_in">this</span>);</span><br><span class="javascript"><span class="hljs-built_in">this</span>.handleSubmit=<span class="hljs-built_in">this</span>.handleSubmit.bind(<span class="hljs-built_in">this</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handleChange</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">const</span> value=event.target.value;</span><br><span class="javascript"><span class="hljs-keyword">const</span> name=event.target.name;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.setState(&#123;</span><br><span class="javascript">[name]:value</span><br><span class="javascript">&#125;)</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handleSubmit</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//提交前显示名字</span></span><br><span class="javascript">alert(<span class="hljs-string">&#x27;提交的名字：&#x27;</span>+<span class="hljs-built_in">this</span>.state.value);</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;state&#x27;</span>,<span class="hljs-built_in">this</span>.state)</span><br><span class="javascript">event.preventDefault();</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span>(</span><br><span class="javascript">  &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class="javascript">    &lt;label&gt;</span><br><span class="javascript">  名字:</span><br><span class="javascript">  &lt;input name=&quot;nameValue&quot; type=&quot;text&quot; value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class="javascript"> &lt;/label&gt;</span><br><span class="javascript"> &lt;label&gt;</span><br><span class="javascript"> 内容：</span><br><span class="javascript"> &lt;textarea name=&quot;textValue&quot;  value=&#123;this.state.textValue&#125; onChange=&#123;this.handleChange&#125;/&gt;</span><br><span class="javascript"> &lt;/label&gt;</span><br><span class="javascript"> &lt;label&gt;</span><br><span class="javascript"> 选择：</span><br><span class="javascript"> &lt;select name=&quot;selected&quot; value=&#123;this.state.selected&#125; onChange=&#123;this.handleChange&#125; &gt;</span><br><span class="javascript">     &lt;option value=&#x27;aa&#x27;&gt;aa&lt;/ option&gt;</span><br><span class="javascript"> &lt;option value=&#x27;bb&#x27;&gt;bb&lt;/ option&gt;</span><br><span class="javascript"> &lt;option value=&#x27;cc&#x27;&gt;cc&lt;/ option&gt;</span><br><span class="javascript"> &lt;/select&gt;</span><br><span class="javascript"> &lt;/label&gt;</span><br><span class="javascript">  &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="javascript">&lt;/form&gt;  </span><br><span class="javascript">)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">ReactDOM.render(&lt;NameForm /&gt;,document.getElementById(&#x27;test1&#x27;))</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、状态提升&quot;&gt;&lt;a href=&quot;#一、状态提升&quot; class=&quot;headerlink&quot; title=&quot;一、状态提升&quot;&gt;&lt;/a&gt;一、状态提升&lt;/h3&gt;&lt;p&gt;通常，多个组件需要反应同一个数据变化时，建议使用状态提升，即共享状态提升到最近的父组件中&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    <category term="博客" scheme="https://sixteentime.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="React" scheme="https://sixteentime.github.io/tags/React/"/>
    
    <category term="学习" scheme="https://sixteentime.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>React的列表和表单</title>
    <link href="https://sixteentime.github.io/2021/12/19/React%E5%AD%A6%E4%B9%A0%E4%B8%89/"/>
    <id>https://sixteentime.github.io/2021/12/19/React%E5%AD%A6%E4%B9%A0%E4%B8%89/</id>
    <published>2021-12-19T01:45:05.000Z</published>
    <updated>2021-12-19T03:21:16.948Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、使用map来进行列表渲染"><a href="#一、使用map来进行列表渲染" class="headerlink" title="一、使用map来进行列表渲染"></a>一、使用map来进行列表渲染</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react-dom.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//通过map的方式渲染列表</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">List</span>(<span class="hljs-params">props</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//获取列表参数</span></span><br><span class="javascript"><span class="hljs-keyword">const</span> numbers=props.numbers;</span><br><span class="javascript"><span class="hljs-comment">//利用map进行渲染</span></span><br><span class="javascript"><span class="hljs-keyword">const</span> listItem=numbers.map((<span class="hljs-function"><span class="hljs-params">number</span>=&gt;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>));</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">return</span> (</span><br><span class="javascript">  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>&#123;listItem&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="javascript">)</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> numbers=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];</span><br><span class="javascript">ReactDOM.render(</span><br><span class="javascript"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">List</span> <span class="hljs-attr">numbers</span>=<span class="hljs-string">&#123;numbers&#125;</span> /&gt;</span></span>,</span><br><span class="javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test1&#x27;</span>))</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>运行以上代码，发现已成功渲染列表，但是在控制台获得警告如下：</p><p><img src="/images/react/2021121903.png"></p><p>提示对于列表的每一个元素都需要key关键词，给每一列添加key:<code>&lt;li key=&#123;number.toString()&#125;&gt;&#123;number&#125;&lt;/li&gt;));</code>，key作为列表中每个元素的唯一标识符，是有优化性能的作用。对于应该在哪里设置元素的key，一个好的经验法则是：在 <code>map()</code> 方法中的元素需要设置 key 属性。</p><p>以上情况可以也通过以下方法实现</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx">funtion <span class="hljs-function"><span class="hljs-title">ListItem</span>(<span class="hljs-params">props</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;props.value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">List2</span>(<span class="hljs-params">props</span>)</span>&#123;<br><span class="hljs-keyword">const</span> numbers=props.numbers;<br><span class="hljs-keyword">return</span> (<br> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">&#123;numbers.map((number=&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ListItem</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;number.toString()&#125;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;number&#125;</span> /&gt;</span></span><br><span class="xml">))&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二、表单"><a href="#二、表单" class="headerlink" title="二、表单"></a>二、表单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react-dom.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//表单的运用</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//通过类自定义的内有方法来更方便迅捷地操作表单</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//自定义表单组件</span></span><br><span class="javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NameForm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">super</span>(props);</span><br><span class="javascript"><span class="hljs-comment">//定义可更改的变量，即表单输入元素</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.state=&#123;<span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;&#x27;</span>&#125;;</span><br><span class="javascript"><span class="hljs-comment">//在具体方法中绑定this来实现对state的改变。</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.handleChange=<span class="hljs-built_in">this</span>.handleChange.bind(<span class="hljs-built_in">this</span>);</span><br><span class="javascript"><span class="hljs-built_in">this</span>.handleSubmit=<span class="hljs-built_in">this</span>.handleSubmit.bind(<span class="hljs-built_in">this</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handleChange</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">value</span>:event.target.value&#125;);</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handleSubmit</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//提交前显示名字</span></span><br><span class="javascript">alert(<span class="hljs-string">&#x27;提交的名字：&#x27;</span>+<span class="hljs-built_in">this</span>.state.value);</span><br><span class="javascript">event.preventDefault();</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span>(</span><br><span class="javascript">  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="xml"><span class="javascript">    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span></span><br><span class="xml"><span class="javascript">  名字:</span></span><br><span class="xml"><span class="javascript">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.value&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br><span class="xml"><span class="javascript"> <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span></span><br><span class="xml"><span class="javascript">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="xml"><span class="javascript"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span>  </span><br><span class="javascript">)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">NameForm</span> /&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test1&#x27;</span>))</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>以上例子实现了一个自定义表单的应用。</p><p>注意：在Html中<code>&lt;textarea&gt;</code> 组件直接通过子元素定义其文本，而在React中通过属性value来确定其文本。针对<code>&lt;select&gt;</code>组件React 并不会使用 <code>selected</code> 属性，而是在根 <code>select</code> 标签上使用 <code>value</code> 属性。这在受控组件中更便捷，因为您只需要在根标签中更新它。</p><p>具体关于textarea 和select在React里的具体操作如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react-dom.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//表单的运用</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//通过类自定义的内有方法来更方便迅捷地操作表单</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//自定义表单组件</span></span><br><span class="javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NameForm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">super</span>(props);</span><br><span class="javascript"><span class="hljs-comment">//定义可更改的变量，即表单输入元素</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.state=&#123;</span><br><span class="javascript"><span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">textValue</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">selected</span>:<span class="hljs-string">&#x27;aa&#x27;</span>,</span><br><span class="javascript">&#125;;</span><br><span class="javascript"><span class="hljs-comment">//在具体方法中绑定this来实现对state的改变。</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.handleChange=<span class="hljs-built_in">this</span>.handleChange.bind(<span class="hljs-built_in">this</span>);</span><br><span class="javascript"><span class="hljs-built_in">this</span>.handleSubmit=<span class="hljs-built_in">this</span>.handleSubmit.bind(<span class="hljs-built_in">this</span>);</span><br><span class="javascript"><span class="hljs-built_in">this</span>.handleChangeSelect=<span class="hljs-built_in">this</span>.handleChangeSelect.bind(<span class="hljs-built_in">this</span>);</span><br><span class="javascript"><span class="hljs-built_in">this</span>.handleChangeTextarea=<span class="hljs-built_in">this</span>.handleChangeTextarea.bind(<span class="hljs-built_in">this</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handleChange</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">value</span>:event.target.value&#125;);</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handleSubmit</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//提交前显示名字</span></span><br><span class="javascript">alert(<span class="hljs-string">&#x27;提交的名字：&#x27;</span>+<span class="hljs-built_in">this</span>.state.value);</span><br><span class="javascript">event.preventDefault();</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handleChangeTextarea</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">textValue</span>:event.target.value&#125;)</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handleChangeSelect</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;event&#x27;</span>,event)</span><br><span class="javascript"><span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">selected</span>:event.target.value&#125;);</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span>(</span><br><span class="javascript">  &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class="javascript">    &lt;label&gt;</span><br><span class="javascript">  名字:</span><br><span class="javascript">  &lt;input type=&quot;text&quot; value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class="javascript"> &lt;/label&gt;</span><br><span class="javascript"> &lt;label&gt;</span><br><span class="javascript"> 内容：</span><br><span class="javascript"> &lt;textarea  value=&#123;this.state.textValue&#125; onChange=&#123;this.handleChangeTextarea&#125;/&gt;</span><br><span class="javascript"> &lt;/label&gt;</span><br><span class="javascript"> &lt;label&gt;</span><br><span class="javascript"> 选择：</span><br><span class="javascript"> &lt;select value=&#123;this.state.selected&#125; onChange=&#123;this.handleChangeSelect&#125; &gt;</span><br><span class="javascript">     &lt;option value=&#x27;aa&#x27;&gt;aa&lt;/ option&gt;</span><br><span class="javascript"> &lt;option value=&#x27;bb&#x27;&gt;bb&lt;/ option&gt;</span><br><span class="javascript"> &lt;option value=&#x27;cc&#x27;&gt;cc&lt;/ option&gt;</span><br><span class="javascript"> &lt;/select&gt;</span><br><span class="javascript"> &lt;/label&gt;</span><br><span class="javascript">  &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="javascript">&lt;/form&gt;  </span><br><span class="javascript">)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">ReactDOM.render(&lt;NameForm /&gt;,document.getElementById(&#x27;test1&#x27;))</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>以上的形式在一个表单中调用了多个onChange，也可以只调用同一个onChange函数同时监听并改变多个数据，可以给每个元素添加 <code>name</code> 属性，并让处理函数根据 <code>event.target.name</code> 的值选择要执行的操作。具体代码如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react-dom.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//表单的运用</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//通过类自定义的内有方法来更方便迅捷地操作表单</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//自定义表单组件</span></span><br><span class="javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NameForm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">super</span>(props);</span><br><span class="javascript"><span class="hljs-comment">//定义可更改的变量，即表单输入元素</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.state=&#123;</span><br><span class="javascript"><span class="hljs-attr">nameValue</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">textValue</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">selected</span>:<span class="hljs-string">&#x27;aa&#x27;</span>,</span><br><span class="javascript">&#125;;</span><br><span class="javascript"><span class="hljs-comment">//在具体方法中绑定this来实现对state的改变。</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.handleChange=<span class="hljs-built_in">this</span>.handleChange.bind(<span class="hljs-built_in">this</span>);</span><br><span class="javascript"><span class="hljs-built_in">this</span>.handleSubmit=<span class="hljs-built_in">this</span>.handleSubmit.bind(<span class="hljs-built_in">this</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handleChange</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">const</span> value=event.target.value;</span><br><span class="javascript"><span class="hljs-keyword">const</span> name=event.target.name;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.setState(&#123;</span><br><span class="javascript">[name]:value</span><br><span class="javascript">&#125;)</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handleSubmit</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//提交前显示名字</span></span><br><span class="javascript">alert(<span class="hljs-string">&#x27;提交的名字：&#x27;</span>+<span class="hljs-built_in">this</span>.state.value);</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;state&#x27;</span>,<span class="hljs-built_in">this</span>.state)</span><br><span class="javascript">event.preventDefault();</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span>(</span><br><span class="javascript">  &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class="javascript">    &lt;label&gt;</span><br><span class="javascript">  名字:</span><br><span class="javascript">  &lt;input name=&quot;nameValue&quot; type=&quot;text&quot; value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class="javascript"> &lt;/label&gt;</span><br><span class="javascript"> &lt;label&gt;</span><br><span class="javascript"> 内容：</span><br><span class="javascript"> &lt;textarea name=&quot;textValue&quot;  value=&#123;this.state.textValue&#125; onChange=&#123;this.handleChange&#125;/&gt;</span><br><span class="javascript"> &lt;/label&gt;</span><br><span class="javascript"> &lt;label&gt;</span><br><span class="javascript"> 选择：</span><br><span class="javascript"> &lt;select name=&quot;selected&quot; value=&#123;this.state.selected&#125; onChange=&#123;this.handleChange&#125; &gt;</span><br><span class="javascript">     &lt;option value=&#x27;aa&#x27;&gt;aa&lt;/ option&gt;</span><br><span class="javascript"> &lt;option value=&#x27;bb&#x27;&gt;bb&lt;/ option&gt;</span><br><span class="javascript"> &lt;option value=&#x27;cc&#x27;&gt;cc&lt;/ option&gt;</span><br><span class="javascript"> &lt;/select&gt;</span><br><span class="javascript"> &lt;/label&gt;</span><br><span class="javascript">  &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="javascript">&lt;/form&gt;  </span><br><span class="javascript">)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">ReactDOM.render(&lt;NameForm /&gt;,document.getElementById(&#x27;test1&#x27;))</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、使用map来进行列表渲染&quot;&gt;&lt;a href=&quot;#一、使用map来进行列表渲染&quot; class=&quot;headerlink&quot; title=&quot;一、使用map来进行列表渲染&quot;&gt;&lt;/a&gt;一、使用map来进行列表渲染&lt;/h3&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="博客" scheme="https://sixteentime.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="React" scheme="https://sixteentime.github.io/tags/React/"/>
    
    <category term="学习" scheme="https://sixteentime.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>React的数据更新和监听事件</title>
    <link href="https://sixteentime.github.io/2021/12/19/React%E5%AD%A6%E4%B9%A0%E4%BA%8C/"/>
    <id>https://sixteentime.github.io/2021/12/19/React%E5%AD%A6%E4%B9%A0%E4%BA%8C/</id>
    <published>2021-12-19T01:19:01.000Z</published>
    <updated>2021-12-19T01:51:29.956Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、使用state实现更新React组件数据"><a href="#一、使用state实现更新React组件数据" class="headerlink" title="一、使用state实现更新React组件数据"></a>一、使用state实现更新React组件数据</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react-dom.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 上面两个Js文件是有固定的引用先后顺序 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 使用state实现更新React组件数据</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 利用class定义自定义组件</span></span><br><span class="javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Clock</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//调用父类构造器</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">super</span>(props);</span><br><span class="javascript">    <span class="hljs-comment">//定义state内的数据</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.state=&#123;<span class="hljs-attr">data</span>:<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()&#125;;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//生命周期函数：挂载完成时，每一秒调用tick函数，即每一秒改变stata内data的数据。</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.timeID=<span class="hljs-built_in">setInterval</span>(</span><br><span class="javascript"><span class="hljs-function">()=&gt;</span><span class="hljs-built_in">this</span>.tick(),<span class="hljs-number">1000</span></span><br><span class="javascript">)</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-comment">//生命周期函数：即将卸载时</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">componentWillUnmount</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">clearInterval</span>(<span class="hljs-built_in">this</span>.timeID);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">tick</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.setState(&#123;</span><br><span class="javascript"><span class="hljs-attr">data</span>:<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()</span><br><span class="javascript">&#125;);</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> (</span><br><span class="javascript">    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="javascript">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello!!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="javascript">    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>It is &#123;this.state.data.toLocaleTimeString()&#125; .<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span></span><br><span class="xml"><span class="javascript">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="javascript">)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Clock</span> /&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test1&quot;</span>))</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>以上为一个时钟渲染实例，通过state和生命周期的使用来实时完成时钟的运行。</p><p>构造函数是唯一可以给 <code>this.state</code> 赋值的地方，使用 <code>setState()</code>修改state里的数据</p><p>出于性能考虑，React 可能会把多个 <code>setState()</code> 调用合并成一个调用，因为 <code>this.props</code> 和 <code>this.state</code> 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。</p><h3 id="二、监听事件"><a href="#二、监听事件" class="headerlink" title="二、监听事件"></a>二、监听事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react-dom.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 上面两个Js文件是有固定的引用先后顺序 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//监听事件</span></span><br><span class="javascript"><span class="hljs-comment">//实时切换一个按钮的状态</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//定义一个按钮组件</span></span><br><span class="javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Button1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">//因为设计到React.Component里的一些特性，所以需要构造器继承父类构造器</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">super</span>(props);</span><br><span class="javascript"><span class="hljs-comment">//state里的数据可以更新修改，相当于Vue里的data</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.state=&#123;</span><br><span class="javascript"><span class="hljs-attr">isToggleOn</span>:<span class="hljs-literal">true</span>,</span><br><span class="javascript"><span class="hljs-attr">data1</span>:<span class="hljs-string">&#x27;haha&#x27;</span>,</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//为了在该类的方法中调用this.setState来改变state里的数据来实现实时监听，所以，要在构造器里提前将需要的方法绑定this</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.handleClick=<span class="hljs-built_in">this</span>.handleClick.bind(<span class="hljs-built_in">this</span>)</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//该方法来实现实时切换</span></span><br><span class="javascript"><span class="hljs-comment">//若前面没有绑定this，则该方法里的this指向underfined</span></span><br><span class="javascript"><span class="hljs-comment">//prevState是state原先的状态</span></span><br><span class="javascript"><span class="hljs-comment">//这里的=&gt;(&#123;...&#125;)等价于=&gt;&#123;return (&#123;...&#125;)&#125;</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.setState(<span class="hljs-function"><span class="hljs-params">prevState</span>=&gt;</span>(&#123;</span><br><span class="javascript"><span class="hljs-attr">isToggleOn</span>:!prevState.isToggleOn</span><br><span class="javascript">&#125;))</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 下面的方法显示打印出prevState的数据</span></span><br><span class="javascript"><span class="hljs-comment">// handleClick()&#123;</span></span><br><span class="javascript"><span class="hljs-comment">// this.setState(prevState=&gt;&#123;</span></span><br><span class="javascript"><span class="hljs-comment">// console.log(&#x27;prevState&#x27;,prevState)</span></span><br><span class="javascript"><span class="hljs-comment">// return (&#123;</span></span><br><span class="javascript"><span class="hljs-comment">// isToggleOn:!prevState.isToggleOn</span></span><br><span class="javascript"><span class="hljs-comment">// &#125;)</span></span><br><span class="javascript"><span class="hljs-comment">// &#125;)</span></span><br><span class="javascript"><span class="hljs-comment">// &#125;</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> (</span><br><span class="javascript">    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class="xml"><span class="javascript">    &#123;this.state.isToggleOn?&#x27;ON&#x27;:&#x27;OFF&#x27;&#125;</span></span><br><span class="xml"><span class="javascript"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="javascript">)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button1</span> /&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test1&quot;</span>))</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>以上例子实现了实时监控切换一个按钮状态。</p><p>在 React 中另一个不同点是你不能通过返回 <code>false</code> 的方式阻止默认行为。你必须显式的使用 <code>preventDefault</code>。</p><h3 id="三、条件渲染"><a href="#三、条件渲染" class="headerlink" title="三、条件渲染"></a>三、条件渲染</h3><p>可以通过以下方法自定义元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react-dom.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 上面两个Js文件是有固定的引用先后顺序 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//条件渲染</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//用函数定义的方式实现子组件的定义</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SonDiv</span>(<span class="hljs-params">props</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//若isShow=false,则返回null，即该组件不会渲染，会被隐藏</span></span><br><span class="javascript"><span class="hljs-keyword">if</span>(!props.isShow)&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-keyword">return</span> (</span><br><span class="javascript">    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Son is Show<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="javascript">)</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//用类的方式实现父组件的定义</span></span><br><span class="javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FatherDiv</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">super</span>(props)</span><br><span class="javascript"><span class="hljs-built_in">this</span>.state=&#123;<span class="hljs-attr">isShow</span>:<span class="hljs-literal">true</span>&#125;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.handleToggleChilk=<span class="hljs-built_in">this</span>.handleToggleChilk.bind(<span class="hljs-built_in">this</span>)</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handleToggleChilk</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.setState(<span class="hljs-function"><span class="hljs-params">prevState</span>=&gt;</span>(&#123;</span><br><span class="javascript"><span class="hljs-attr">isShow</span>:!prevState.isShow</span><br><span class="javascript">&#125;))</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> (</span><br><span class="javascript">    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="javascript"><span class="hljs-tag">&lt;<span class="hljs-name">SonDiv</span> <span class="hljs-attr">isShow</span>=<span class="hljs-string">&#123;this.state.isShow&#125;</span> /&gt;</span></span></span><br><span class="xml"><span class="javascript"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleToggleChilk&#125;</span>&gt;</span></span></span><br><span class="xml"><span class="javascript">&#123;this.state.isShow?&#x27;hide&#x27;:&#x27;show&#x27;&#125;</span></span><br><span class="xml"><span class="javascript"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="xml"><span class="javascript"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="javascript">)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">FatherDiv</span> /&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test1&quot;</span>))</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>以上案例实现了一个监控+条件渲染的案例，初始状态为：</p><p><img src="/images/react/2021121901.png"></p><p>点击按钮’hide’，则会隐藏子组件并且按钮内容改为’show’，点击’show’则会回到初始状态即显示子组件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、使用state实现更新React组件数据&quot;&gt;&lt;a href=&quot;#一、使用state实现更新React组件数据&quot; class=&quot;headerlink&quot; title=&quot;一、使用state实现更新React组件数据&quot;&gt;&lt;/a&gt;一、使用state实现更新React组件</summary>
      
    
    
    
    <category term="博客" scheme="https://sixteentime.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="React" scheme="https://sixteentime.github.io/tags/React/"/>
    
    <category term="学习" scheme="https://sixteentime.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>React的认识与初步尝试</title>
    <link href="https://sixteentime.github.io/2021/12/19/React%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>https://sixteentime.github.io/2021/12/19/React%E5%AD%A6%E4%B9%A0%E4%B8%80/</id>
    <published>2021-12-19T00:39:01.000Z</published>
    <updated>2021-12-19T01:50:57.361Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、React是什么"><a href="#一、React是什么" class="headerlink" title="一、React是什么"></a>一、React是什么</h3><p>一个JavaScipt库，配合JSX（一个JavaScipt语法扩展）能够更好描述UI应该呈现的交互本质形式。</p><h3 id="二、初步使用React实例"><a href="#二、初步使用React实例" class="headerlink" title="二、初步使用React实例"></a>二、初步使用React实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react-dom.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 上面两个Js文件是有固定的引用先后顺序 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params">name</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> name+<span class="hljs-string">&#x27; hh&#x27;</span>;</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloMsg</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> (</span><br><span class="javascript"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="javascript">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello React<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="javascript">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;this.props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span></span><br><span class="xml"><span class="javascript">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;2+3&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="xml"><span class="javascript">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;fun(&#x27;abc&#x27;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="xml"><span class="javascript"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="javascript">)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">HelloMsg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hhh&quot;</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test1&quot;</span>))</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第一步：导入相关js文件</p><p>第二步：在body中定义需要渲染的元素</p><p>第三步：在js区域自定义组件，并调用<code>ReactDOM.render</code>进行元素渲染。</p><p>之后仔细分析js部分代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params">name</span>)</span>&#123;<br><span class="hljs-keyword">return</span> name+<span class="hljs-string">&#x27; hh&#x27;</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloMsg</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> (<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello React<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;this.props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;2+3&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;fun(&#x27;abc&#x27;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br>&#125;<br>&#125;<br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">HelloMsg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hhh&quot;</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test1&quot;</span>))<br></code></pre></td></tr></table></figure><p>在方法<code>ReactDOM.render(element, document.getElementById(&#39;root&#39;));</code>为将自定义的元素<code>element</code>覆盖html中id为root的块元素。因为覆盖Html中的元素只有一个，所以返回的也是一个块元素，里面可以包裹很多小元素，在使用html元素时使用js相关只要使用<code>&#123;&#125;</code>就可以。而元素传参运用<code>this.props</code>来进行传输。</p><p>React元素不可修改，更新的方法只能是创建一个新的元素传入ReactDOM.render</p><p>React 只更新它需要更新的部分,尽管每一秒我们都会新建一个描述整个 UI 树的元素，React DOM 只会更新实际改变了的内容，也就是例子中的文本节点。</p><h3 id="三、定义React元素"><a href="#三、定义React元素" class="headerlink" title="三、定义React元素"></a>三、定义React元素</h3><p>可以通过以下方法自定义元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//自定义元素element</span><br><span class="hljs-keyword">const</span> element = (<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>h1h1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>h2h2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br>ReactDOM.render(element,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test1&quot;</span>))<br></code></pre></td></tr></table></figure><h3 id="四、自定义组件"><a href="#四、自定义组件" class="headerlink" title="四、自定义组件"></a>四、自定义组件</h3><p>React可以自定义复杂的组件，有两种自定义组件的方法，分别是函数的方法和类的方法。如下例所示：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// 用函数的方式自定义组件</span><br>function <span class="hljs-type">HelloMsg</span>(props)&#123;<br><span class="hljs-keyword">return</span> &lt;h1&gt;hello~ &#123;props.name&#125; !&lt;/h1&gt;<br>&#125;<br><span class="hljs-comment">// ES6的类自定义组件</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HiMsg</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>render()&#123;<br><span class="hljs-keyword">return</span> &lt;h2&gt;hi~ &#123;<span class="hljs-keyword">this</span>.props.name&#125;&lt;/h2&gt;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，函数方法的元素传参方式和类的元素传参方式有所区别。</p><p>所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。</p><p>自定义组件还可以组合使用，如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react-dom.development.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 上面两个Js文件是有固定的引用先后顺序 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 组合组件</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 用函数的方式自定义组件</span></span><br><span class="javascript"><span class="hljs-comment">// 自定义组件可以实现交互传参</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">HelloMsg</span>(<span class="hljs-params">props</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello~ &#123;props.name&#125; !<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-comment">// ES6的类自定义组件</span></span><br><span class="javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HiMsg</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>hi~ &#123;this.props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 组合组件</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> (</span><br><span class="javascript">  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="javascript">  <span class="hljs-tag">&lt;<span class="hljs-name">HelloMsg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;zhangsan&quot;</span>/&gt;</span></span></span><br><span class="xml"><span class="javascript">  <span class="hljs-tag">&lt;<span class="hljs-name">HiMsg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;zhangsan&quot;</span>/&gt;</span></span></span><br><span class="xml"><span class="javascript">  <span class="hljs-tag">&lt;<span class="hljs-name">HelloMsg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Mody&quot;</span>/&gt;</span></span></span><br><span class="xml"><span class="javascript">  <span class="hljs-tag">&lt;<span class="hljs-name">HiMsg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Mody&quot;</span>/&gt;</span></span></span><br><span class="xml"><span class="javascript">  <span class="hljs-tag">&lt;<span class="hljs-name">HelloMsg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Recy&quot;</span>/&gt;</span></span></span><br><span class="xml"><span class="javascript">  <span class="hljs-tag">&lt;<span class="hljs-name">HiMsg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Recy&quot;</span>/&gt;</span></span></span><br><span class="xml"><span class="javascript">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="javascript">)</span><br><span class="javascript">&#125;</span><br><span class="javascript">ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test1&quot;</span>))</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、React是什么&quot;&gt;&lt;a href=&quot;#一、React是什么&quot; class=&quot;headerlink&quot; title=&quot;一、React是什么&quot;&gt;&lt;/a&gt;一、React是什么&lt;/h3&gt;&lt;p&gt;一个JavaScipt库，配合JSX（一个JavaScipt语法扩展）能够更</summary>
      
    
    
    
    <category term="博客" scheme="https://sixteentime.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="React" scheme="https://sixteentime.github.io/tags/React/"/>
    
    <category term="学习" scheme="https://sixteentime.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>二零二一年十二月十八日</title>
    <link href="https://sixteentime.github.io/2021/12/18/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E4%B8%80%E5%B9%B4%E5%8D%81%E4%BA%8C%E6%9C%88%E5%8D%81%E5%85%AB%E6%97%A5/"/>
    <id>https://sixteentime.github.io/2021/12/18/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E4%B8%80%E5%B9%B4%E5%8D%81%E4%BA%8C%E6%9C%88%E5%8D%81%E5%85%AB%E6%97%A5/</id>
    <published>2021-12-18T12:11:15.000Z</published>
    <updated>2021-12-19T03:24:53.002Z</updated>
    
    <content type="html"><![CDATA[<hr><p><em>包书。</em></p><hr><p>包杂志的时候抖出了一堆黑乎乎的玉兰花干片，怪丑的，还蛮多的。不知道我以前抱着什么心情收集的，想要留住玉兰花的美好吗？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;em&gt;包书。&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;包杂志的时候抖出了一堆黑乎乎的玉兰花干片，怪丑的，还蛮多的。不知道我以前抱着什么心情收集的，想要留住玉兰花的美好吗？&lt;/p&gt;
</summary>
      
    
    
    <content src="https://sixteentime.github.io/images/2021121802.png" type="image"/>
    
    
    <category term="日记" scheme="https://sixteentime.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://sixteentime.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>二零二一年十二月十七日</title>
    <link href="https://sixteentime.github.io/2021/12/17/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E4%B8%80%E5%B9%B4%E5%8D%81%E4%BA%8C%E6%9C%88%E5%8D%81%E4%B8%83%E6%97%A5/"/>
    <id>https://sixteentime.github.io/2021/12/17/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E4%B8%80%E5%B9%B4%E5%8D%81%E4%BA%8C%E6%9C%88%E5%8D%81%E4%B8%83%E6%97%A5/</id>
    <published>2021-12-17T10:43:03.000Z</published>
    <updated>2021-12-18T13:19:22.075Z</updated>
    
    <content type="html"><![CDATA[<hr><p><em>重看《寄生虫》。</em></p><hr><p>喜欢小右的眼睛，好美。</p><p><img src="/images/2021121701.png"></p><p><img src="/images/2021121702.png"></p><p><img src="/images/2021121801.png"></p><p>看完后百感交集，想到这次的新冠，那句共存的口号，以及《素食者》这本书。也许以后可以谈谈。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;em&gt;重看《寄生虫》。&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;喜欢小右的眼睛，好美。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2021121701.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2021121702.png&quot;&gt;&lt;/p&gt;
&lt;p</summary>
      
    
    
    <content src="https://sixteentime.github.io/images/2021121701.png" type="image"/>
    
    
    <category term="日记" scheme="https://sixteentime.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://sixteentime.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>二零二一年十二月十六日</title>
    <link href="https://sixteentime.github.io/2021/12/16/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E4%B8%80%E5%B9%B4%E5%8D%81%E4%BA%8C%E6%9C%88%E5%8D%81%E5%85%AD%E6%97%A5/"/>
    <id>https://sixteentime.github.io/2021/12/16/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E4%B8%80%E5%B9%B4%E5%8D%81%E4%BA%8C%E6%9C%88%E5%8D%81%E5%85%AD%E6%97%A5/</id>
    <published>2021-12-16T08:26:15.000Z</published>
    <updated>2021-12-17T10:43:26.080Z</updated>
    
    <content type="html"><![CDATA[<hr><p><em>”开展新生活是一件很困难的事情“，然后我发现，这句话我说早了。</em></p><hr><p>因为前天算自律的，昨天一整天什么都没做，今天也是，今天不仅什么也没做，还几乎什么也没吃。</p><p>真的好饿，还好马上就要到晚饭时间了。</p><p>村子里的快递寄存点就在我家对面。从我家门口走到寄存点，大概十米不到吧，因为村子里的马路就没有十米宽，可是，这对我来说比去学校取快递还要艰难。因为我家右对角线十米是村子里最大的小卖部，那里的电视机永远外放到最大音量永远有一群人围在那里就算不聊天也要一起默默看电视；我家对面左对角线十米是村子里的菜摊，莫名其妙的即使不是饭点的时间那里也很容易围着一群人，而我家旁边是村子的大礼堂还好现在不是夏天，要不然天天有人在这里跳广场舞。</p><p>村子是熟人社会，虽然我和他们不太熟，但是他们和我很熟，那群人无聊的很，只要出现一个稍微面生一点的面孔，他们都会一直盯着看直到认出来为止：”哦！这是XX家女儿啊！这么大了啊！“然后从这句话开始问候你的各种消息。所以一般即使是出去取个快递我都要从楼上拉着窗帘的逢上往偷窥两眼看看下面有没有人，有哪些人，如果人很多，或者是有一个亲戚在那，大概是不回出门的了，这大概也是我今天饿了一天的原因吧。</p><p>刚刚还是去取快递了，找快递的时候听到那些人聊天，其中七个奶奶一直盯着我看，我猜她快要认出我来了，模糊的童年印象重她抱过我……我和她对视一眼，装作不在意的转身找东西。</p><p>小卖部的老板娘说：”今年去了四个，我家这一个，XXX家一个……“</p><p>突然反应过来，她们好像说的是死亡。然后我才发现我家对面那个永远在晒太阳的老奶奶好久没有露面了，今年年初的时候还看见过她。</p><p>正对着家门口的是一个小屋子，里面住着一个老奶奶，隔壁就是她儿子的大房子，可是她似乎不愿意搬进去住。她是小卖部的常客，总是在那看电视——毕竟就是她儿子的小卖部嘛，说不定还是从她这里接手的。小时候很不喜欢她，感觉她的眼神阴鸷，每次我去买东西她总是盯着我看，可又一句话也不说。</p><p>后来上学了，但总是忘带家门钥匙，忘习惯了有一天就干脆不带了——因为，毕竟是熟人社会，所有人都认识我，所以我可以光明正大地爬自家的窗户，而她就是那个每周五下午看着我爬窗户的人。</p><p>有几次看见我爬的困难会非常贴心地把身下那把竹椅递给我说：“踩着这个爬上去！”我当然是拒接的，毕竟踩了人家的凳子还要清理道谢怪麻烦的。</p><p>逐渐有一天她变得似乎再也离不开那张竹椅了，她总是沉默地坐在自家的门口，什么话也不说，就算说了什么话也没人听得懂，有时候也会坐我家门口，当太阳找到我家这边的时候。</p><p>仔细看看，村子里的那些人都变老了，衰老是一件很沉重的事情，尤其是当你逐渐长大时才意识到它离你越来越近，离你的家人越来越近。</p><p>当然拆快递可以是一件很愉快的事。买了400张透明包装袋，只要12元，因为前天清理时看到受潮+沾灰的书而买，然而我发现包装书也是一件很痛苦的事情。以前我看到有人包装这些书是很不屑的，书从书店到自己的手里不就是拆包装的过程，而现在又要包回去，这样仿佛书又不属于自己了。而且我总是怀疑包装好的书到底会不会再次拆包装再次阅读。</p><p><img src="/images/2021121601.png"></p><p>一本一本的包装又是一件很繁琐的事情，除了回忆起有关这本书的回忆之外。包装白居易全集，想当初我是抱着多少热爱和向往买这一套书的，那时非常迷恋白居易，还特意改了一个平台的昵称叫“白乐天的门童”，大概是因为一首《长恨歌》，我背了很久很久的长恨歌，而现在只能记住前面四句，所有人都能记住的前四句。而这一套书也大概永远也不会读了，其实当初把它买来时我也没怎么读过。</p><p>所以，每包一本书都是百感交集的，耻辱、自责又无能为力的感觉，每包一本书就更加地沉重，好像是我把它们一本本推进了不见阳光的地下，再也不会相见。这就是 封存 吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;em&gt;”开展新生活是一件很困难的事情“，然后我发现，这句话我说早了。&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;因为前天算自律的，昨天一整天什么都没做，今天也是，今天不仅什么也没做，还几乎什么也没吃。&lt;/p&gt;
&lt;p&gt;真的好饿，还好马上就要到晚饭时间了。&lt;/p&gt;
&lt;p&gt;村</summary>
      
    
    
    <content src="https://sixteentime.github.io/images/2021121601.png" type="image"/>
    
    
    <category term="日记" scheme="https://sixteentime.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://sixteentime.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>二零二一年十二月十四日</title>
    <link href="https://sixteentime.github.io/2021/12/14/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E4%B8%80%E5%B9%B4%E5%8D%81%E4%BA%8C%E6%9C%88%E5%8D%81%E5%9B%9B%E6%97%A5/"/>
    <id>https://sixteentime.github.io/2021/12/14/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E4%B8%80%E5%B9%B4%E5%8D%81%E4%BA%8C%E6%9C%88%E5%8D%81%E5%9B%9B%E6%97%A5/</id>
    <published>2021-12-14T15:41:35.000Z</published>
    <updated>2021-12-16T08:26:00.432Z</updated>
    
    <content type="html"><![CDATA[<hr><p><em>开展“新生活”是一件很困难的事情。</em></p><hr><p><img src="/images/2021121401.png"></p><p>整理书架，先拿出从学校带回的书。</p><p><img src="/images/2021121402.png"></p><p>发现了一个小发绳，是妹妹的发绳。</p><p><img src="/images/2021121403.png"></p><p>书上全都是灰尘，翻开最厚的那本，书页全都泛黄了。毛姆的《人性的枷锁》，高三的课间和午间休息时拿出来读，现在想想真佩服那时的自己，上了大学反而没有耐性读这么厚的书了。</p><p><img src="/images/2021121404.png"></p><p>书架坏了。垃圾书架，便宜没好货。</p><p><img src="/images/2021121405.png"></p><p>晚上用新买来的幕布看电影，看《新桥恋人》，好喜欢好喜欢这部电影，想为Alex新建一个相册。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;em&gt;开展“新生活”是一件很困难的事情。&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/images/2021121401.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;整理书架，先拿出从学校带回的书。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/202112140</summary>
      
    
    
    <content src="https://sixteentime.github.io/images/2021121405.png" type="image"/>
    
    
    <category term="日记" scheme="https://sixteentime.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://sixteentime.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>二零二一年十二月十三日</title>
    <link href="https://sixteentime.github.io/2021/12/13/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E4%B8%80%E5%B9%B4%E5%8D%81%E4%BA%8C%E6%9C%88%E5%8D%81%E4%B8%89%E6%97%A5/"/>
    <id>https://sixteentime.github.io/2021/12/13/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E4%B8%80%E5%B9%B4%E5%8D%81%E4%BA%8C%E6%9C%88%E5%8D%81%E4%B8%89%E6%97%A5/</id>
    <published>2021-12-13T14:21:35.000Z</published>
    <updated>2021-12-13T14:50:32.541Z</updated>
    
    <content type="html"><![CDATA[<hr><p><em>今天凌晨的时候失眠了，因为想到了一些美好的让人亢奋的事情，越想越深入，越来越兴奋，一整晚几乎都没怎么睡着。所以现在很困，纠结了好一会还是决定写日记。</em></p><hr><p>帮助别人是很快乐的事情，被别人帮助也是很快乐的事情。今天被陌生人帮助的时候我心里在想以后也要这样经常帮助别人。</p><p>今天被一个穿着白衣服的姐姐像白衣天使一样和我一起握着同一个把手把我的五十斤重的行李箱抬下了三排台阶。她是我完全没有意料到的幸运，我为城市生活中还能遇到这样的好意而感到幸福，被别人帮助时的快乐真的不一样，有一种被在意被关心被爱护的感觉，被陌生人关心在现代社会中变得多么的奢侈。前几天我遇见了那个我帮过她一起搬箱子的同学，我只能假装不认识低头走过，我好怂。嗯说的乱七八糟语无伦次毫无逻辑的，因为我真的很困。</p><p>那今天就这样，晚安，明天会是美好的一天，因为明天是“新生活”的开始，新生活从打扫卫生和整理房间开始，我要从我的家出发延展出新生活。</p><p>（封面为：挤公交）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;em&gt;今天凌晨的时候失眠了，因为想到了一些美好的让人亢奋的事情，越想越深入，越来越兴奋，一整晚几乎都没怎么睡着。所以现在很困，纠结了好一会还是决定写日记。&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;帮助别人是很快乐的事情，被别人帮助也是很快乐的事情。今天被陌生人帮助的时</summary>
      
    
    
    <content src="https://sixteentime.github.io/images/2021121301.png" type="image"/>
    
    
    <category term="日记" scheme="https://sixteentime.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://sixteentime.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>二零二一年十二月十一日</title>
    <link href="https://sixteentime.github.io/2021/12/12/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E4%B8%80%E5%B9%B4%E5%8D%81%E4%BA%8C%E6%9C%88%E5%8D%81%E4%BA%8C%E6%97%A5/"/>
    <id>https://sixteentime.github.io/2021/12/12/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E4%B8%80%E5%B9%B4%E5%8D%81%E4%BA%8C%E6%9C%88%E5%8D%81%E4%BA%8C%E6%97%A5/</id>
    <published>2021-12-12T15:34:10.000Z</published>
    <updated>2021-12-13T00:29:54.464Z</updated>
    
    <content type="html"><![CDATA[<hr><p><em>今天的天气一下子就冷了很多，疫情、冬天、寒冷的阴雨天，有一种说不出来的大自然的震慑力，一种更加轻飘飘的软绵绵的，却也是实实在在的震慑力。</em></p><hr><p>今天搭建好了这个博客，和我昨天构想的不太一样，毕竟用的是别人的theme，已经固定好的框架和hexo有限的功能，对于低技术低经济的我来说，也应该满足了。今天的白天很焦急，焦急很多东西，焦急购买的域名审核怎么还没有通过，焦急糟糕的疫情，焦急开题报告的答辩。下午吃了很多东西，一种没有克制的饮食欲望，吃了零食后吃晚饭吃了晚饭后喝奶茶，其间又是因为太咸了太甜了太干了而大口大口的喝水，腹部一直是饱满的状态，持续到撑涨后感受到非常难受的状态，一种生理和心理上的双重不适感。这就是我经常会陷入的状态，弗洛伊德心理学上的“口腔期”。人总是会沉迷入什么东西，对于我来说，让嘴巴保持充实的状态也是一种沉迷，能做的只有逃避，而不是克服。</p><p>今天晚上的语音聊天室里多了一个朋友，新朋友感觉是一个很温柔的女孩，给人的感觉很舒服。这个语音聊天活动是我最重视的活动，仔细想来甚至是我一部分的精神寄托，它支撑着我的很多东西，现实中的社恐加孤独让我很难找到这种交流的替代品，这也是互联网带给我的东西。和大家分享自己，和大家交流我们都感兴趣的东西，去了解别人，去关心别人，和别人建立连接，去影响对方，让别人来影响自己，这些都是很重要的东西。我很珍惜这个活动，当然更加珍惜的是和我一起参与活动的人。</p><p>刚刚电脑死机了重启，；两段文字没有保存下来，真糟糕，糟糕的电脑，难道不知道当时的心境是没办法重现的吗？所以现在变得有点想写又有点不想写了，重复会被看作是很无聊和没有意义的事情。</p><p>想了一下还是不重复那两段吧，就让它飘散吧，飘散在遗失的电子数据里，飘散在我的记忆仓库里，飘散在偶尔一个梦中的再现中。</p><p>我希望我能饱满精神的过好每天，我又有点担心，我有点迷信，害怕说出这样的话就会事与愿违，这种flag，反向flag的背后，这种迷信的背后，是个人意志在命运面前的脆弱和渺小性，是对于天地中更加玄妙的神秘物质或者说自然本身的恐惧感，所以啊，我真怂，我最羡慕最向往的就是那些“不怂”的人，就是那些不怕命运的人，那些有着真正“勇气”的人，真正的勇气，就是不害怕命运，不害怕死亡，无论ta的个人意志本质上是愚蠢的迂腐的还是前卫的正面的，都是让我向往的。</p><p>晚安。</p><p>（封面是今天早上拍的落叶）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;em&gt;今天的天气一下子就冷了很多，疫情、冬天、寒冷的阴雨天，有一种说不出来的大自然的震慑力，一种更加轻飘飘的软绵绵的，却也是实实在在的震慑力。&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今天搭建好了这个博客，和我昨天构想的不太一样，毕竟用的是别人的theme，已经固定好</summary>
      
    
    
    <content src="https://sixteentime.github.io/images/2021121202.png" type="image"/>
    
    
    <category term="日记" scheme="https://sixteentime.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://sixteentime.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>二零二一年十二月十一日</title>
    <link href="https://sixteentime.github.io/2021/12/11/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E4%B8%80%E5%B9%B4%E5%8D%81%E4%BA%8C%E6%9C%88%E5%8D%81%E4%B8%80%E6%97%A5/"/>
    <id>https://sixteentime.github.io/2021/12/11/%E4%BA%8C%E9%9B%B6%E4%BA%8C%E4%B8%80%E5%B9%B4%E5%8D%81%E4%BA%8C%E6%9C%88%E5%8D%81%E4%B8%80%E6%97%A5/</id>
    <published>2021-12-11T14:02:12.000Z</published>
    <updated>2021-12-13T00:30:11.483Z</updated>
    
    <content type="html"><![CDATA[<hr><p><em>第一次搭建博客，第一次在博客上写日记。好兴奋啊。此时正听着“歪波音室”。</em></p><hr><p>今天早上又是八点才醒，去图书馆时纠结了一下还是带了一本笔记本，其实主要是纠结带哪本笔记本，想带一本“真正的日记本”，可是以前的每一本“日记本”最后都变成了我的草稿本，现在拾起来自己都嫌弃了。最后只能拿买莎士比亚全集送的一本纯白笔记本，本子里有很多莎士比亚话剧的插画，实在不适合当日记本，这一本最初企图当作摘抄本来用，可是我也没这么勤劳。果然，我依旧没有那么勤劳，它被我带出图书馆的样子和带进来时没有区别，没有增加一个字。</p><p>新鲜事物确实有着很大的诱惑力和影响力，我一整天基本都在“沉迷”于搭建这个博客，顺便开了Forest来记录我的学习，说是学习…也有点过意不去，因为这强烈的兴奋感不亚于我玩游戏时的乐趣。当然，最兴奋的还是选背景照片的时候，我看着妮可在《时时刻刻》中的剧照——实在，实在是太美了，我爱她，我爱伍尔夫。</p><p>可是搭建这个博客依旧存在很多问题，明天继续探索。希望我能一直在这里写日记吧。今天在写这片日记的时候，我的状态是很好的，好期待明天，好期待以后。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;em&gt;第一次搭建博客，第一次在博客上写日记。好兴奋啊。此时正听着“歪波音室”。&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今天早上又是八点才醒，去图书馆时纠结了一下还是带了一本笔记本，其实主要是纠结带哪本笔记本，想带一本“真正的日记本”，可是以前的每一本“日记本”最后都</summary>
      
    
    
    <content src="https://sixteentime.github.io/images/2021121101.png" type="image"/>
    
    
    <category term="日记" scheme="https://sixteentime.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="日记" scheme="https://sixteentime.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建博客时遇到的问题</title>
    <link href="https://sixteentime.github.io/2021/12/11/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E6%97%B6%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://sixteentime.github.io/2021/12/11/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E6%97%B6%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-12-11T05:40:40.000Z</published>
    <updated>2021-12-12T05:47:14.291Z</updated>
    
    <content type="html"><![CDATA[<p>主要是deploy部署问题的坑</p><h3 id="1-需要输入Github账号和密码，输入之后依旧部署失败"><a href="#1-需要输入Github账号和密码，输入之后依旧部署失败" class="headerlink" title="1.需要输入Github账号和密码，输入之后依旧部署失败"></a>1.需要输入Github账号和密码，输入之后依旧部署失败</h3><p>问题描述：在输入命令 <code>hexo d</code> 来部署时提示需要输入Github的账号和密码进行验证，输入后提示登陆验证失败。</p><p>解决方法：网上查询后得知是2021年8月13日之后github不支持输入账号密码登陆而要求输入token登陆，在参考了这篇博客资料后成功解决了该问题，直接在需要输入密码的地方输入token。</p><p><a href="https://blog.csdn.net/yjw123456/article/details/119696726#commentBox">https://blog.csdn.net/yjw123456/article/details/119696726#commentBox</a></p><h3 id="2-解决上面的问题，但是出现openSSL问题"><a href="#2-解决上面的问题，但是出现openSSL问题" class="headerlink" title="2.解决上面的问题，但是出现openSSL问题"></a>2.解决上面的问题，但是出现openSSL问题</h3><p>问题描述：错误信息：<code>OpenSSL SSL_read: Connection was reset, errno 10054</code></p><p>解决方法：删掉项目根目录下的 <code>.deploy_git</code> 文件，重新执行命令 <code>hexo d</code> ,参考以下这篇博客：</p><p><a href="https://www.cnblogs.com/tenderwx/p/5783432.html">https://www.cnblogs.com/tenderwx/p/5783432.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要是deploy部署问题的坑&lt;/p&gt;
&lt;h3 id=&quot;1-需要输入Github账号和密码，输入之后依旧部署失败&quot;&gt;&lt;a href=&quot;#1-需要输入Github账号和密码，输入之后依旧部署失败&quot; class=&quot;headerlink&quot; title=&quot;1.需要输入Github账</summary>
      
    
    
    
    <category term="博客" scheme="https://sixteentime.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="学习" scheme="https://sixteentime.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="hexo" scheme="https://sixteentime.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
